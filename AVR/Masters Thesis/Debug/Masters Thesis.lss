
Masters Thesis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005724  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00005724  000057d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000208  008000ba  008000ba  00005832  2**0
                  ALLOC
  3 .eeprom       00000078  00810000  00810000  00005832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000058aa  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00005906  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f9a  00000000  00000000  00005aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000956  00000000  00000000  00009a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f06  00000000  00000000  0000a39e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000748  00000000  00000000  0000b2a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001429  00000000  00000000  0000b9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ff9  00000000  00000000  0000ce15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000de0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 03 	jmp	0x656	; 0x656 <__ctors_end>
       4:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
       8:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
       c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      10:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      14:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      18:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      1c:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__vector_7>
      20:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__vector_8>
      24:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__vector_9>
      28:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      2c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      30:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <__vector_12>
      34:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      38:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__vector_14>
      3c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      40:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      44:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      48:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      4c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      50:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      54:	53 09       	sbc	r21, r3
      56:	57 09       	sbc	r21, r7
      58:	8b 09       	sbc	r24, r11
      5a:	01 0d       	add	r16, r1
      5c:	c9 09       	sbc	r28, r9
      5e:	3b 0a       	sbc	r3, r27
      60:	69 09       	sbc	r22, r9
      62:	64 0a       	sbc	r6, r20
      64:	eb 0b       	sbc	r30, r27
      66:	a7 0c       	add	r10, r7
      68:	2b 0d       	add	r18, r11
      6a:	01 0d       	add	r16, r1
      6c:	01 0d       	add	r16, r1
      6e:	01 0d       	add	r16, r1
      70:	01 0d       	add	r16, r1
      72:	01 0d       	add	r16, r1
      74:	01 0d       	add	r16, r1
      76:	01 0d       	add	r16, r1
      78:	01 0d       	add	r16, r1
      7a:	01 0d       	add	r16, r1
      7c:	01 0d       	add	r16, r1
      7e:	01 0d       	add	r16, r1
      80:	01 0d       	add	r16, r1
      82:	01 0d       	add	r16, r1
      84:	01 0d       	add	r16, r1
      86:	01 0d       	add	r16, r1
      88:	01 0d       	add	r16, r1
      8a:	01 0d       	add	r16, r1
      8c:	01 0d       	add	r16, r1
      8e:	01 0d       	add	r16, r1
      90:	01 0d       	add	r16, r1
      92:	01 0d       	add	r16, r1
      94:	01 0d       	add	r16, r1
      96:	01 0d       	add	r16, r1
      98:	01 0d       	add	r16, r1
      9a:	01 0d       	add	r16, r1
      9c:	01 0d       	add	r16, r1
      9e:	01 0d       	add	r16, r1
      a0:	01 0d       	add	r16, r1
      a2:	01 0d       	add	r16, r1
      a4:	01 0d       	add	r16, r1
      a6:	01 0d       	add	r16, r1
      a8:	01 0d       	add	r16, r1
      aa:	01 0d       	add	r16, r1
      ac:	01 0d       	add	r16, r1
      ae:	01 0d       	add	r16, r1
      b0:	01 0d       	add	r16, r1
      b2:	01 0d       	add	r16, r1
      b4:	01 0d       	add	r16, r1
      b6:	01 0d       	add	r16, r1
      b8:	01 0d       	add	r16, r1
      ba:	01 0d       	add	r16, r1
      bc:	01 0d       	add	r16, r1
      be:	01 0d       	add	r16, r1
      c0:	01 0d       	add	r16, r1
      c2:	01 0d       	add	r16, r1
      c4:	01 0d       	add	r16, r1
      c6:	01 0d       	add	r16, r1
      c8:	01 0d       	add	r16, r1
      ca:	01 0d       	add	r16, r1
      cc:	01 0d       	add	r16, r1
      ce:	01 0d       	add	r16, r1
      d0:	01 0d       	add	r16, r1
      d2:	01 0d       	add	r16, r1
      d4:	01 0d       	add	r16, r1
      d6:	01 0d       	add	r16, r1
      d8:	01 0d       	add	r16, r1
      da:	01 0d       	add	r16, r1
      dc:	01 0d       	add	r16, r1
      de:	01 0d       	add	r16, r1
      e0:	01 0d       	add	r16, r1
      e2:	01 0d       	add	r16, r1
      e4:	01 0d       	add	r16, r1
      e6:	01 0d       	add	r16, r1
      e8:	01 0d       	add	r16, r1
      ea:	04 0d       	add	r16, r4
      ec:	e9 19       	sub	r30, r9
      ee:	f6 19       	sub	r31, r6
      f0:	a1 1a       	sub	r10, r17
      f2:	89 1a       	sub	r8, r25
      f4:	84 1b       	sub	r24, r20
      f6:	f7 1a       	sub	r15, r23
      f8:	3a 1b       	sub	r19, r26
      fa:	84 1b       	sub	r24, r20
      fc:	07 63       	ori	r16, 0x37	; 55
      fe:	42 36       	cpi	r20, 0x62	; 98
     100:	b7 9b       	sbis	0x16, 7	; 22
     102:	d8 a7       	std	Y+40, r29	; 0x28
     104:	1a 39       	cpi	r17, 0x9A	; 154
     106:	68 56       	subi	r22, 0x68	; 104
     108:	18 ae       	std	Y+56, r1	; 0x38
     10a:	ba ab       	std	Y+50, r27	; 0x32
     10c:	55 8c       	ldd	r5, Z+29	; 0x1d
     10e:	1d 3c       	cpi	r17, 0xCD	; 205
     110:	b7 cc       	rjmp	.-1682   	; 0xfffffa80 <__eeprom_end+0xff7efa08>
     112:	57 63       	ori	r21, 0x37	; 55
     114:	bd 6d       	ori	r27, 0xDD	; 221
     116:	ed fd       	.word	0xfded	; ????
     118:	75 3e       	cpi	r23, 0xE5	; 229
     11a:	f6 17       	cp	r31, r22
     11c:	72 31       	cpi	r23, 0x12	; 18
     11e:	bf 00       	.word	0x00bf	; ????
     120:	00 00       	nop
     122:	80 3f       	cpi	r24, 0xF0	; 240

00000124 <__trampolines_end>:
     124:	2a 2a       	or	r2, r26
     126:	50 6f       	ori	r21, 0xF0	; 240
     128:	73 73       	andi	r23, 0x33	; 51
     12a:	69 62       	ori	r22, 0x29	; 41
     12c:	6c 65       	ori	r22, 0x5C	; 92
     12e:	20 62       	ori	r18, 0x20	; 32
     130:	61 6c       	ori	r22, 0xC1	; 193
     132:	61 6e       	ori	r22, 0xE1	; 225
     134:	63 65       	ori	r22, 0x53	; 83
     136:	2a 2a       	or	r2, r26
     138:	0a 00       	.word	0x000a	; ????

0000013a <__c.2622>:
     13a:	30 2e 31 00                                         0.1.

0000013e <__c.2624>:
     13e:	2a 2a 43 61 6c 69 62 72 61 74 65 20 42 61 6c 61     **Calibrate Bala
     14e:	6e 63 65 20 44 6f 6e 65 2a 2a 0a 00                 nce Done**..

0000015a <__c.2627>:
     15a:	30 2e 31 00                                         0.1.

0000015e <__c.2643>:
     15e:	2a 2a 43 65 6c 6c 20 25 69 2a 2a 0a 00              **Cell %i**..

0000016b <__c.2666>:
     16b:	2a 2a 4e 6f 20 63 68 61 72 67 65 20 6e 65 63 65     **No charge nece
     17b:	73 73 61 72 79 2e 2a 2a 0a 00                       ssary.**..

00000185 <__c.2668>:
     185:	3c 70 73 3c 50 35 35 56 43 25 53 41 52 47 3e 3e     <ps<P55VC%SARG>>
     195:	0a 00                                               ..

00000197 <__c.2670>:
     197:	2a 2a 42 65 67 69 6e 20 43 43 20 43 68 61 72 67     **Begin CC Charg
     1a7:	65 2a 2a 0a 00                                      e**..

000001ac <__c.2674>:
     1ac:	2a 2a 42 65 67 69 6e 20 43 56 20 43 68 61 72 67     **Begin CV Charg
     1bc:	65 2a 2a 0a 00                                      e**..

000001c1 <__c.2677>:
     1c1:	3c 70 73 3c 53 3e 3e 0a 00                          <ps<S>>..

000001ca <__c.2693>:
     1ca:	3c 61 6c 3c 49 53 45 54 20 25 53 3e 3e 0a 00        <al<ISET %S>>..

000001d9 <__c.2695>:
     1d9:	3c 61 6c 3c 4c 4f 41 44 20 31 3e 3e 0a 00           <al<LOAD 1>>..

000001e7 <__c.2697>:
     1e7:	2a 2a 42 65 67 69 6e 20 44 69 73 63 68 61 72 67     **Begin Discharg
     1f7:	65 2a 2a 0a 00                                      e**..

000001fc <__c.2701>:
     1fc:	3c 61 6c 3c 49 53 45 54 20 30 3e 3e 0a 00           <al<ISET 0>>..

0000020a <__c.2703>:
     20a:	3c 61 6c 3c 4c 4f 41 44 20 30 3e 3e 0a 00           <al<LOAD 0>>..

00000218 <__c.2726>:
     218:	2a 2a 42 65 67 69 6e 20 6a 75 73 74 20 6c 6f 67     **Begin just log
     228:	67 69 6e 67 2a 2a 0a 00                             ging**..

00000230 <__c.2730>:
     230:	30 2e 31 00                                         0.1.

00000234 <__c.2734>:
     234:	2a 2a 42 65 67 69 6e 20 50 75 6c 73 65 20 54 65     **Begin Pulse Te
     244:	73 74 2a 2a 0a 00                                   st**..

0000024a <__c.2737>:
     24a:	2a 2a 50 75 6c 73 65 20 74 65 73 74 20 64 6f 6e     **Pulse test don
     25a:	65 2a 2a 0a 00                                      e**..

0000025f <__c.2741>:
     25f:	2a 2a 42 65 67 69 6e 20 74 6f 70 20 62 61 6c 61     **Begin top bala
     26f:	6e 63 65 20 69 6e 69 74 69 61 6c 20 63 68 61 72     nce initial char
     27f:	67 65 2a 2a 0a 00                                   ge**..

00000285 <__c.2744>:
     285:	30 2e 32 00                                         0.2.

00000289 <__c.2746>:
     289:	2a 2a 42 65 67 69 6e 20 74 6f 70 20 62 61 6c 61     **Begin top bala
     299:	6e 63 65 2a 2a 0a 00                                nce**..

000002a0 <__c.2749>:
     2a0:	2a 2a 42 65 67 69 6e 20 66 69 6e 61 6c 20 63 68     **Begin final ch
     2b0:	61 72 67 65 2a 2a 0a 00                             arge**..

000002b8 <__c.2752>:
     2b8:	30 2e 32 00                                         0.2.

000002bc <__c.2755>:
     2bc:	2a 2a 42 65 67 69 6e 20 63 68 61 72 67 65 2a 2a     **Begin charge**
     2cc:	0a 00                                               ..

000002ce <__c.2758>:
     2ce:	30 2e 31 00                                         0.1.

000002d2 <__c.2760>:
     2d2:	2a 2a 45 6e 64 20 43 68 61 72 67 65 2a 2a 0a 00     **End Charge**..

000002e2 <__c.2767>:
     2e2:	30 2e 35 00                                         0.5.

000002e6 <__c.2769>:
     2e6:	2a 2a 42 65 67 69 6e 20 46 69 6e 64 20 43 61 70     **Begin Find Cap
     2f6:	61 63 69 74 79 2a 2a 0a 00                          acity**..

000002ff <__c.2773>:
     2ff:	30 2e 31 00                                         0.1.

00000303 <__c.2781>:
     303:	30 2e 31 00                                         0.1.

00000307 <__c.2784>:
     307:	2a 2a 00                                            **.

0000030a <__c.2787>:
     30a:	25 78 09 00                                         %x..

0000030e <__c.2792>:
     30e:	2a 2a 0a 00                                         **..

00000312 <__c.2796>:
     312:	30 2e 35 00                                         0.5.

00000316 <__c.2798>:
     316:	2a 2a 44 6f 6e 65 20 66 69 6e 64 20 63 61 70 61     **Done find capa
     326:	63 69 74 79 2a 2a 0a 00                             city**..

0000032e <__c.2801>:
     32e:	2a 2a 42 65 67 69 6e 20 41 63 74 69 76 65 20 62     **Begin Active b
     33e:	61 6c 61 6e 63 65 2a 2a 0a 00                       alance**..

00000348 <__c.2803>:
     348:	2a 2a 44 6f 6e 65 20 73 65 74 75 70 2e 20 20 42     **Done setup.  B
     358:	65 67 69 6e 6e 69 6e 67 20 61 63 74 69 76 65 20     eginning active 
     368:	62 61 6c 61 6e 63 65 20 54 65 73 74 2a 2a 0a 00     balance Test**..

00000378 <__c.2806>:
     378:	2a 2a 42 61 6c 61 6e 63 65 72 73 20 65 6e 67 61     **Balancers enga
     388:	67 65 64 2a 2a 0a 00                                ged**..

0000038f <__c.2811>:
     38f:	30 2e 31 00                                         0.1.

00000393 <__c.2813>:
     393:	2a 2a 44 6f 6e 65 20 64 69 73 63 68 61 72 67 65     **Done discharge
     3a3:	2a 2a 0a 00                                         **..

000003a7 <__c.2816>:
     3a7:	2a 2a 42 65 67 69 6e 20 43 68 61 72 67 65 2a 2a     **Begin Charge**
     3b7:	0a 00                                               ..

000003b9 <__c.2819>:
     3b9:	30 2e 31 00                                         0.1.

000003bd <__c.2822>:
     3bd:	2a 2a 44 6f 6e 65 20 41 63 74 69 76 65 20 42 61     **Done Active Ba
     3cd:	6c 61 6e 63 65 0a 00                                lance..

000003d4 <__c.2833>:
     3d4:	2a 2a 41 44 43 41 6c 67 6f 72 69 74 68 6d 20 45     **ADCAlgorithm E
     3e4:	72 72 6f 72 3a 20 25 64 2a 2a 0a 00                 rror: %d**..

000003f0 <__c.2851>:
     3f0:	2a 2a 4d 75 6c 74 69 70 6c 69 65 72 20 63 6f 6e     **Multiplier con
     400:	73 74 61 6e 74 73 3a 20 00                          stants: .

00000409 <__c.2854>:
     409:	25 6c 64 20 00                                      %ld .

0000040e <__c.2859>:
     40e:	2a 2a 0a 00                                         **..

00000412 <__c.2640>:
     412:	2a 2a 57 61 74 63 68 64 6f 67 20 62 69 74 2c 20     **Watchdog bit, 
     422:	73 74 6f 70 70 69 6e 67 2a 2a 0a 00                 stopping**..

0000042e <__c.2644>:
     42e:	0a 00                                               ..

00000430 <__c.2657>:
     430:	2a 2a 49 6e 69 74 20 64 6f 6e 65 2e 2a 2a 0a 00     **Init done.**..

00000440 <__c.2659>:
     440:	2a 2a 4c 6f 6f 70 20 68 61 6c 74 65 64 20 61 74     **Loop halted at
     450:	20 25 35 6c 75 3a 20 45 72 72 6f 72 20 63 6f 64      %5lu: Error cod
     460:	65 3a 20 25 64 2a 2a 0a 00                          e: %d**..

00000469 <__c.2661>:
     469:	2a 2a 45 78 69 74 2a 2a 0a 00                       **Exit**..

00000473 <__c.2735>:
     473:	2a 2a 54 69 6d 65 6f 75 74 20 70 6f 6c 6c 69 6e     **Timeout pollin
     483:	67 20 66 6f 72 20 41 44 43 20 72 65 73 70 6f 6e     g for ADC respon
     493:	73 65 2a 2a 0a 00                                   se**..

00000499 <__c.2738>:
     499:	2a 2a 45 72 72 6f 72 3a 20 55 6e 65 78 70 65 63     **Error: Unexpec
     4a9:	74 65 64 20 69 6e 74 65 72 72 75 70 74 2a 2a 0a     ted interrupt**.
	...

000004ba <__c.2740>:
     4ba:	2a 2a 45 72 72 6f 72 20 73 6f 6d 65 20 63 65 6c     **Error some cel
     4ca:	6c 20 68 61 73 20 75 6e 64 65 72 20 6f 72 20 6f     l has under or o
     4da:	76 65 72 20 76 6f 6c 74 61 67 65 64 2a 2a 0a 00     ver voltaged**..

000004ea <__c.2743>:
     4ea:	2a 2a 57 61 72 6e 69 6e 67 3a 20 50 65 63 20 6d     **Warning: Pec m
     4fa:	69 73 6d 61 74 63 68 2a 2a 0a 00                    ismatch**..

00000505 <__c.2753>:
     505:	2a 2a 4c 6f 67 20 6d 6f 64 65 3a 20 25 78 2a 2a     **Log mode: %x**
     515:	0a 00                                               ..

00000517 <__c.2755>:
     517:	25 35 6c 75 09 00                                   %5lu..

0000051d <__c.2758>:
     51d:	25 64 09 00                                         %d..

00000521 <__c.2760>:
     521:	25 75 09 00                                         %u..

00000525 <__c.2762>:
     525:	25 36 6c 64 09 00                                   %6ld..

0000052b <__c.2767>:
     52b:	0a 00                                               ..

0000052d <__c.2779>:
     52d:	2a 2a 45 72 72 6f 72 20 73 6f 6d 65 20 63 65 6c     **Error some cel
     53d:	6c 20 68 61 73 20 75 6e 64 65 72 20 6f 72 20 6f     l has under or o
     54d:	76 65 72 20 76 6f 6c 74 61 67 65 64 2a 2a 0a 00     ver voltaged**..

0000055d <voltageTable.2214>:
     55d:	d0 07 dd 08 4f 09 93 09 a9 09 b2 09 b9 09 c8 09     ....O...........
     56d:	d5 09 e1 09 eb 09 f3 09 fb 09 03 0a 0b 0a 12 0a     ................
     57d:	19 0a 20 0a 28 0a 2f 0a 35 0a 3d 0a 46 0a 4f 0a     .. .(./.5.=.F.O.
     58d:	5b 0a 66 0a 75 0a 86 0a 9c 0a b1 0a c3 0a ef 0a     [.f.u...........

0000059d <voltageTable.2241>:
     59d:	d0 07 dd 08 4f 09 93 09 a9 09 b2 09 b9 09 c8 09     ....O...........
     5ad:	d5 09 e1 09 eb 09 f3 09 fb 09 03 0a 0b 0a 12 0a     ................
     5bd:	19 0a 20 0a 28 0a 2f 0a 35 0a 3d 0a 46 0a 4f 0a     .. .(./.5.=.F.O.
     5cd:	5b 0a 66 0a 75 0a 86 0a 9c 0a b1 0a c3 0a ef 0a     [.f.u...........

000005dd <__c.2268>:
     5dd:	25 31 69 2e 25 30 33 75 25 63 09 00                 %1i.%03u%c..

000005e9 <__c.2281>:
     5e9:	3c 70 73 3c 50 25 31 69 2e 25 30 33 69 25 63 56     <ps<P%1i.%03i%cV
     5f9:	25 73 52 47 3e 3e 0a 00                             %sRG>>..

00000601 <__c.2324>:
     601:	3c 70 73 3c 53 3e 3e 0a 00                          <ps<S>>..

0000060a <__c.2326>:
     60a:	3c 61 6c 3c 49 53 45 54 20 30 3e 3e 0a 00           <al<ISET 0>>..

00000618 <__c.2328>:
     618:	3c 61 6c 3c 4c 4f 41 44 20 30 3e 3e 0a 00           <al<LOAD 0>>..

00000626 <__c.2336>:
     626:	3c 70 73 3c 53 3e 3e 0a 00                          <ps<S>>..

0000062f <__c.2338>:
     62f:	3c 61 6c 3c 49 53 45 54 20 30 3e 3e 0a 00           <al<ISET 0>>..

0000063d <__c.2340>:
     63d:	3c 61 6c 3c 4c 4f 41 44 20 30 3e 3e 0a 00           <al<LOAD 0>>..

0000064b <__c.2342>:
     64b:	2a 2a 45 78 69 74 2a 2a 0a 00 00                    **Exit**...

00000656 <__ctors_end>:
     656:	11 24       	eor	r1, r1
     658:	1f be       	out	0x3f, r1	; 63
     65a:	cf e5       	ldi	r28, 0x5F	; 95
     65c:	d8 e0       	ldi	r29, 0x08	; 8
     65e:	de bf       	out	0x3e, r29	; 62
     660:	cd bf       	out	0x3d, r28	; 61

00000662 <__do_copy_data>:
     662:	10 e0       	ldi	r17, 0x00	; 0
     664:	a0 e6       	ldi	r26, 0x60	; 96
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	e4 e2       	ldi	r30, 0x24	; 36
     66a:	f7 e5       	ldi	r31, 0x57	; 87
     66c:	02 c0       	rjmp	.+4      	; 0x672 <__do_copy_data+0x10>
     66e:	05 90       	lpm	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	aa 3b       	cpi	r26, 0xBA	; 186
     674:	b1 07       	cpc	r27, r17
     676:	d9 f7       	brne	.-10     	; 0x66e <__do_copy_data+0xc>

00000678 <__do_clear_bss>:
     678:	22 e0       	ldi	r18, 0x02	; 2
     67a:	aa eb       	ldi	r26, 0xBA	; 186
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	01 c0       	rjmp	.+2      	; 0x682 <.do_clear_bss_start>

00000680 <.do_clear_bss_loop>:
     680:	1d 92       	st	X+, r1

00000682 <.do_clear_bss_start>:
     682:	a2 3c       	cpi	r26, 0xC2	; 194
     684:	b2 07       	cpc	r27, r18
     686:	e1 f7       	brne	.-8      	; 0x680 <.do_clear_bss_loop>
     688:	0e 94 28 16 	call	0x2c50	; 0x2c50 <main>
     68c:	0c 94 90 2b 	jmp	0x5720	; 0x5720 <_exit>

00000690 <__bad_interrupt>:
     690:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000694 <initEEPROM>:
int32_t BDCMult[NumberOfCells];	//denominator is 10,000
#define BDCDenom 10000
uint8_t ActiveBalanceMode = ActiveBalanceOff;

void initEEPROM()
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
		eeprom_read_block(R, REEPROM, NumberOfCells*sizeof(uint16_t));
     69c:	48 e1       	ldi	r20, 0x18	; 24
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	88 e1       	ldi	r24, 0x18	; 24
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	0e 94 82 2a 	call	0x5504	; 0x5504 <__eerd_block_m32a>
		eeprom_read_block(R1, R1EEPROM, NumberOfCells*sizeof(uint16_t));
     6ac:	48 e1       	ldi	r20, 0x18	; 24
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	68 e1       	ldi	r22, 0x18	; 24
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	8f ef       	ldi	r24, 0xFF	; 255
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 82 2a 	call	0x5504	; 0x5504 <__eerd_block_m32a>
		eeprom_read_block(C1, C1EEPROM, NumberOfCells*sizeof(uint16_t));
     6bc:	48 e1       	ldi	r20, 0x18	; 24
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 e3       	ldi	r22, 0x30	; 48
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	8c e6       	ldi	r24, 0x6C	; 108
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 82 2a 	call	0x5504	; 0x5504 <__eerd_block_m32a>
		eeprom_read_block(capacities, capEEPROM, NumberOfCells*sizeof(int32_t));
     6cc:	40 e3       	ldi	r20, 0x30	; 48
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	68 e4       	ldi	r22, 0x48	; 72
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	8a ec       	ldi	r24, 0xCA	; 202
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 82 2a 	call	0x5504	; 0x5504 <__eerd_block_m32a>
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <calibrateBalance>:
	allDone = 1,
	stillWorking = 0,
	needToCharge = 2,
};
uint8_t calibrateBalance(threadVar* var, uint8_t mode, uint8_t tolerance)
{
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	66 97       	sbiw	r28, 0x16	; 22
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	98 8b       	std	Y+16, r25	; 0x10
     700:	8f 87       	std	Y+15, r24	; 0x0f
     702:	69 8b       	std	Y+17, r22	; 0x11
     704:	4a 8b       	std	Y+18, r20	; 0x12
	
	static uint8_t state = PickCells;
	static uint32_t timeRec;
	static int16_t minDelta = INT16_MAX;
	static uint8_t onTime = 30;
	int32_t average = 0;
     706:	19 82       	std	Y+1, r1	; 0x01
     708:	1a 82       	std	Y+2, r1	; 0x02
     70a:	1b 82       	std	Y+3, r1	; 0x03
     70c:	1c 82       	std	Y+4, r1	; 0x04
	int16_t cellV;
	int16_t minCellV = INT16_MAX;
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	9f e7       	ldi	r25, 0x7F	; 127
     712:	9e 83       	std	Y+6, r25	; 0x06
     714:	8d 83       	std	Y+5, r24	; 0x05
	int16_t maxCellV = INT16_MIN;
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e8       	ldi	r25, 0x80	; 128
     71a:	98 87       	std	Y+8, r25	; 0x08
     71c:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t minCell;
	
	if((NewADCReadings & ADCBalanceFlag) &&
     71e:	80 91 21 01 	lds	r24, 0x0121
     722:	88 2f       	mov	r24, r24
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	84 70       	andi	r24, 0x04	; 4
     728:	99 27       	eor	r25, r25
     72a:	00 97       	sbiw	r24, 0x00	; 0
     72c:	09 f4       	brne	.+2      	; 0x730 <calibrateBalance+0x4e>
     72e:	e1 c1       	rjmp	.+962    	; 0xaf2 <__stack+0x293>
			oneSecondPassed & secondAlgorithmMask)
     730:	80 91 fc 01 	lds	r24, 0x01FC
     734:	88 2f       	mov	r24, r24
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	84 70       	andi	r24, 0x04	; 4
     73a:	99 27       	eor	r25, r25
	int16_t cellV;
	int16_t minCellV = INT16_MAX;
	int16_t maxCellV = INT16_MIN;
	uint8_t minCell;
	
	if((NewADCReadings & ADCBalanceFlag) &&
     73c:	00 97       	sbiw	r24, 0x00	; 0
     73e:	09 f4       	brne	.+2      	; 0x742 <calibrateBalance+0x60>
     740:	d8 c1       	rjmp	.+944    	; 0xaf2 <__stack+0x293>
			oneSecondPassed & secondAlgorithmMask)
	{
		NewADCReadings &= ~ADCBalanceFlag;
     742:	80 91 21 01 	lds	r24, 0x0121
     746:	8b 7f       	andi	r24, 0xFB	; 251
     748:	80 93 21 01 	sts	0x0121, r24
		oneSecondPassed &= ~secondAlgorithmMask;
     74c:	80 91 fc 01 	lds	r24, 0x01FC
     750:	8b 7f       	andi	r24, 0xFB	; 251
     752:	80 93 fc 01 	sts	0x01FC, r24
		
		switch(state)
     756:	80 91 bb 00 	lds	r24, 0x00BB
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	91 05       	cpc	r25, r1
     762:	09 f4       	brne	.+2      	; 0x766 <calibrateBalance+0x84>
     764:	6d c1       	rjmp	.+730    	; 0xa40 <__stack+0x1e1>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	91 05       	cpc	r25, r1
     76a:	09 f4       	brne	.+2      	; 0x76e <calibrateBalance+0x8c>
     76c:	a1 c1       	rjmp	.+834    	; 0xab0 <__stack+0x251>
     76e:	00 97       	sbiw	r24, 0x00	; 0
     770:	09 f0       	breq	.+2      	; 0x774 <calibrateBalance+0x92>
     772:	bf c1       	rjmp	.+894    	; 0xaf2 <__stack+0x293>
		{
			case PickCells:
				//first the average
				for(uint8_t i = 1; i <= NumberOfCells; i++)
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	8a 87       	std	Y+10, r24	; 0x0a
     778:	3b c0       	rjmp	.+118    	; 0x7f0 <calibrateBalance+0x10e>
				{
					cellV = voltageFromCVReg(var->state->voltagePacket->reg.payload[0].bytes, i);
     77a:	8f 85       	ldd	r24, Y+15	; 0x0f
     77c:	98 89       	ldd	r25, Y+16	; 0x10
     77e:	fc 01       	movw	r30, r24
     780:	82 81       	ldd	r24, Z+2	; 0x02
     782:	93 81       	ldd	r25, Z+3	; 0x03
     784:	fc 01       	movw	r30, r24
     786:	82 81       	ldd	r24, Z+2	; 0x02
     788:	93 81       	ldd	r25, Z+3	; 0x03
     78a:	02 96       	adiw	r24, 0x02	; 2
     78c:	6a 85       	ldd	r22, Y+10	; 0x0a
     78e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <voltageFromCVReg>
     792:	9e 87       	std	Y+14, r25	; 0x0e
     794:	8d 87       	std	Y+13, r24	; 0x0d
					average += cellV;
     796:	8d 85       	ldd	r24, Y+13	; 0x0d
     798:	9e 85       	ldd	r25, Y+14	; 0x0e
     79a:	aa 27       	eor	r26, r26
     79c:	97 fd       	sbrc	r25, 7
     79e:	a0 95       	com	r26
     7a0:	ba 2f       	mov	r27, r26
     7a2:	29 81       	ldd	r18, Y+1	; 0x01
     7a4:	3a 81       	ldd	r19, Y+2	; 0x02
     7a6:	4b 81       	ldd	r20, Y+3	; 0x03
     7a8:	5c 81       	ldd	r21, Y+4	; 0x04
     7aa:	82 0f       	add	r24, r18
     7ac:	93 1f       	adc	r25, r19
     7ae:	a4 1f       	adc	r26, r20
     7b0:	b5 1f       	adc	r27, r21
     7b2:	89 83       	std	Y+1, r24	; 0x01
     7b4:	9a 83       	std	Y+2, r25	; 0x02
     7b6:	ab 83       	std	Y+3, r26	; 0x03
     7b8:	bc 83       	std	Y+4, r27	; 0x04
					
					if(cellV < minCellV)
     7ba:	2d 85       	ldd	r18, Y+13	; 0x0d
     7bc:	3e 85       	ldd	r19, Y+14	; 0x0e
     7be:	8d 81       	ldd	r24, Y+5	; 0x05
     7c0:	9e 81       	ldd	r25, Y+6	; 0x06
     7c2:	28 17       	cp	r18, r24
     7c4:	39 07       	cpc	r19, r25
     7c6:	34 f4       	brge	.+12     	; 0x7d4 <calibrateBalance+0xf2>
					{
						minCellV = cellV;
     7c8:	8d 85       	ldd	r24, Y+13	; 0x0d
     7ca:	9e 85       	ldd	r25, Y+14	; 0x0e
     7cc:	9e 83       	std	Y+6, r25	; 0x06
     7ce:	8d 83       	std	Y+5, r24	; 0x05
						minCell = i;
     7d0:	8a 85       	ldd	r24, Y+10	; 0x0a
     7d2:	89 87       	std	Y+9, r24	; 0x09
					}
					if (cellV > maxCellV)
     7d4:	2d 85       	ldd	r18, Y+13	; 0x0d
     7d6:	3e 85       	ldd	r19, Y+14	; 0x0e
     7d8:	8f 81       	ldd	r24, Y+7	; 0x07
     7da:	98 85       	ldd	r25, Y+8	; 0x08
     7dc:	82 17       	cp	r24, r18
     7de:	93 07       	cpc	r25, r19
     7e0:	24 f4       	brge	.+8      	; 0x7ea <calibrateBalance+0x108>
					{
						maxCellV = cellV;
     7e2:	8d 85       	ldd	r24, Y+13	; 0x0d
     7e4:	9e 85       	ldd	r25, Y+14	; 0x0e
     7e6:	98 87       	std	Y+8, r25	; 0x08
     7e8:	8f 83       	std	Y+7, r24	; 0x07
		
		switch(state)
		{
			case PickCells:
				//first the average
				for(uint8_t i = 1; i <= NumberOfCells; i++)
     7ea:	8a 85       	ldd	r24, Y+10	; 0x0a
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
     7ee:	8a 87       	std	Y+10, r24	; 0x0a
     7f0:	8a 85       	ldd	r24, Y+10	; 0x0a
     7f2:	8d 30       	cpi	r24, 0x0D	; 13
     7f4:	10 f2       	brcs	.-124    	; 0x77a <calibrateBalance+0x98>
					{
						maxCellV = cellV;
					}
				}
				
				if((maxCellV - minCellV) < minDelta)
     7f6:	2f 81       	ldd	r18, Y+7	; 0x07
     7f8:	38 85       	ldd	r19, Y+8	; 0x08
     7fa:	8d 81       	ldd	r24, Y+5	; 0x05
     7fc:	9e 81       	ldd	r25, Y+6	; 0x06
     7fe:	28 1b       	sub	r18, r24
     800:	39 0b       	sbc	r19, r25
     802:	80 91 60 00 	lds	r24, 0x0060
     806:	90 91 61 00 	lds	r25, 0x0061
     80a:	28 17       	cp	r18, r24
     80c:	39 07       	cpc	r19, r25
     80e:	64 f4       	brge	.+24     	; 0x828 <calibrateBalance+0x146>
				{
					minDelta = maxCellV - minCellV;
     810:	2f 81       	ldd	r18, Y+7	; 0x07
     812:	38 85       	ldd	r19, Y+8	; 0x08
     814:	8d 81       	ldd	r24, Y+5	; 0x05
     816:	9e 81       	ldd	r25, Y+6	; 0x06
     818:	79 01       	movw	r14, r18
     81a:	e8 1a       	sub	r14, r24
     81c:	f9 0a       	sbc	r15, r25
     81e:	c7 01       	movw	r24, r14
     820:	90 93 61 00 	sts	0x0061, r25
     824:	80 93 60 00 	sts	0x0060, r24
				}
				
				#define upperLimit ((uint16_t)(0.20*cellOV*LT6802CountValue))
				#define lowerLimit ((uint16_t)(0.05*cellOV*LT6802CountValue))
				if(minDelta > upperLimit)
     828:	80 91 60 00 	lds	r24, 0x0060
     82c:	90 91 61 00 	lds	r25, 0x0061
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	21 f0       	breq	.+8      	; 0x83c <calibrateBalance+0x15a>
				{
					onTime = 30;
     834:	8e e1       	ldi	r24, 0x1E	; 30
     836:	80 93 62 00 	sts	0x0062, r24
     83a:	03 c0       	rjmp	.+6      	; 0x842 <calibrateBalance+0x160>
				} else if (minDelta < lowerLimit)
				{
					onTime = 10;
				} else {
					onTime = 20;
     83c:	84 e1       	ldi	r24, 0x14	; 20
     83e:	80 93 62 00 	sts	0x0062, r24
				//	//we want a linear scaling so that at upper limit, time=30 sec
				//	//and at lower limit, time = 10 sec
				//	onTime = ((30-10)*(minDelta - lowerLimit))/(upperLimit - lowerLimit)+10;
				}
				
				average *= 100;	//increase average by 100 so resolution is not lost during divide
     842:	29 81       	ldd	r18, Y+1	; 0x01
     844:	3a 81       	ldd	r19, Y+2	; 0x02
     846:	4b 81       	ldd	r20, Y+3	; 0x03
     848:	5c 81       	ldd	r21, Y+4	; 0x04
     84a:	84 e6       	ldi	r24, 0x64	; 100
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	dc 01       	movw	r26, r24
     850:	0e 94 38 28 	call	0x5070	; 0x5070 <__muluhisi3>
     854:	dc 01       	movw	r26, r24
     856:	cb 01       	movw	r24, r22
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	9a 83       	std	Y+2, r25	; 0x02
     85c:	ab 83       	std	Y+3, r26	; 0x03
     85e:	bc 83       	std	Y+4, r27	; 0x04
				average /= NumberOfCells;
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	ab 81       	ldd	r26, Y+3	; 0x03
     866:	bc 81       	ldd	r27, Y+4	; 0x04
     868:	2c e0       	ldi	r18, 0x0C	; 12
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	bc 01       	movw	r22, r24
     872:	cd 01       	movw	r24, r26
     874:	0e 94 04 28 	call	0x5008	; 0x5008 <__divmodsi4>
     878:	da 01       	movw	r26, r20
     87a:	c9 01       	movw	r24, r18
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	9a 83       	std	Y+2, r25	; 0x02
     880:	ab 83       	std	Y+3, r26	; 0x03
     882:	bc 83       	std	Y+4, r27	; 0x04
				
				DischargerStatus = 0x0000;
     884:	10 92 fe 01 	sts	0x01FE, r1
     888:	10 92 fd 01 	sts	0x01FD, r1

				if(minCellV <= voltageFromSOC(FullCharge/4))
     88c:	8f e3       	ldi	r24, 0x3F	; 63
     88e:	0e 94 31 21 	call	0x4262	; 0x4262 <voltageFromSOC>
     892:	9c 01       	movw	r18, r24
     894:	8d 81       	ldd	r24, Y+5	; 0x05
     896:	9e 81       	ldd	r25, Y+6	; 0x06
     898:	28 17       	cp	r18, r24
     89a:	39 07       	cpc	r19, r25
     89c:	14 f0       	brlt	.+4      	; 0x8a2 <__stack+0x43>
				//(int16_t)(cellUV/LT6802CountValue))
				{
					
					return needToCharge;
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	29 c1       	rjmp	.+594    	; 0xaf4 <__stack+0x295>
				}
				
				//printf_P(PSTR("**%"PRIx32"**\n"), average);
				for (uint8_t i = 1; i <= NumberOfCells; i++)
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	8b 87       	std	Y+11, r24	; 0x0b
     8a6:	59 c0       	rjmp	.+178    	; 0x95a <__stack+0xfb>
				{
					if(i != minCell)
     8a8:	9b 85       	ldd	r25, Y+11	; 0x0b
     8aa:	89 85       	ldd	r24, Y+9	; 0x09
     8ac:	98 17       	cp	r25, r24
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <__stack+0x53>
     8b0:	51 c0       	rjmp	.+162    	; 0x954 <__stack+0xf5>
					{
						cellV = voltageFromCVReg(var->state->voltagePacket->reg.payload[0].bytes, i);
     8b2:	8f 85       	ldd	r24, Y+15	; 0x0f
     8b4:	98 89       	ldd	r25, Y+16	; 0x10
     8b6:	fc 01       	movw	r30, r24
     8b8:	82 81       	ldd	r24, Z+2	; 0x02
     8ba:	93 81       	ldd	r25, Z+3	; 0x03
     8bc:	fc 01       	movw	r30, r24
     8be:	82 81       	ldd	r24, Z+2	; 0x02
     8c0:	93 81       	ldd	r25, Z+3	; 0x03
     8c2:	02 96       	adiw	r24, 0x02	; 2
     8c4:	6b 85       	ldd	r22, Y+11	; 0x0b
     8c6:	0e 94 51 14 	call	0x28a2	; 0x28a2 <voltageFromCVReg>
     8ca:	9e 87       	std	Y+14, r25	; 0x0e
     8cc:	8d 87       	std	Y+13, r24	; 0x0d
						if ( ((cellV*100) > average) && 
     8ce:	2d 85       	ldd	r18, Y+13	; 0x0d
     8d0:	3e 85       	ldd	r19, Y+14	; 0x0e
     8d2:	44 e6       	ldi	r20, 0x64	; 100
     8d4:	42 9f       	mul	r20, r18
     8d6:	c0 01       	movw	r24, r0
     8d8:	43 9f       	mul	r20, r19
     8da:	90 0d       	add	r25, r0
     8dc:	11 24       	eor	r1, r1
     8de:	9c 01       	movw	r18, r24
     8e0:	44 27       	eor	r20, r20
     8e2:	37 fd       	sbrc	r19, 7
     8e4:	40 95       	com	r20
     8e6:	54 2f       	mov	r21, r20
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	9a 81       	ldd	r25, Y+2	; 0x02
     8ec:	ab 81       	ldd	r26, Y+3	; 0x03
     8ee:	bc 81       	ldd	r27, Y+4	; 0x04
     8f0:	82 17       	cp	r24, r18
     8f2:	93 07       	cpc	r25, r19
     8f4:	a4 07       	cpc	r26, r20
     8f6:	b5 07       	cpc	r27, r21
     8f8:	6c f5       	brge	.+90     	; 0x954 <__stack+0xf5>
						     ((cellV - minCellV) > tolerance) && 
     8fa:	2d 85       	ldd	r18, Y+13	; 0x0d
     8fc:	3e 85       	ldd	r19, Y+14	; 0x0e
     8fe:	8d 81       	ldd	r24, Y+5	; 0x05
     900:	9e 81       	ldd	r25, Y+6	; 0x06
     902:	28 1b       	sub	r18, r24
     904:	39 0b       	sbc	r19, r25
     906:	8a 89       	ldd	r24, Y+18	; 0x12
     908:	88 2f       	mov	r24, r24
     90a:	90 e0       	ldi	r25, 0x00	; 0
				for (uint8_t i = 1; i <= NumberOfCells; i++)
				{
					if(i != minCell)
					{
						cellV = voltageFromCVReg(var->state->voltagePacket->reg.payload[0].bytes, i);
						if ( ((cellV*100) > average) && 
     90c:	82 17       	cp	r24, r18
     90e:	93 07       	cpc	r25, r19
     910:	0c f5       	brge	.+66     	; 0x954 <__stack+0xf5>
						     ((cellV - minCellV) > tolerance) && 
							 (cellV > voltageFromSOC(FullCharge/4)) )
     912:	8f e3       	ldi	r24, 0x3F	; 63
     914:	0e 94 31 21 	call	0x4262	; 0x4262 <voltageFromSOC>
     918:	9c 01       	movw	r18, r24
				{
					if(i != minCell)
					{
						cellV = voltageFromCVReg(var->state->voltagePacket->reg.payload[0].bytes, i);
						if ( ((cellV*100) > average) && 
						     ((cellV - minCellV) > tolerance) && 
     91a:	8d 85       	ldd	r24, Y+13	; 0x0d
     91c:	9e 85       	ldd	r25, Y+14	; 0x0e
     91e:	28 17       	cp	r18, r24
     920:	39 07       	cpc	r19, r25
     922:	c4 f4       	brge	.+48     	; 0x954 <__stack+0xf5>
							 (cellV > voltageFromSOC(FullCharge/4)) )
							 //(cellV > (int16_t)(1.1*cellUV/LT6802CountValue)) )
						{
								DischargerStatus |= (uint16_t)(1 << (i - 1));
     924:	8b 85       	ldd	r24, Y+11	; 0x0b
     926:	88 2f       	mov	r24, r24
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	9c 01       	movw	r18, r24
     92c:	21 50       	subi	r18, 0x01	; 1
     92e:	31 09       	sbc	r19, r1
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	02 c0       	rjmp	.+4      	; 0x93a <__stack+0xdb>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	2a 95       	dec	r18
     93c:	e2 f7       	brpl	.-8      	; 0x936 <__stack+0xd7>
     93e:	9c 01       	movw	r18, r24
     940:	80 91 fd 01 	lds	r24, 0x01FD
     944:	90 91 fe 01 	lds	r25, 0x01FE
     948:	82 2b       	or	r24, r18
     94a:	93 2b       	or	r25, r19
     94c:	90 93 fe 01 	sts	0x01FE, r25
     950:	80 93 fd 01 	sts	0x01FD, r24
					
					return needToCharge;
				}
				
				//printf_P(PSTR("**%"PRIx32"**\n"), average);
				for (uint8_t i = 1; i <= NumberOfCells; i++)
     954:	8b 85       	ldd	r24, Y+11	; 0x0b
     956:	8f 5f       	subi	r24, 0xFF	; 255
     958:	8b 87       	std	Y+11, r24	; 0x0b
     95a:	8b 85       	ldd	r24, Y+11	; 0x0b
     95c:	8d 30       	cpi	r24, 0x0D	; 13
     95e:	08 f4       	brcc	.+2      	; 0x962 <__stack+0x103>
     960:	a3 cf       	rjmp	.-186    	; 0x8a8 <__stack+0x49>
						}
					}
				}
				
				
				if(DischargerStatus == 0x00)
     962:	80 91 fd 01 	lds	r24, 0x01FD
     966:	90 91 fe 01 	lds	r25, 0x01FE
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	09 f0       	breq	.+2      	; 0x970 <__stack+0x111>
     96e:	49 c0       	rjmp	.+146    	; 0xa02 <__stack+0x1a3>
				{
					//now make sure every cell is in tolerance
					for (uint8_t i = 1; i <= NumberOfCells; i++)
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	8c 87       	std	Y+12, r24	; 0x0c
     974:	42 c0       	rjmp	.+132    	; 0x9fa <__stack+0x19b>
					{
						if(i != minCell)
     976:	9c 85       	ldd	r25, Y+12	; 0x0c
     978:	89 85       	ldd	r24, Y+9	; 0x09
     97a:	98 17       	cp	r25, r24
     97c:	d9 f1       	breq	.+118    	; 0x9f4 <__stack+0x195>
						{
							cellV = voltageFromCVReg(var->state->voltagePacket->reg.payload[0].bytes, i);
     97e:	8f 85       	ldd	r24, Y+15	; 0x0f
     980:	98 89       	ldd	r25, Y+16	; 0x10
     982:	fc 01       	movw	r30, r24
     984:	82 81       	ldd	r24, Z+2	; 0x02
     986:	93 81       	ldd	r25, Z+3	; 0x03
     988:	fc 01       	movw	r30, r24
     98a:	82 81       	ldd	r24, Z+2	; 0x02
     98c:	93 81       	ldd	r25, Z+3	; 0x03
     98e:	02 96       	adiw	r24, 0x02	; 2
     990:	6c 85       	ldd	r22, Y+12	; 0x0c
     992:	0e 94 51 14 	call	0x28a2	; 0x28a2 <voltageFromCVReg>
     996:	9e 87       	std	Y+14, r25	; 0x0e
     998:	8d 87       	std	Y+13, r24	; 0x0d
							if ( ((cellV - minCellV) > tolerance) && 
     99a:	2d 85       	ldd	r18, Y+13	; 0x0d
     99c:	3e 85       	ldd	r19, Y+14	; 0x0e
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	9e 81       	ldd	r25, Y+6	; 0x06
     9a2:	28 1b       	sub	r18, r24
     9a4:	39 0b       	sbc	r19, r25
     9a6:	8a 89       	ldd	r24, Y+18	; 0x12
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	82 17       	cp	r24, r18
     9ae:	93 07       	cpc	r25, r19
     9b0:	0c f5       	brge	.+66     	; 0x9f4 <__stack+0x195>
								//(cellV > (int16_t)(1.1*cellUV/LT6802CountValue)) 
								  (cellV > voltageFromSOC(FullCharge/4)) )
     9b2:	8f e3       	ldi	r24, 0x3F	; 63
     9b4:	0e 94 31 21 	call	0x4262	; 0x4262 <voltageFromSOC>
     9b8:	9c 01       	movw	r18, r24
					for (uint8_t i = 1; i <= NumberOfCells; i++)
					{
						if(i != minCell)
						{
							cellV = voltageFromCVReg(var->state->voltagePacket->reg.payload[0].bytes, i);
							if ( ((cellV - minCellV) > tolerance) && 
     9ba:	8d 85       	ldd	r24, Y+13	; 0x0d
     9bc:	9e 85       	ldd	r25, Y+14	; 0x0e
     9be:	28 17       	cp	r18, r24
     9c0:	39 07       	cpc	r19, r25
     9c2:	c4 f4       	brge	.+48     	; 0x9f4 <__stack+0x195>
								//(cellV > (int16_t)(1.1*cellUV/LT6802CountValue)) 
								  (cellV > voltageFromSOC(FullCharge/4)) )
							{
								DischargerStatus |= (uint16_t)(1 << (i - 1));
     9c4:	8c 85       	ldd	r24, Y+12	; 0x0c
     9c6:	88 2f       	mov	r24, r24
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	9c 01       	movw	r18, r24
     9cc:	21 50       	subi	r18, 0x01	; 1
     9ce:	31 09       	sbc	r19, r1
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <__stack+0x17b>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	2a 95       	dec	r18
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <__stack+0x177>
     9de:	9c 01       	movw	r18, r24
     9e0:	80 91 fd 01 	lds	r24, 0x01FD
     9e4:	90 91 fe 01 	lds	r25, 0x01FE
     9e8:	82 2b       	or	r24, r18
     9ea:	93 2b       	or	r25, r19
     9ec:	90 93 fe 01 	sts	0x01FE, r25
     9f0:	80 93 fd 01 	sts	0x01FD, r24
				
				
				if(DischargerStatus == 0x00)
				{
					//now make sure every cell is in tolerance
					for (uint8_t i = 1; i <= NumberOfCells; i++)
     9f4:	8c 85       	ldd	r24, Y+12	; 0x0c
     9f6:	8f 5f       	subi	r24, 0xFF	; 255
     9f8:	8c 87       	std	Y+12, r24	; 0x0c
     9fa:	8c 85       	ldd	r24, Y+12	; 0x0c
     9fc:	8d 30       	cpi	r24, 0x0D	; 13
     9fe:	08 f4       	brcc	.+2      	; 0xa02 <__stack+0x1a3>
     a00:	ba cf       	rjmp	.-140    	; 0x976 <__stack+0x117>
						}
					}
				}
				
				
				updateCFGReg = true;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	80 93 5e 01 	sts	0x015E, r24
				
				if(DischargerStatus == 0x00)
     a08:	80 91 fd 01 	lds	r24, 0x01FD
     a0c:	90 91 fe 01 	lds	r25, 0x01FE
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	11 f4       	brne	.+4      	; 0xa18 <__stack+0x1b9>
				{
					//yay, done!			
					return allDone;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	6e c0       	rjmp	.+220    	; 0xaf4 <__stack+0x295>
				} else {
					timeRec = time;
     a18:	80 91 1d 01 	lds	r24, 0x011D
     a1c:	90 91 1e 01 	lds	r25, 0x011E
     a20:	a0 91 1f 01 	lds	r26, 0x011F
     a24:	b0 91 20 01 	lds	r27, 0x0120
     a28:	80 93 bc 00 	sts	0x00BC, r24
     a2c:	90 93 bd 00 	sts	0x00BD, r25
     a30:	a0 93 be 00 	sts	0x00BE, r26
     a34:	b0 93 bf 00 	sts	0x00BF, r27
					state = BalancerWait;
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 93 bb 00 	sts	0x00BB, r24
				}	
				
				break;
     a3e:	59 c0       	rjmp	.+178    	; 0xaf2 <__stack+0x293>
			case BalancerWait:
				if((time - timeRec) > onTime)
     a40:	20 91 1d 01 	lds	r18, 0x011D
     a44:	30 91 1e 01 	lds	r19, 0x011E
     a48:	40 91 1f 01 	lds	r20, 0x011F
     a4c:	50 91 20 01 	lds	r21, 0x0120
     a50:	80 91 bc 00 	lds	r24, 0x00BC
     a54:	90 91 bd 00 	lds	r25, 0x00BD
     a58:	a0 91 be 00 	lds	r26, 0x00BE
     a5c:	b0 91 bf 00 	lds	r27, 0x00BF
     a60:	28 1b       	sub	r18, r24
     a62:	39 0b       	sbc	r19, r25
     a64:	4a 0b       	sbc	r20, r26
     a66:	5b 0b       	sbc	r21, r27
     a68:	80 91 62 00 	lds	r24, 0x0062
     a6c:	88 2f       	mov	r24, r24
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	82 17       	cp	r24, r18
     a76:	93 07       	cpc	r25, r19
     a78:	a4 07       	cpc	r26, r20
     a7a:	b5 07       	cpc	r27, r21
     a7c:	c0 f4       	brcc	.+48     	; 0xaae <__stack+0x24f>
				{
					timeRec = time;
     a7e:	80 91 1d 01 	lds	r24, 0x011D
     a82:	90 91 1e 01 	lds	r25, 0x011E
     a86:	a0 91 1f 01 	lds	r26, 0x011F
     a8a:	b0 91 20 01 	lds	r27, 0x0120
     a8e:	80 93 bc 00 	sts	0x00BC, r24
     a92:	90 93 bd 00 	sts	0x00BD, r25
     a96:	a0 93 be 00 	sts	0x00BE, r26
     a9a:	b0 93 bf 00 	sts	0x00BF, r27
					DischargerStatus = 0x0000;
     a9e:	10 92 fe 01 	sts	0x01FE, r1
     aa2:	10 92 fd 01 	sts	0x01FD, r1
					state = SettleWait;
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	80 93 bb 00 	sts	0x00BB, r24
				}
				break;
     aac:	22 c0       	rjmp	.+68     	; 0xaf2 <__stack+0x293>
     aae:	21 c0       	rjmp	.+66     	; 0xaf2 <__stack+0x293>
			case SettleWait:
				if((time - timeRec) > 30)
     ab0:	20 91 1d 01 	lds	r18, 0x011D
     ab4:	30 91 1e 01 	lds	r19, 0x011E
     ab8:	40 91 1f 01 	lds	r20, 0x011F
     abc:	50 91 20 01 	lds	r21, 0x0120
     ac0:	80 91 bc 00 	lds	r24, 0x00BC
     ac4:	90 91 bd 00 	lds	r25, 0x00BD
     ac8:	a0 91 be 00 	lds	r26, 0x00BE
     acc:	b0 91 bf 00 	lds	r27, 0x00BF
     ad0:	79 01       	movw	r14, r18
     ad2:	8a 01       	movw	r16, r20
     ad4:	e8 1a       	sub	r14, r24
     ad6:	f9 0a       	sbc	r15, r25
     ad8:	0a 0b       	sbc	r16, r26
     ada:	1b 0b       	sbc	r17, r27
     adc:	d8 01       	movw	r26, r16
     ade:	c7 01       	movw	r24, r14
     ae0:	8f 31       	cpi	r24, 0x1F	; 31
     ae2:	91 05       	cpc	r25, r1
     ae4:	a1 05       	cpc	r26, r1
     ae6:	b1 05       	cpc	r27, r1
     ae8:	18 f0       	brcs	.+6      	; 0xaf0 <__stack+0x291>
				{
					state = PickCells;
     aea:	10 92 bb 00 	sts	0x00BB, r1
				}
				break;
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <__stack+0x291>
     af0:	00 00       	nop
		}

	}
	
	return stillWorking;
     af2:	80 e0       	ldi	r24, 0x00	; 0
}
     af4:	66 96       	adiw	r28, 0x16	; 22
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	08 95       	ret

00000b0e <calibrateTopBalance>:


PT_THREAD(calibrateTopBalance(threadVar* var, uint8_t SOC))
{
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	00 d0       	rcall	.+0      	; 0xb14 <calibrateTopBalance+0x6>
     b14:	00 d0       	rcall	.+0      	; 0xb16 <calibrateTopBalance+0x8>
     b16:	1f 92       	push	r1
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
     b1c:	9c 83       	std	Y+4, r25	; 0x04
     b1e:	8b 83       	std	Y+3, r24	; 0x03
     b20:	6d 83       	std	Y+5, r22	; 0x05
	PT_BEGIN(&var->ptVar);
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	fc 01       	movw	r30, r24
     b2c:	80 81       	ld	r24, Z
     b2e:	91 81       	ldd	r25, Z+1	; 0x01
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	49 f0       	breq	.+18     	; 0xb46 <calibrateTopBalance+0x38>
     b34:	8b 81       	ldd	r24, Y+3	; 0x03
     b36:	9c 81       	ldd	r25, Y+4	; 0x04
     b38:	fc 01       	movw	r30, r24
     b3a:	80 81       	ld	r24, Z
     b3c:	91 81       	ldd	r25, Z+1	; 0x01
     b3e:	00 00       	nop
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	08 95       	ret
	static threadVar subThread;
	
	
	subThread.state=var->state;
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	fc 01       	movw	r30, r24
     b4c:	82 81       	ldd	r24, Z+2	; 0x02
     b4e:	93 81       	ldd	r25, Z+3	; 0x03
     b50:	90 93 c3 00 	sts	0x00C3, r25
     b54:	80 93 c2 00 	sts	0x00C2, r24
	
	balanceMode = normalDisch;
     b58:	10 92 23 01 	sts	0x0123, r1
	BalanceLEDPort &= ~(1 << BalanceLED);
     b5c:	82 e3       	ldi	r24, 0x32	; 50
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	22 e3       	ldi	r18, 0x32	; 50
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	f9 01       	movw	r30, r18
     b66:	20 81       	ld	r18, Z
     b68:	27 7f       	andi	r18, 0xF7	; 247
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
	{
		//the logic works like this
		//if we are done balancing and done charging, we are done
		//if we are done balancing, but not charging, we need to charge
		//if we are not done balancing, we need to repeat until we are
		returnCode = calibrateBalance(var, CalibrateTopBalance, (uint8_t)((cellOV/LT6802CountValue/InitBalanceTolerance)));
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	45 e0       	ldi	r20, 0x05	; 5
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <calibrateBalance>
     b7a:	8a 83       	std	Y+2, r24	; 0x02
		if(returnCode == allDone)
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	09 f0       	breq	.+2      	; 0xb84 <calibrateTopBalance+0x76>
     b82:	62 c0       	rjmp	.+196    	; 0xc48 <calibrateTopBalance+0x13a>
		{
			puts_P(PSTR("**Possible balance**\n"));
     b84:	84 e2       	ldi	r24, 0x24	; 36
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
			PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 10));
     b8c:	10 92 c1 00 	sts	0x00C1, r1
     b90:	10 92 c0 00 	sts	0x00C0, r1
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9c 81       	ldd	r25, Y+4	; 0x04
     b98:	2a ec       	ldi	r18, 0xCA	; 202
     b9a:	35 e0       	ldi	r19, 0x05	; 5
     b9c:	fc 01       	movw	r30, r24
     b9e:	31 83       	std	Z+1, r19	; 0x01
     ba0:	20 83       	st	Z, r18
     ba2:	6a e0       	ldi	r22, 0x0A	; 10
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 ec       	ldi	r24, 0xC0	; 192
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 ab 08 	call	0x1156	; 0x1156 <delay>
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	10 f4       	brcc	.+4      	; 0xbb6 <calibrateTopBalance+0xa8>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	71 c0       	rjmp	.+226    	; 0xc98 <calibrateTopBalance+0x18a>
			if(cellsBalanced(var->state->voltagePacket, (uint8_t)((cellOV/LT6802CountValue/InitBalanceTolerance)*1.3)))
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	fc 01       	movw	r30, r24
     bbc:	82 81       	ldd	r24, Z+2	; 0x02
     bbe:	93 81       	ldd	r25, Z+3	; 0x03
     bc0:	fc 01       	movw	r30, r24
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	93 81       	ldd	r25, Z+3	; 0x03
     bc6:	67 e0       	ldi	r22, 0x07	; 7
     bc8:	0e 94 32 12 	call	0x2464	; 0x2464 <cellsBalanced>
     bcc:	88 23       	and	r24, r24
     bce:	09 f4       	brne	.+2      	; 0xbd2 <calibrateTopBalance+0xc4>
     bd0:	55 c0       	rjmp	.+170    	; 0xc7c <calibrateTopBalance+0x16e>
			{
				if(!doneCharging(var->state->voltagePacket, SOC))
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	fc 01       	movw	r30, r24
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	fc 01       	movw	r30, r24
     bde:	82 81       	ldd	r24, Z+2	; 0x02
     be0:	93 81       	ldd	r25, Z+3	; 0x03
     be2:	6d 81       	ldd	r22, Y+5	; 0x05
     be4:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <doneCharging>
     be8:	98 2f       	mov	r25, r24
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	89 27       	eor	r24, r25
     bee:	88 23       	and	r24, r24
     bf0:	b9 f0       	breq	.+46     	; 0xc20 <calibrateTopBalance+0x112>
				{
					PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.1"), SOC));
     bf2:	10 92 c1 00 	sts	0x00C1, r1
     bf6:	10 92 c0 00 	sts	0x00C0, r1
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	2d ef       	ldi	r18, 0xFD	; 253
     c00:	35 e0       	ldi	r19, 0x05	; 5
     c02:	fc 01       	movw	r30, r24
     c04:	31 83       	std	Z+1, r19	; 0x01
     c06:	20 83       	st	Z, r18
     c08:	8a e3       	ldi	r24, 0x3A	; 58
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	4d 81       	ldd	r20, Y+5	; 0x05
     c0e:	bc 01       	movw	r22, r24
     c10:	80 ec       	ldi	r24, 0xC0	; 192
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 36 07 	call	0xe6c	; 0xe6c <charge>
     c18:	82 30       	cpi	r24, 0x02	; 2
     c1a:	10 f4       	brcc	.+4      	; 0xc20 <calibrateTopBalance+0x112>
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	3c c0       	rjmp	.+120    	; 0xc98 <calibrateTopBalance+0x18a>
				}
			
				BalanceLEDPort |= (1 << BalanceLED);
     c20:	82 e3       	ldi	r24, 0x32	; 50
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	22 e3       	ldi	r18, 0x32	; 50
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	f9 01       	movw	r30, r18
     c2a:	20 81       	ld	r18, Z
     c2c:	28 60       	ori	r18, 0x08	; 8
     c2e:	fc 01       	movw	r30, r24
     c30:	20 83       	st	Z, r18
				puts_P(PSTR("**Calibrate Balance Done**\n"));
     c32:	8e e3       	ldi	r24, 0x3E	; 62
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				//toleranceMult = 8;
				PT_EXIT(&var->ptVar);
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	fc 01       	movw	r30, r24
     c40:	11 82       	std	Z+1, r1	; 0x01
     c42:	10 82       	st	Z, r1
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	28 c0       	rjmp	.+80     	; 0xc98 <calibrateTopBalance+0x18a>
			} else {
				//toleranceMult--;
			}
		} else if(returnCode == needToCharge)
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f4       	brne	.+46     	; 0xc7c <calibrateTopBalance+0x16e>
		{
			PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.1"), SOC));
     c4e:	10 92 c1 00 	sts	0x00C1, r1
     c52:	10 92 c0 00 	sts	0x00C0, r1
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	9c 81       	ldd	r25, Y+4	; 0x04
     c5a:	2b e2       	ldi	r18, 0x2B	; 43
     c5c:	36 e0       	ldi	r19, 0x06	; 6
     c5e:	fc 01       	movw	r30, r24
     c60:	31 83       	std	Z+1, r19	; 0x01
     c62:	20 83       	st	Z, r18
     c64:	8a e5       	ldi	r24, 0x5A	; 90
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	4d 81       	ldd	r20, Y+5	; 0x05
     c6a:	bc 01       	movw	r22, r24
     c6c:	80 ec       	ldi	r24, 0xC0	; 192
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 36 07 	call	0xe6c	; 0xe6c <charge>
     c74:	82 30       	cpi	r24, 0x02	; 2
     c76:	10 f4       	brcc	.+4      	; 0xc7c <calibrateTopBalance+0x16e>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e c0       	rjmp	.+28     	; 0xc98 <calibrateTopBalance+0x18a>
		}
		//PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 1));
		
		PT_YIELD(&var->ptVar);
     c7c:	19 82       	std	Y+1, r1	; 0x01
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	9c 81       	ldd	r25, Y+4	; 0x04
     c82:	2f e3       	ldi	r18, 0x3F	; 63
     c84:	36 e0       	ldi	r19, 0x06	; 6
     c86:	fc 01       	movw	r30, r24
     c88:	31 83       	std	Z+1, r19	; 0x01
     c8a:	20 83       	st	Z, r18
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	88 23       	and	r24, r24
     c90:	11 f4       	brne	.+4      	; 0xc96 <calibrateTopBalance+0x188>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <calibrateTopBalance+0x18a>
	}
     c96:	6b cf       	rjmp	.-298    	; 0xb6e <calibrateTopBalance+0x60>
	//DischargerStatus = 0x0000;
	PT_END(&var->ptVar);
}
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <pulseTest>:
#else
#define OnTimePerCell 5
#define TimeBetweenCells 30
#define repetitions 5
PT_THREAD(pulseTest(threadVar* var))
{
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	00 d0       	rcall	.+0      	; 0xcae <pulseTest+0x6>
     cae:	1f 92       	push	r1
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	9b 83       	std	Y+3, r25	; 0x03
     cb6:	8a 83       	std	Y+2, r24	; 0x02
	static uint32_t tBegin;
	static uint8_t repetitionCount=0;
	static uint8_t currentCell=0;
	PT_BEGIN(&var->ptVar);
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	9b 81       	ldd	r25, Y+3	; 0x03
     cc0:	fc 01       	movw	r30, r24
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	49 f0       	breq	.+18     	; 0xcdc <pulseTest+0x34>
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	9b 81       	ldd	r25, Y+3	; 0x03
     cce:	fc 01       	movw	r30, r24
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	00 00       	nop
     cd6:	8f 93       	push	r24
     cd8:	9f 93       	push	r25
     cda:	08 95       	ret
	tBegin = time;
     cdc:	80 91 1d 01 	lds	r24, 0x011D
     ce0:	90 91 1e 01 	lds	r25, 0x011E
     ce4:	a0 91 1f 01 	lds	r26, 0x011F
     ce8:	b0 91 20 01 	lds	r27, 0x0120
     cec:	80 93 c4 00 	sts	0x00C4, r24
     cf0:	90 93 c5 00 	sts	0x00C5, r25
     cf4:	a0 93 c6 00 	sts	0x00C6, r26
     cf8:	b0 93 c7 00 	sts	0x00C7, r27
	
	while(repetitionCount < repetitions)
     cfc:	a5 c0       	rjmp	.+330    	; 0xe48 <pulseTest+0x1a0>
	{
		currentCell = 0;
     cfe:	10 92 c8 00 	sts	0x00C8, r1
		
		while(currentCell < NumberOfCells)
     d02:	98 c0       	rjmp	.+304    	; 0xe34 <pulseTest+0x18c>
		{
			tBegin = time;
     d04:	80 91 1d 01 	lds	r24, 0x011D
     d08:	90 91 1e 01 	lds	r25, 0x011E
     d0c:	a0 91 1f 01 	lds	r26, 0x011F
     d10:	b0 91 20 01 	lds	r27, 0x0120
     d14:	80 93 c4 00 	sts	0x00C4, r24
     d18:	90 93 c5 00 	sts	0x00C5, r25
     d1c:	a0 93 c6 00 	sts	0x00C6, r26
     d20:	b0 93 c7 00 	sts	0x00C7, r27
			DischargerStatus = (1 << currentCell);
     d24:	80 91 c8 00 	lds	r24, 0x00C8
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <pulseTest+0x8e>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	2a 95       	dec	r18
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <pulseTest+0x8a>
     d3a:	90 93 fe 01 	sts	0x01FE, r25
     d3e:	80 93 fd 01 	sts	0x01FD, r24
			updateCFGReg = true;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 93 5e 01 	sts	0x015E, r24
			printf_P(PSTR("**Cell %i**\n"), currentCell);
     d48:	80 91 c8 00 	lds	r24, 0x00C8
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	8e e5       	ldi	r24, 0x5E	; 94
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	43 2f       	mov	r20, r19
     d56:	4f 93       	push	r20
     d58:	2f 93       	push	r18
     d5a:	29 2f       	mov	r18, r25
     d5c:	2f 93       	push	r18
     d5e:	8f 93       	push	r24
     d60:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
			PT_WAIT_UNTIL(&var->ptVar, time >= tBegin + OnTimePerCell);
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	9b 81       	ldd	r25, Y+3	; 0x03
     d70:	26 eb       	ldi	r18, 0xB6	; 182
     d72:	36 e0       	ldi	r19, 0x06	; 6
     d74:	fc 01       	movw	r30, r24
     d76:	31 83       	std	Z+1, r19	; 0x01
     d78:	20 83       	st	Z, r18
     d7a:	80 91 c4 00 	lds	r24, 0x00C4
     d7e:	90 91 c5 00 	lds	r25, 0x00C5
     d82:	a0 91 c6 00 	lds	r26, 0x00C6
     d86:	b0 91 c7 00 	lds	r27, 0x00C7
     d8a:	9c 01       	movw	r18, r24
     d8c:	ad 01       	movw	r20, r26
     d8e:	2b 5f       	subi	r18, 0xFB	; 251
     d90:	3f 4f       	sbci	r19, 0xFF	; 255
     d92:	4f 4f       	sbci	r20, 0xFF	; 255
     d94:	5f 4f       	sbci	r21, 0xFF	; 255
     d96:	80 91 1d 01 	lds	r24, 0x011D
     d9a:	90 91 1e 01 	lds	r25, 0x011E
     d9e:	a0 91 1f 01 	lds	r26, 0x011F
     da2:	b0 91 20 01 	lds	r27, 0x0120
     da6:	82 17       	cp	r24, r18
     da8:	93 07       	cpc	r25, r19
     daa:	a4 07       	cpc	r26, r20
     dac:	b5 07       	cpc	r27, r21
     dae:	10 f4       	brcc	.+4      	; 0xdb4 <pulseTest+0x10c>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	56 c0       	rjmp	.+172    	; 0xe60 <pulseTest+0x1b8>
			DischargerStatus = 0x00;
     db4:	10 92 fe 01 	sts	0x01FE, r1
     db8:	10 92 fd 01 	sts	0x01FD, r1
			updateCFGReg = true;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	80 93 5e 01 	sts	0x015E, r24
			tBegin = time;
     dc2:	80 91 1d 01 	lds	r24, 0x011D
     dc6:	90 91 1e 01 	lds	r25, 0x011E
     dca:	a0 91 1f 01 	lds	r26, 0x011F
     dce:	b0 91 20 01 	lds	r27, 0x0120
     dd2:	80 93 c4 00 	sts	0x00C4, r24
     dd6:	90 93 c5 00 	sts	0x00C5, r25
     dda:	a0 93 c6 00 	sts	0x00C6, r26
     dde:	b0 93 c7 00 	sts	0x00C7, r27
			PT_WAIT_UNTIL(&var->ptVar, time >= tBegin + TimeBetweenCells);
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
     de6:	21 ef       	ldi	r18, 0xF1	; 241
     de8:	36 e0       	ldi	r19, 0x06	; 6
     dea:	fc 01       	movw	r30, r24
     dec:	31 83       	std	Z+1, r19	; 0x01
     dee:	20 83       	st	Z, r18
     df0:	80 91 c4 00 	lds	r24, 0x00C4
     df4:	90 91 c5 00 	lds	r25, 0x00C5
     df8:	a0 91 c6 00 	lds	r26, 0x00C6
     dfc:	b0 91 c7 00 	lds	r27, 0x00C7
     e00:	9c 01       	movw	r18, r24
     e02:	ad 01       	movw	r20, r26
     e04:	22 5e       	subi	r18, 0xE2	; 226
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	4f 4f       	sbci	r20, 0xFF	; 255
     e0a:	5f 4f       	sbci	r21, 0xFF	; 255
     e0c:	80 91 1d 01 	lds	r24, 0x011D
     e10:	90 91 1e 01 	lds	r25, 0x011E
     e14:	a0 91 1f 01 	lds	r26, 0x011F
     e18:	b0 91 20 01 	lds	r27, 0x0120
     e1c:	82 17       	cp	r24, r18
     e1e:	93 07       	cpc	r25, r19
     e20:	a4 07       	cpc	r26, r20
     e22:	b5 07       	cpc	r27, r21
     e24:	10 f4       	brcc	.+4      	; 0xe2a <pulseTest+0x182>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	1b c0       	rjmp	.+54     	; 0xe60 <pulseTest+0x1b8>
			
			currentCell++;
     e2a:	80 91 c8 00 	lds	r24, 0x00C8
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	80 93 c8 00 	sts	0x00C8, r24
	
	while(repetitionCount < repetitions)
	{
		currentCell = 0;
		
		while(currentCell < NumberOfCells)
     e34:	80 91 c8 00 	lds	r24, 0x00C8
     e38:	8c 30       	cpi	r24, 0x0C	; 12
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <pulseTest+0x196>
     e3c:	63 cf       	rjmp	.-314    	; 0xd04 <pulseTest+0x5c>
			PT_WAIT_UNTIL(&var->ptVar, time >= tBegin + TimeBetweenCells);
			
			currentCell++;
		}
		
		repetitionCount++;
     e3e:	80 91 c9 00 	lds	r24, 0x00C9
     e42:	8f 5f       	subi	r24, 0xFF	; 255
     e44:	80 93 c9 00 	sts	0x00C9, r24
	static uint8_t repetitionCount=0;
	static uint8_t currentCell=0;
	PT_BEGIN(&var->ptVar);
	tBegin = time;
	
	while(repetitionCount < repetitions)
     e48:	80 91 c9 00 	lds	r24, 0x00C9
     e4c:	85 30       	cpi	r24, 0x05	; 5
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <pulseTest+0x1aa>
     e50:	56 cf       	rjmp	.-340    	; 0xcfe <pulseTest+0x56>
		}
		
		repetitionCount++;
	}
	
	PT_END(&var->ptVar);
     e52:	19 82       	std	Y+1, r1	; 0x01
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	9b 81       	ldd	r25, Y+3	; 0x03
     e58:	fc 01       	movw	r30, r24
     e5a:	11 82       	std	Z+1, r1	; 0x01
     e5c:	10 82       	st	Z, r1
     e5e:	83 e0       	ldi	r24, 0x03	; 3
}	
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <charge>:
	CCCharge,
	CVCharge	
};

PT_THREAD(charge(threadVar* var, const char* current, uint8_t SOC))
{
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	00 d0       	rcall	.+0      	; 0xe72 <charge+0x6>
     e72:	00 d0       	rcall	.+0      	; 0xe74 <charge+0x8>
     e74:	00 d0       	rcall	.+0      	; 0xe76 <charge+0xa>
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	9b 83       	std	Y+3, r25	; 0x03
     e7c:	8a 83       	std	Y+2, r24	; 0x02
     e7e:	7d 83       	std	Y+5, r23	; 0x05
     e80:	6c 83       	std	Y+4, r22	; 0x04
     e82:	4e 83       	std	Y+6, r20	; 0x06
	//static uint32_t timeBegin;
	PT_BEGIN(&var->ptVar);
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	9b 81       	ldd	r25, Y+3	; 0x03
     e8c:	fc 01       	movw	r30, r24
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	49 f0       	breq	.+18     	; 0xea8 <charge+0x3c>
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	9b 81       	ldd	r25, Y+3	; 0x03
     e9a:	fc 01       	movw	r30, r24
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	00 00       	nop
     ea2:	8f 93       	push	r24
     ea4:	9f 93       	push	r25
     ea6:	08 95       	ret

	static uint8_t state;
	state = Charge;
     ea8:	10 92 ca 00 	sts	0x00CA, r1
	//timeBegin = time;
	
	while(true)
	{
		switch(state)
     eac:	80 91 ca 00 	lds	r24, 0x00CA
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	91 05       	cpc	r25, r1
     eb8:	09 f4       	brne	.+2      	; 0xebc <charge+0x50>
     eba:	53 c0       	rjmp	.+166    	; 0xf62 <charge+0xf6>
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	91 05       	cpc	r25, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <charge+0x58>
     ec2:	7e c0       	rjmp	.+252    	; 0xfc0 <charge+0x154>
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	09 f0       	breq	.+2      	; 0xeca <charge+0x5e>
     ec8:	90 c0       	rjmp	.+288    	; 0xfea <charge+0x17e>
		{
			case Charge:
				DischargerStatus = 0x0000;
     eca:	10 92 fe 01 	sts	0x01FE, r1
     ece:	10 92 fd 01 	sts	0x01FD, r1
				updateCFGReg = true;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	80 93 5e 01 	sts	0x015E, r24
				
				//get a good ADC reading, then just exit if cells aren't charged
				NewADCReadings &= ~ADCAlgorithm;
     ed8:	80 91 21 01 	lds	r24, 0x0121
     edc:	8d 7f       	andi	r24, 0xFD	; 253
     ede:	80 93 21 01 	sts	0x0121, r24
				
				PT_WAIT_UNTIL(&var->ptVar, (NewADCReadings & ADCAlgorithm));
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	21 e7       	ldi	r18, 0x71	; 113
     ee8:	37 e0       	ldi	r19, 0x07	; 7
     eea:	fc 01       	movw	r30, r24
     eec:	31 83       	std	Z+1, r19	; 0x01
     eee:	20 83       	st	Z, r18
     ef0:	80 91 21 01 	lds	r24, 0x0121
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	82 70       	andi	r24, 0x02	; 2
     efa:	99 27       	eor	r25, r25
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	11 f4       	brne	.+4      	; 0xf04 <charge+0x98>
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	81 c0       	rjmp	.+258    	; 0x1006 <charge+0x19a>
				
				if(doneCharging(var->state->voltagePacket, SOC))
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	9b 81       	ldd	r25, Y+3	; 0x03
     f08:	fc 01       	movw	r30, r24
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	fc 01       	movw	r30, r24
     f10:	82 81       	ldd	r24, Z+2	; 0x02
     f12:	93 81       	ldd	r25, Z+3	; 0x03
     f14:	6e 81       	ldd	r22, Y+6	; 0x06
     f16:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <doneCharging>
     f1a:	88 23       	and	r24, r24
     f1c:	59 f0       	breq	.+22     	; 0xf34 <charge+0xc8>
				{
					puts_P(PSTR("**No charge necessary.**\n"));
     f1e:	8b e6       	ldi	r24, 0x6B	; 107
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
					PT_EXIT(&var->ptVar);
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	9b 81       	ldd	r25, Y+3	; 0x03
     f2a:	fc 01       	movw	r30, r24
     f2c:	11 82       	std	Z+1, r1	; 0x01
     f2e:	10 82       	st	Z, r1
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	69 c0       	rjmp	.+210    	; 0x1006 <charge+0x19a>
				}					
				
				printf_P(PSTR("<ps<P55VC%SARG>>\n"), current);	//set the power supply to the stack V and current
     f34:	85 e8       	ldi	r24, 0x85	; 133
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	2d 81       	ldd	r18, Y+5	; 0x05
     f3a:	2f 93       	push	r18
     f3c:	2c 81       	ldd	r18, Y+4	; 0x04
     f3e:	2f 93       	push	r18
     f40:	29 2f       	mov	r18, r25
     f42:	2f 93       	push	r18
     f44:	8f 93       	push	r24
     f46:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
														//to 0.5A
				
				puts_P(PSTR("**Begin CC Charge**\n"));
     f52:	87 e9       	ldi	r24, 0x97	; 151
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				state = CCCharge;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	80 93 ca 00 	sts	0x00CA, r24
				
				break;
     f60:	44 c0       	rjmp	.+136    	; 0xfea <charge+0x17e>
			case CCCharge:
				if(NewADCReadings & ADCAlgorithm)
     f62:	80 91 21 01 	lds	r24, 0x0121
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	82 70       	andi	r24, 0x02	; 2
     f6c:	99 27       	eor	r25, r25
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	31 f1       	breq	.+76     	; 0xfbe <charge+0x152>
				{
					NewADCReadings &= ~ADCAlgorithm;
     f72:	80 91 21 01 	lds	r24, 0x0121
     f76:	8d 7f       	andi	r24, 0xFD	; 253
     f78:	80 93 21 01 	sts	0x0121, r24
					
					//enforce a minimum time for cc charge
					if(doneCharging(var->state->voltagePacket, SOC))
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	9b 81       	ldd	r25, Y+3	; 0x03
     f80:	fc 01       	movw	r30, r24
     f82:	82 81       	ldd	r24, Z+2	; 0x02
     f84:	93 81       	ldd	r25, Z+3	; 0x03
     f86:	fc 01       	movw	r30, r24
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	6e 81       	ldd	r22, Y+6	; 0x06
     f8e:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <doneCharging>
     f92:	88 23       	and	r24, r24
     f94:	a1 f0       	breq	.+40     	; 0xfbe <charge+0x152>
					{
						printPowerSupplyStackVString(var->state->voltagePacket, NumberOfCells, "C0.5A");
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	9b 81       	ldd	r25, Y+3	; 0x03
     f9a:	fc 01       	movw	r30, r24
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	fc 01       	movw	r30, r24
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	44 e9       	ldi	r20, 0x94	; 148
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	6c e0       	ldi	r22, 0x0C	; 12
     fac:	0e 94 17 22 	call	0x442e	; 0x442e <printPowerSupplyStackVString>
						state = CVCharge;
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	80 93 ca 00 	sts	0x00CA, r24
						puts_P(PSTR("**Begin CV Charge**\n"));
     fb6:	8c ea       	ldi	r24, 0xAC	; 172
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
					} else {
						//just stay in this state - we're fine
					}
				}
				break;
     fbe:	15 c0       	rjmp	.+42     	; 0xfea <charge+0x17e>
			case CVCharge:
				//if(doneCharging(var->state->voltagePacket))
				//{
					//the last part of the if statement prevents the CV from exiting too soon if we are close
					//to CV already
					if(stackCurrent < minChargeI)
     fc0:	80 91 1b 01 	lds	r24, 0x011B
     fc4:	90 91 1c 01 	lds	r25, 0x011C
     fc8:	8d 30       	cpi	r24, 0x0D	; 13
     fca:	91 05       	cpc	r25, r1
     fcc:	6c f4       	brge	.+26     	; 0xfe8 <charge+0x17c>
					{
						puts_P(PSTR("<ps<S>>\n"));
     fce:	81 ec       	ldi	r24, 0xC1	; 193
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
						state = Charge;
     fd6:	10 92 ca 00 	sts	0x00CA, r1
						PT_EXIT(&var->ptVar);
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	9b 81       	ldd	r25, Y+3	; 0x03
     fde:	fc 01       	movw	r30, r24
     fe0:	11 82       	std	Z+1, r1	; 0x01
     fe2:	10 82       	st	Z, r1
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <charge+0x19a>
				//else
				//{
					//globalError = AlgorithmErrorCVCharge;
					//PT_EXIT(&var->ptVar);
				//}
				break;
     fe8:	00 00       	nop
			}
			PT_YIELD(&var->ptVar);
     fea:	19 82       	std	Y+1, r1	; 0x01
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	26 ef       	ldi	r18, 0xF6	; 246
     ff2:	37 e0       	ldi	r19, 0x07	; 7
     ff4:	fc 01       	movw	r30, r24
     ff6:	31 83       	std	Z+1, r19	; 0x01
     ff8:	20 83       	st	Z, r18
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	88 23       	and	r24, r24
     ffe:	11 f4       	brne	.+4      	; 0x1004 <charge+0x198>
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <charge+0x19a>
		}		
    1004:	53 cf       	rjmp	.-346    	; 0xeac <charge+0x40>
					
	PT_END(&var->ptVar);
}
    1006:	26 96       	adiw	r28, 0x06	; 6
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <discharge>:
	Discharge,
	DischargeMonitor
};

PT_THREAD(discharge(threadVar* var, const char* rate, uint8_t SOC))
{
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	00 d0       	rcall	.+0      	; 0x101e <discharge+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <discharge+0x8>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <discharge+0xa>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	9b 83       	std	Y+3, r25	; 0x03
    1028:	8a 83       	std	Y+2, r24	; 0x02
    102a:	7d 83       	std	Y+5, r23	; 0x05
    102c:	6c 83       	std	Y+4, r22	; 0x04
    102e:	4e 83       	std	Y+6, r20	; 0x06
	
	static uint8_t state;
	static uint8_t count;
	
	PT_BEGIN(&var->ptVar);
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	9b 81       	ldd	r25, Y+3	; 0x03
    1038:	fc 01       	movw	r30, r24
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	11 f0       	breq	.+4      	; 0x1046 <discharge+0x2e>
    1042:	00 00       	nop
    1044:	72 c0       	rjmp	.+228    	; 0x112a <discharge+0x112>
	
	state = Discharge;
    1046:	10 92 cb 00 	sts	0x00CB, r1
	
	while(true)
	{
		switch(state)
    104a:	80 91 cb 00 	lds	r24, 0x00CB
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	21 f0       	breq	.+8      	; 0x105e <discharge+0x46>
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	91 05       	cpc	r25, r1
    105a:	91 f1       	breq	.+100    	; 0x10c0 <discharge+0xa8>
    105c:	65 c0       	rjmp	.+202    	; 0x1128 <discharge+0x110>
		{
			case Discharge:
				if(doneDischarging(var->state->voltagePacket, SOC))
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	fc 01       	movw	r30, r24
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	fc 01       	movw	r30, r24
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	93 81       	ldd	r25, Z+3	; 0x03
    106e:	6e 81       	ldd	r22, Y+6	; 0x06
    1070:	0e 94 b9 23 	call	0x4772	; 0x4772 <doneDischarging>
    1074:	88 23       	and	r24, r24
    1076:	39 f0       	breq	.+14     	; 0x1086 <discharge+0x6e>
				{
					PT_EXIT(&var->ptVar);
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	9b 81       	ldd	r25, Y+3	; 0x03
    107c:	fc 01       	movw	r30, r24
    107e:	11 82       	std	Z+1, r1	; 0x01
    1080:	10 82       	st	Z, r1
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	5f c0       	rjmp	.+190    	; 0x1144 <discharge+0x12c>
				}	
				
				//do NOT allow the active load to discharge cells if we don't check the UV
				#ifndef AllowChargeOverDischargedCells  //disallow discharging when all we want is charge
				printf_P(PSTR("<al<ISET %S>>\n"), rate);	//set discharge I
    1086:	8a ec       	ldi	r24, 0xCA	; 202
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	2d 81       	ldd	r18, Y+5	; 0x05
    108c:	2f 93       	push	r18
    108e:	2c 81       	ldd	r18, Y+4	; 0x04
    1090:	2f 93       	push	r18
    1092:	29 2f       	mov	r18, r25
    1094:	2f 93       	push	r18
    1096:	8f 93       	push	r24
    1098:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
				puts_P(PSTR("<al<LOAD 1>>\n"));		//connect load
    10a4:	89 ed       	ldi	r24, 0xD9	; 217
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				puts_P(PSTR("**Begin Discharge**\n"));
    10ac:	87 ee       	ldi	r24, 0xE7	; 231
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				state = DischargeMonitor;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	80 93 cb 00 	sts	0x00CB, r24
				count = 0;
    10ba:	10 92 cc 00 	sts	0x00CC, r1
				#else
				state=Discharge;
				PT_EXIT(&var->ptVar);
				#endif
				
				break;
    10be:	34 c0       	rjmp	.+104    	; 0x1128 <discharge+0x110>
			case DischargeMonitor:
				if(NewADCReadings & ADCAlgorithm)
    10c0:	80 91 21 01 	lds	r24, 0x0121
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	82 70       	andi	r24, 0x02	; 2
    10ca:	99 27       	eor	r25, r25
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	59 f1       	breq	.+86     	; 0x1126 <discharge+0x10e>
				{
					if(doneDischarging(var->state->voltagePacket, SOC))
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	fc 01       	movw	r30, r24
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	fc 01       	movw	r30, r24
    10dc:	82 81       	ldd	r24, Z+2	; 0x02
    10de:	93 81       	ldd	r25, Z+3	; 0x03
    10e0:	6e 81       	ldd	r22, Y+6	; 0x06
    10e2:	0e 94 b9 23 	call	0x4772	; 0x4772 <doneDischarging>
    10e6:	88 23       	and	r24, r24
    10e8:	d9 f0       	breq	.+54     	; 0x1120 <discharge+0x108>
					{
						if (count >= 2)
    10ea:	80 91 cc 00 	lds	r24, 0x00CC
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	88 f0       	brcs	.+34     	; 0x1114 <discharge+0xfc>
						{
							puts_P(PSTR("<al<ISET 0>>\n"));	//stop discharging
    10f2:	8c ef       	ldi	r24, 0xFC	; 252
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
							puts_P(PSTR("<al<LOAD 0>>\n"));	//disconnect load
    10fa:	8a e0       	ldi	r24, 0x0A	; 10
    10fc:	92 e0       	ldi	r25, 0x02	; 2
    10fe:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
							state = Discharge;
    1102:	10 92 cb 00 	sts	0x00CB, r1
							PT_EXIT(&var->ptVar);
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	9b 81       	ldd	r25, Y+3	; 0x03
    110a:	fc 01       	movw	r30, r24
    110c:	11 82       	std	Z+1, r1	; 0x01
    110e:	10 82       	st	Z, r1
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	18 c0       	rjmp	.+48     	; 0x1144 <discharge+0x12c>
						} else {
							count++;
    1114:	80 91 cc 00 	lds	r24, 0x00CC
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	80 93 cc 00 	sts	0x00CC, r24
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <discharge+0x10e>
						}

					} else {
						//just stay here
						count = 0; //reset for erroneous readings
    1120:	10 92 cc 00 	sts	0x00CC, r1
					}
				}
				break;
    1124:	00 c0       	rjmp	.+0      	; 0x1126 <discharge+0x10e>
    1126:	00 00       	nop
			}	
		PT_YIELD(&var->ptVar);
    1128:	19 82       	std	Y+1, r1	; 0x01
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	9b 81       	ldd	r25, Y+3	; 0x03
    112e:	25 e9       	ldi	r18, 0x95	; 149
    1130:	38 e0       	ldi	r19, 0x08	; 8
    1132:	fc 01       	movw	r30, r24
    1134:	31 83       	std	Z+1, r19	; 0x01
    1136:	20 83       	st	Z, r18
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	88 23       	and	r24, r24
    113c:	11 f4       	brne	.+4      	; 0x1142 <discharge+0x12a>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <discharge+0x12c>
	}		
    1142:	83 cf       	rjmp	.-250    	; 0x104a <discharge+0x32>
	PT_END(&var->ptVar);
}
    1144:	26 96       	adiw	r28, 0x06	; 6
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <delay>:

PT_THREAD(delay(threadVar* var, uint16_t delayS))
{	
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	00 d0       	rcall	.+0      	; 0x115c <delay+0x6>
    115c:	00 d0       	rcall	.+0      	; 0x115e <delay+0x8>
    115e:	1f 92       	push	r1
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	9b 83       	std	Y+3, r25	; 0x03
    1166:	8a 83       	std	Y+2, r24	; 0x02
    1168:	7d 83       	std	Y+5, r23	; 0x05
    116a:	6c 83       	std	Y+4, r22	; 0x04
	PT_BEGIN(&var->ptVar);
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	9b 81       	ldd	r25, Y+3	; 0x03
    1174:	fc 01       	movw	r30, r24
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	11 f0       	breq	.+4      	; 0x1182 <delay+0x2c>
    117e:	00 00       	nop
    1180:	10 c0       	rjmp	.+32     	; 0x11a2 <delay+0x4c>
	static uint32_t tBegin = 0;
	tBegin = time;
    1182:	80 91 1d 01 	lds	r24, 0x011D
    1186:	90 91 1e 01 	lds	r25, 0x011E
    118a:	a0 91 1f 01 	lds	r26, 0x011F
    118e:	b0 91 20 01 	lds	r27, 0x0120
    1192:	80 93 cd 00 	sts	0x00CD, r24
    1196:	90 93 ce 00 	sts	0x00CE, r25
    119a:	a0 93 cf 00 	sts	0x00CF, r26
    119e:	b0 93 d0 00 	sts	0x00D0, r27
	
	PT_WAIT_WHILE(&var->ptVar, (time < (tBegin + delayS)));
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	9b 81       	ldd	r25, Y+3	; 0x03
    11a6:	21 ed       	ldi	r18, 0xD1	; 209
    11a8:	38 e0       	ldi	r19, 0x08	; 8
    11aa:	fc 01       	movw	r30, r24
    11ac:	31 83       	std	Z+1, r19	; 0x01
    11ae:	20 83       	st	Z, r18
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	9c 01       	movw	r18, r24
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	80 91 cd 00 	lds	r24, 0x00CD
    11be:	90 91 ce 00 	lds	r25, 0x00CE
    11c2:	a0 91 cf 00 	lds	r26, 0x00CF
    11c6:	b0 91 d0 00 	lds	r27, 0x00D0
    11ca:	28 0f       	add	r18, r24
    11cc:	39 1f       	adc	r19, r25
    11ce:	4a 1f       	adc	r20, r26
    11d0:	5b 1f       	adc	r21, r27
    11d2:	80 91 1d 01 	lds	r24, 0x011D
    11d6:	90 91 1e 01 	lds	r25, 0x011E
    11da:	a0 91 1f 01 	lds	r26, 0x011F
    11de:	b0 91 20 01 	lds	r27, 0x0120
    11e2:	82 17       	cp	r24, r18
    11e4:	93 07       	cpc	r25, r19
    11e6:	a4 07       	cpc	r26, r20
    11e8:	b5 07       	cpc	r27, r21
    11ea:	10 f4       	brcc	.+4      	; 0x11f0 <delay+0x9a>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	06 c0       	rjmp	.+12     	; 0x11fc <delay+0xa6>
	PT_EXIT(&var->ptVar);
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	9b 81       	ldd	r25, Y+3	; 0x03
    11f4:	fc 01       	movw	r30, r24
    11f6:	11 82       	std	Z+1, r1	; 0x01
    11f8:	10 82       	st	Z, r1
    11fa:	82 e0       	ldi	r24, 0x02	; 2
	
	PT_END(&var->ptVar);
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <masterThread>:

PT_THREAD(masterThread(threadVar* var))
{
    120c:	ef 92       	push	r14
    120e:	ff 92       	push	r15
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	2a 97       	sbiw	r28, 0x0a	; 10
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	9e 83       	std	Y+6, r25	; 0x06
    122a:	8d 83       	std	Y+5, r24	; 0x05
	static uint8_t SOC;
	static uint32_t timeRec;
	static uint8_t i;
	//static uint8_t temp;
	
	PT_BEGIN(&var->ptVar);
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	fc 01       	movw	r30, r24
    1236:	80 81       	ld	r24, Z
    1238:	91 81       	ldd	r25, Z+1	; 0x01
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	49 f0       	breq	.+18     	; 0x1250 <masterThread+0x44>
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	fc 01       	movw	r30, r24
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
    1248:	00 00       	nop
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	08 95       	ret

	subThread.state->voltagePacket = var->state->voltagePacket;
    1250:	80 91 d3 00 	lds	r24, 0x00D3
    1254:	90 91 d4 00 	lds	r25, 0x00D4
    1258:	2d 81       	ldd	r18, Y+5	; 0x05
    125a:	3e 81       	ldd	r19, Y+6	; 0x06
    125c:	f9 01       	movw	r30, r18
    125e:	22 81       	ldd	r18, Z+2	; 0x02
    1260:	33 81       	ldd	r19, Z+3	; 0x03
    1262:	f9 01       	movw	r30, r18
    1264:	22 81       	ldd	r18, Z+2	; 0x02
    1266:	33 81       	ldd	r19, Z+3	; 0x03
    1268:	fc 01       	movw	r30, r24
    126a:	33 83       	std	Z+3, r19	; 0x03
    126c:	22 83       	std	Z+2, r18	; 0x02
	
	while(true)
	{
		switch(var->state->mode)
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	fc 01       	movw	r30, r24
    1274:	82 81       	ldd	r24, Z+2	; 0x02
    1276:	93 81       	ldd	r25, Z+3	; 0x03
    1278:	fc 01       	movw	r30, r24
    127a:	80 81       	ld	r24, Z
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	aa 27       	eor	r26, r26
    1282:	97 fd       	sbrc	r25, 7
    1284:	a0 95       	com	r26
    1286:	ba 2f       	mov	r27, r26
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	2b e4       	ldi	r18, 0x4B	; 75
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	84 1b       	sub	r24, r20
    1292:	95 0b       	sbc	r25, r21
    1294:	28 17       	cp	r18, r24
    1296:	39 07       	cpc	r19, r25
    1298:	08 f4       	brcc	.+2      	; 0x129c <masterThread+0x90>
    129a:	b3 c3       	rjmp	.+1894   	; 0x1a02 <masterThread+0x7f6>
    129c:	86 5d       	subi	r24, 0xD6	; 214
    129e:	9f 4f       	sbci	r25, 0xFF	; 255
    12a0:	fc 01       	movw	r30, r24
    12a2:	0c 94 23 28 	jmp	0x5046	; 0x5046 <__tablejump2__>
		{
			case DoNothing:
				logMode = logNone;		
    12a6:	80 e4       	ldi	r24, 0x40	; 64
    12a8:	80 93 84 00 	sts	0x0084, r24
				break;
    12ac:	d5 c3       	rjmp	.+1962   	; 0x1a58 <masterThread+0x84c>
				
			case JustLog:
				initEEPROM();
    12ae:	0e 94 4a 03 	call	0x694	; 0x694 <initEEPROM>
				logMode = logRaw;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 93 84 00 	sts	0x0084, r24
				puts_P(PSTR("**Begin just logging**\n"));
    12b8:	88 e1       	ldi	r24, 0x18	; 24
    12ba:	92 e0       	ldi	r25, 0x02	; 2
    12bc:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				var->state->mode = Done;
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	fc 01       	movw	r30, r24
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	93 81       	ldd	r25, Z+3	; 0x03
    12ca:	2a e0       	ldi	r18, 0x0A	; 10
    12cc:	fc 01       	movw	r30, r24
    12ce:	20 83       	st	Z, r18
				break;
    12d0:	c3 c3       	rjmp	.+1926   	; 0x1a58 <masterThread+0x84c>
			case DischargeCells:
				PT_SPAWN(&var->ptVar, &subThread.ptVar, discharge(&subThread, PSTR("0.1"), FullDischarge));
    12d2:	10 92 d2 00 	sts	0x00D2, r1
    12d6:	10 92 d1 00 	sts	0x00D1, r1
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	2d e6       	ldi	r18, 0x6D	; 109
    12e0:	39 e0       	ldi	r19, 0x09	; 9
    12e2:	fc 01       	movw	r30, r24
    12e4:	31 83       	std	Z+1, r19	; 0x01
    12e6:	20 83       	st	Z, r18
    12e8:	80 e3       	ldi	r24, 0x30	; 48
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	bc 01       	movw	r22, r24
    12f0:	81 ed       	ldi	r24, 0xD1	; 209
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 0c 08 	call	0x1018	; 0x1018 <discharge>
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	10 f4       	brcc	.+4      	; 0x1300 <masterThread+0xf4>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	ba c3       	rjmp	.+1908   	; 0x1a74 <masterThread+0x868>
				shutdown();
    1300:	0e 94 7e 24 	call	0x48fc	; 0x48fc <shutdown>
				var->state->mode = Done;
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	fc 01       	movw	r30, r24
    130a:	82 81       	ldd	r24, Z+2	; 0x02
    130c:	93 81       	ldd	r25, Z+3	; 0x03
    130e:	2a e0       	ldi	r18, 0x0A	; 10
    1310:	fc 01       	movw	r30, r24
    1312:	20 83       	st	Z, r18
				break;
    1314:	a1 c3       	rjmp	.+1858   	; 0x1a58 <masterThread+0x84c>
			case ExtractParams:
				logMode = logRaw | logStackI | logBalancer;
    1316:	8d e0       	ldi	r24, 0x0D	; 13
    1318:	80 93 84 00 	sts	0x0084, r24
				PT_WAIT_WHILE(&var->ptVar, time  <= 5);
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	2e e8       	ldi	r18, 0x8E	; 142
    1322:	39 e0       	ldi	r19, 0x09	; 9
    1324:	fc 01       	movw	r30, r24
    1326:	31 83       	std	Z+1, r19	; 0x01
    1328:	20 83       	st	Z, r18
    132a:	80 91 1d 01 	lds	r24, 0x011D
    132e:	90 91 1e 01 	lds	r25, 0x011E
    1332:	a0 91 1f 01 	lds	r26, 0x011F
    1336:	b0 91 20 01 	lds	r27, 0x0120
    133a:	86 30       	cpi	r24, 0x06	; 6
    133c:	91 05       	cpc	r25, r1
    133e:	a1 05       	cpc	r26, r1
    1340:	b1 05       	cpc	r27, r1
    1342:	10 f4       	brcc	.+4      	; 0x1348 <masterThread+0x13c>
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	96 c3       	rjmp	.+1836   	; 0x1a74 <masterThread+0x868>
				puts_P(PSTR("**Begin Pulse Test**\n"));
    1348:	84 e3       	ldi	r24, 0x34	; 52
    134a:	92 e0       	ldi	r25, 0x02	; 2
    134c:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				PT_SPAWN(&var->ptVar, &subThread.ptVar, pulseTest(&subThread));
    1350:	10 92 d2 00 	sts	0x00D2, r1
    1354:	10 92 d1 00 	sts	0x00D1, r1
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	9e 81       	ldd	r25, Y+6	; 0x06
    135c:	2c ea       	ldi	r18, 0xAC	; 172
    135e:	39 e0       	ldi	r19, 0x09	; 9
    1360:	fc 01       	movw	r30, r24
    1362:	31 83       	std	Z+1, r19	; 0x01
    1364:	20 83       	st	Z, r18
    1366:	81 ed       	ldi	r24, 0xD1	; 209
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 54 06 	call	0xca8	; 0xca8 <pulseTest>
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	10 f4       	brcc	.+4      	; 0x1376 <masterThread+0x16a>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	7f c3       	rjmp	.+1790   	; 0x1a74 <masterThread+0x868>
				//PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread));
				//PT_SPAWN(&var->ptVar, &subThread.ptVar, calibrateTopBalance(&subThread));
				//PT_SPAWN(&var->ptVar, &subThread.ptVar, discharge(&subThread));
				puts_P(PSTR("**Pulse test done**\n"));
    1376:	8a e4       	ldi	r24, 0x4A	; 74
    1378:	92 e0       	ldi	r25, 0x02	; 2
    137a:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				var->state->mode = DoNothing;
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	fc 01       	movw	r30, r24
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	93 81       	ldd	r25, Z+3	; 0x03
    1388:	fc 01       	movw	r30, r24
    138a:	10 82       	st	Z, r1
				shutdown();
    138c:	0e 94 7e 24 	call	0x48fc	; 0x48fc <shutdown>
				break;
    1390:	63 c3       	rjmp	.+1734   	; 0x1a58 <masterThread+0x84c>
		
			case DoTopBalance:
				initEEPROM();
    1392:	0e 94 4a 03 	call	0x694	; 0x694 <initEEPROM>
				logMode = logRaw | logStackI | logBalancer;
    1396:	8d e0       	ldi	r24, 0x0D	; 13
    1398:	80 93 84 00 	sts	0x0084, r24
				PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 2));
    139c:	10 92 d2 00 	sts	0x00D2, r1
    13a0:	10 92 d1 00 	sts	0x00D1, r1
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	22 ed       	ldi	r18, 0xD2	; 210
    13aa:	39 e0       	ldi	r19, 0x09	; 9
    13ac:	fc 01       	movw	r30, r24
    13ae:	31 83       	std	Z+1, r19	; 0x01
    13b0:	20 83       	st	Z, r18
    13b2:	62 e0       	ldi	r22, 0x02	; 2
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	81 ed       	ldi	r24, 0xD1	; 209
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 ab 08 	call	0x1156	; 0x1156 <delay>
    13be:	82 30       	cpi	r24, 0x02	; 2
    13c0:	10 f4       	brcc	.+4      	; 0x13c6 <masterThread+0x1ba>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	57 c3       	rjmp	.+1710   	; 0x1a74 <masterThread+0x868>
				puts_P(PSTR("**Begin top balance initial charge**\n"));
    13c6:	8f e5       	ldi	r24, 0x5F	; 95
    13c8:	92 e0       	ldi	r25, 0x02	; 2
    13ca:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.2"), FullCharge));
    13ce:	10 92 d2 00 	sts	0x00D2, r1
    13d2:	10 92 d1 00 	sts	0x00D1, r1
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	2b ee       	ldi	r18, 0xEB	; 235
    13dc:	39 e0       	ldi	r19, 0x09	; 9
    13de:	fc 01       	movw	r30, r24
    13e0:	31 83       	std	Z+1, r19	; 0x01
    13e2:	20 83       	st	Z, r18
    13e4:	85 e8       	ldi	r24, 0x85	; 133
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	4f ef       	ldi	r20, 0xFF	; 255
    13ea:	bc 01       	movw	r22, r24
    13ec:	81 ed       	ldi	r24, 0xD1	; 209
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 36 07 	call	0xe6c	; 0xe6c <charge>
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	10 f4       	brcc	.+4      	; 0x13fc <masterThread+0x1f0>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	3c c3       	rjmp	.+1656   	; 0x1a74 <masterThread+0x868>
				puts_P(PSTR("**Begin top balance**\n"));
    13fc:	89 e8       	ldi	r24, 0x89	; 137
    13fe:	92 e0       	ldi	r25, 0x02	; 2
    1400:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				PT_SPAWN(&var->ptVar, &subThread.ptVar, calibrateTopBalance(&subThread, FullCharge));
    1404:	10 92 d2 00 	sts	0x00D2, r1
    1408:	10 92 d1 00 	sts	0x00D1, r1
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	26 e0       	ldi	r18, 0x06	; 6
    1412:	3a e0       	ldi	r19, 0x0A	; 10
    1414:	fc 01       	movw	r30, r24
    1416:	31 83       	std	Z+1, r19	; 0x01
    1418:	20 83       	st	Z, r18
    141a:	6f ef       	ldi	r22, 0xFF	; 255
    141c:	81 ed       	ldi	r24, 0xD1	; 209
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 87 05 	call	0xb0e	; 0xb0e <calibrateTopBalance>
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	10 f4       	brcc	.+4      	; 0x142c <masterThread+0x220>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	24 c3       	rjmp	.+1608   	; 0x1a74 <masterThread+0x868>
				puts_P(PSTR("**Begin final charge**\n"));
    142c:	80 ea       	ldi	r24, 0xA0	; 160
    142e:	92 e0       	ldi	r25, 0x02	; 2
    1430:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.2"), FullCharge));
    1434:	10 92 d2 00 	sts	0x00D2, r1
    1438:	10 92 d1 00 	sts	0x00D1, r1
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	9e 81       	ldd	r25, Y+6	; 0x06
    1440:	2e e1       	ldi	r18, 0x1E	; 30
    1442:	3a e0       	ldi	r19, 0x0A	; 10
    1444:	fc 01       	movw	r30, r24
    1446:	31 83       	std	Z+1, r19	; 0x01
    1448:	20 83       	st	Z, r18
    144a:	88 eb       	ldi	r24, 0xB8	; 184
    144c:	92 e0       	ldi	r25, 0x02	; 2
    144e:	4f ef       	ldi	r20, 0xFF	; 255
    1450:	bc 01       	movw	r22, r24
    1452:	81 ed       	ldi	r24, 0xD1	; 209
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 36 07 	call	0xe6c	; 0xe6c <charge>
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	10 f4       	brcc	.+4      	; 0x1462 <masterThread+0x256>
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	09 c3       	rjmp	.+1554   	; 0x1a74 <masterThread+0x868>
				var->state->mode = DoNothing;
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	fc 01       	movw	r30, r24
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	fc 01       	movw	r30, r24
    146e:	10 82       	st	Z, r1
				shutdown();
    1470:	0e 94 7e 24 	call	0x48fc	; 0x48fc <shutdown>
			
				break;
    1474:	f1 c2       	rjmp	.+1506   	; 0x1a58 <masterThread+0x84c>
			case ChargeCells:
				puts_P(PSTR("**Begin charge**\n"));
    1476:	8c eb       	ldi	r24, 0xBC	; 188
    1478:	92 e0       	ldi	r25, 0x02	; 2
    147a:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.1"), FullCharge));
    147e:	10 92 d2 00 	sts	0x00D2, r1
    1482:	10 92 d1 00 	sts	0x00D1, r1
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	23 e4       	ldi	r18, 0x43	; 67
    148c:	3a e0       	ldi	r19, 0x0A	; 10
    148e:	fc 01       	movw	r30, r24
    1490:	31 83       	std	Z+1, r19	; 0x01
    1492:	20 83       	st	Z, r18
    1494:	8e ec       	ldi	r24, 0xCE	; 206
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	4f ef       	ldi	r20, 0xFF	; 255
    149a:	bc 01       	movw	r22, r24
    149c:	81 ed       	ldi	r24, 0xD1	; 209
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 36 07 	call	0xe6c	; 0xe6c <charge>
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	10 f4       	brcc	.+4      	; 0x14ac <masterThread+0x2a0>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	e4 c2       	rjmp	.+1480   	; 0x1a74 <masterThread+0x868>
				puts_P(PSTR("**End Charge**\n"));
    14ac:	82 ed       	ldi	r24, 0xD2	; 210
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				var->state->mode = DoNothing;
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	fc 01       	movw	r30, r24
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	fc 01       	movw	r30, r24
    14c0:	10 82       	st	Z, r1
				shutdown();
    14c2:	0e 94 7e 24 	call	0x48fc	; 0x48fc <shutdown>
				break;
    14c6:	c8 c2       	rjmp	.+1424   	; 0x1a58 <masterThread+0x84c>
			case Done:
				break;
			case FindCapacities:
				//logMode = logRaw;
				logMode = logRaw | logBalancer | logStackI;
    14c8:	8d e0       	ldi	r24, 0x0D	; 13
    14ca:	80 93 84 00 	sts	0x0084, r24

				
				PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 30));
    14ce:	10 92 d2 00 	sts	0x00D2, r1
    14d2:	10 92 d1 00 	sts	0x00D1, r1
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	2b e6       	ldi	r18, 0x6B	; 107
    14dc:	3a e0       	ldi	r19, 0x0A	; 10
    14de:	fc 01       	movw	r30, r24
    14e0:	31 83       	std	Z+1, r19	; 0x01
    14e2:	20 83       	st	Z, r18
    14e4:	6e e1       	ldi	r22, 0x1E	; 30
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	81 ed       	ldi	r24, 0xD1	; 209
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 ab 08 	call	0x1156	; 0x1156 <delay>
    14f0:	82 30       	cpi	r24, 0x02	; 2
    14f2:	10 f4       	brcc	.+4      	; 0x14f8 <masterThread+0x2ec>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	be c2       	rjmp	.+1404   	; 0x1a74 <masterThread+0x868>
				
				
				PT_WAIT_UNTIL(&var->ptVar, NewISenseReadings & ISenseAlgorithm);
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	2c e7       	ldi	r18, 0x7C	; 124
    14fe:	3a e0       	ldi	r19, 0x0A	; 10
    1500:	fc 01       	movw	r30, r24
    1502:	31 83       	std	Z+1, r19	; 0x01
    1504:	20 83       	st	Z, r18
    1506:	80 91 22 01 	lds	r24, 0x0122
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	88 70       	andi	r24, 0x08	; 8
    1510:	99 27       	eor	r25, r25
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	11 f4       	brne	.+4      	; 0x151a <masterThread+0x30e>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	ad c2       	rjmp	.+1370   	; 0x1a74 <masterThread+0x868>
				
				PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.5"), FullCharge));
    151a:	10 92 d2 00 	sts	0x00D2, r1
    151e:	10 92 d1 00 	sts	0x00D1, r1
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	21 e9       	ldi	r18, 0x91	; 145
    1528:	3a e0       	ldi	r19, 0x0A	; 10
    152a:	fc 01       	movw	r30, r24
    152c:	31 83       	std	Z+1, r19	; 0x01
    152e:	20 83       	st	Z, r18
    1530:	82 ee       	ldi	r24, 0xE2	; 226
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	4f ef       	ldi	r20, 0xFF	; 255
    1536:	bc 01       	movw	r22, r24
    1538:	81 ed       	ldi	r24, 0xD1	; 209
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 36 07 	call	0xe6c	; 0xe6c <charge>
    1540:	82 30       	cpi	r24, 0x02	; 2
    1542:	10 f4       	brcc	.+4      	; 0x1548 <masterThread+0x33c>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	96 c2       	rjmp	.+1324   	; 0x1a74 <masterThread+0x868>
				
				puts_P(PSTR("**Begin Find Capacity**\n"));
    1548:	86 ee       	ldi	r24, 0xE6	; 230
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>

					}
					PT_YIELD(&var->ptVar);
				}
				*/
				PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 60));
    1550:	10 92 d2 00 	sts	0x00D2, r1
    1554:	10 92 d1 00 	sts	0x00D1, r1
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	9e 81       	ldd	r25, Y+6	; 0x06
    155c:	2c ea       	ldi	r18, 0xAC	; 172
    155e:	3a e0       	ldi	r19, 0x0A	; 10
    1560:	fc 01       	movw	r30, r24
    1562:	31 83       	std	Z+1, r19	; 0x01
    1564:	20 83       	st	Z, r18
    1566:	6c e3       	ldi	r22, 0x3C	; 60
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	81 ed       	ldi	r24, 0xD1	; 209
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 ab 08 	call	0x1156	; 0x1156 <delay>
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	10 f4       	brcc	.+4      	; 0x157a <masterThread+0x36e>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	7d c2       	rjmp	.+1274   	; 0x1a74 <masterThread+0x868>
				
				PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.1"), FullCharge));
    157a:	10 92 d2 00 	sts	0x00D2, r1
    157e:	10 92 d1 00 	sts	0x00D1, r1
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	21 ec       	ldi	r18, 0xC1	; 193
    1588:	3a e0       	ldi	r19, 0x0A	; 10
    158a:	fc 01       	movw	r30, r24
    158c:	31 83       	std	Z+1, r19	; 0x01
    158e:	20 83       	st	Z, r18
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	92 e0       	ldi	r25, 0x02	; 2
    1594:	4f ef       	ldi	r20, 0xFF	; 255
    1596:	bc 01       	movw	r22, r24
    1598:	81 ed       	ldi	r24, 0xD1	; 209
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 36 07 	call	0xe6c	; 0xe6c <charge>
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	10 f4       	brcc	.+4      	; 0x15a8 <masterThread+0x39c>
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	66 c2       	rjmp	.+1228   	; 0x1a74 <masterThread+0x868>

				//ok, we know the cells are definitely balanced.  Now we need to reset the coulomb counters
				//and discharge
				for(uint8_t i = 0; i < NumberOfCells; i++)
    15a8:	1a 82       	std	Y+2, r1	; 0x02
    15aa:	11 c0       	rjmp	.+34     	; 0x15ce <masterThread+0x3c2>
				{
					currentAccumulators[i] = 0;
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	85 51       	subi	r24, 0x15	; 21
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	fc 01       	movw	r30, r24
    15c0:	10 82       	st	Z, r1
    15c2:	11 82       	std	Z+1, r1	; 0x01
    15c4:	12 82       	std	Z+2, r1	; 0x02
    15c6:	13 82       	std	Z+3, r1	; 0x03
				
				PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.1"), FullCharge));

				//ok, we know the cells are definitely balanced.  Now we need to reset the coulomb counters
				//and discharge
				for(uint8_t i = 0; i < NumberOfCells; i++)
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	8a 83       	std	Y+2, r24	; 0x02
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	8c 30       	cpi	r24, 0x0C	; 12
    15d2:	60 f3       	brcs	.-40     	; 0x15ac <masterThread+0x3a0>
				{
					currentAccumulators[i] = 0;
				}
				
				DischargerStatus = 0x00;
    15d4:	10 92 fe 01 	sts	0x01FE, r1
    15d8:	10 92 fd 01 	sts	0x01FD, r1
				updateCFGReg = true;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	80 93 5e 01 	sts	0x015E, r24
				PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 60));
    15e2:	10 92 d2 00 	sts	0x00D2, r1
    15e6:	10 92 d1 00 	sts	0x00D1, r1
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	25 ef       	ldi	r18, 0xF5	; 245
    15f0:	3a e0       	ldi	r19, 0x0A	; 10
    15f2:	fc 01       	movw	r30, r24
    15f4:	31 83       	std	Z+1, r19	; 0x01
    15f6:	20 83       	st	Z, r18
    15f8:	6c e3       	ldi	r22, 0x3C	; 60
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	81 ed       	ldi	r24, 0xD1	; 209
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 ab 08 	call	0x1156	; 0x1156 <delay>
    1604:	82 30       	cpi	r24, 0x02	; 2
    1606:	10 f4       	brcc	.+4      	; 0x160c <masterThread+0x400>
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	34 c2       	rjmp	.+1128   	; 0x1a74 <masterThread+0x868>
				
				PT_SPAWN(&var->ptVar, &subThread.ptVar, discharge(&subThread, PSTR("0.1"), FullDischarge));
    160c:	10 92 d2 00 	sts	0x00D2, r1
    1610:	10 92 d1 00 	sts	0x00D1, r1
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	2a e0       	ldi	r18, 0x0A	; 10
    161a:	3b e0       	ldi	r19, 0x0B	; 11
    161c:	fc 01       	movw	r30, r24
    161e:	31 83       	std	Z+1, r19	; 0x01
    1620:	20 83       	st	Z, r18
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	93 e0       	ldi	r25, 0x03	; 3
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	bc 01       	movw	r22, r24
    162a:	81 ed       	ldi	r24, 0xD1	; 209
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 0c 08 	call	0x1018	; 0x1018 <discharge>
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	10 f4       	brcc	.+4      	; 0x163a <masterThread+0x42e>
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	1d c2       	rjmp	.+1082   	; 0x1a74 <masterThread+0x868>
				//ok, now we have the cells discharged and we know minimum capacity.  Rest, then
				// use our table to figure out SOC.  From there, we estimate individual capacity.
				PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 60));
    163a:	10 92 d2 00 	sts	0x00D2, r1
    163e:	10 92 d1 00 	sts	0x00D1, r1
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	9e 81       	ldd	r25, Y+6	; 0x06
    1646:	21 e2       	ldi	r18, 0x21	; 33
    1648:	3b e0       	ldi	r19, 0x0B	; 11
    164a:	fc 01       	movw	r30, r24
    164c:	31 83       	std	Z+1, r19	; 0x01
    164e:	20 83       	st	Z, r18
    1650:	6c e3       	ldi	r22, 0x3C	; 60
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	81 ed       	ldi	r24, 0xD1	; 209
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 ab 08 	call	0x1156	; 0x1156 <delay>
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	10 f4       	brcc	.+4      	; 0x1664 <masterThread+0x458>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	08 c2       	rjmp	.+1040   	; 0x1a74 <masterThread+0x868>
				

				puts_P(PSTR("**"));
    1664:	87 e0       	ldi	r24, 0x07	; 7
    1666:	93 e0       	ldi	r25, 0x03	; 3
    1668:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				for(uint8_t i = 0; i < NumberOfCells; i++)
    166c:	1b 82       	std	Y+3, r1	; 0x03
    166e:	71 c0       	rjmp	.+226    	; 0x1752 <masterThread+0x546>
					//if SOC=1, capacity should be infinite
					//so, 
					//   capacity = IAccumulator/(1-SOC)
					//	but get SOC is is scaled so 100% = UINT8_MAX, so multiply everything else by UINT8_MAX

					tempCap = (uint32_t)(-currentAccumulators[i])*UINT8_MAX;
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	88 2f       	mov	r24, r24
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	85 51       	subi	r24, 0x15	; 21
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	fc 01       	movw	r30, r24
    1684:	80 81       	ld	r24, Z
    1686:	91 81       	ldd	r25, Z+1	; 0x01
    1688:	a2 81       	ldd	r26, Z+2	; 0x02
    168a:	b3 81       	ldd	r27, Z+3	; 0x03
    168c:	9c 01       	movw	r18, r24
    168e:	ad 01       	movw	r20, r26
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	9f ef       	ldi	r25, 0xFF	; 255
    1694:	dc 01       	movw	r26, r24
    1696:	0e 94 46 28 	call	0x508c	; 0x508c <__mulohisi3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	80 93 d5 00 	sts	0x00D5, r24
    16a2:	90 93 d6 00 	sts	0x00D6, r25
    16a6:	a0 93 d7 00 	sts	0x00D7, r26
    16aa:	b0 93 d8 00 	sts	0x00D8, r27
					SOC = getSOC(voltageFromCVReg(var->state->voltagePacket->reg.payload[0].bytes, i+1));
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	21 e0       	ldi	r18, 0x01	; 1
    16b2:	28 0f       	add	r18, r24
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	fc 01       	movw	r30, r24
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	fc 01       	movw	r30, r24
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	02 96       	adiw	r24, 0x02	; 2
    16c6:	62 2f       	mov	r22, r18
    16c8:	0e 94 51 14 	call	0x28a2	; 0x28a2 <voltageFromCVReg>
    16cc:	0e 94 3e 20 	call	0x407c	; 0x407c <getSOC>
    16d0:	80 93 d9 00 	sts	0x00D9, r24
					capacities[i] = (int32_t)(tempCap/(UINT8_MAX-
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	08 2f       	mov	r16, r24
    16d8:	10 e0       	ldi	r17, 0x00	; 0
    16da:	80 91 d5 00 	lds	r24, 0x00D5
    16de:	90 91 d6 00 	lds	r25, 0x00D6
    16e2:	a0 91 d7 00 	lds	r26, 0x00D7
    16e6:	b0 91 d8 00 	lds	r27, 0x00D8
    16ea:	20 91 d9 00 	lds	r18, 0x00D9
    16ee:	22 2f       	mov	r18, r18
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4f ef       	ldi	r20, 0xFF	; 255
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	7a 01       	movw	r14, r20
    16f8:	e2 1a       	sub	r14, r18
    16fa:	f3 0a       	sbc	r15, r19
    16fc:	97 01       	movw	r18, r14
    16fe:	99 01       	movw	r18, r18
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <__udivmodsi4>
    170c:	da 01       	movw	r26, r20
    170e:	c9 01       	movw	r24, r18
    1710:	98 01       	movw	r18, r16
    1712:	22 0f       	add	r18, r18
    1714:	33 1f       	adc	r19, r19
    1716:	22 0f       	add	r18, r18
    1718:	33 1f       	adc	r19, r19
    171a:	26 53       	subi	r18, 0x36	; 54
    171c:	3e 4f       	sbci	r19, 0xFE	; 254
    171e:	f9 01       	movw	r30, r18
    1720:	80 83       	st	Z, r24
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	a2 83       	std	Z+2, r26	; 0x02
    1726:	b3 83       	std	Z+3, r27	; 0x03
						SOC));
					printf_P(PSTR("%"PRIx8"\t"), SOC);
    1728:	80 91 d9 00 	lds	r24, 0x00D9
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	8a e0       	ldi	r24, 0x0A	; 10
    1732:	93 e0       	ldi	r25, 0x03	; 3
    1734:	43 2f       	mov	r20, r19
    1736:	4f 93       	push	r20
    1738:	2f 93       	push	r18
    173a:	29 2f       	mov	r18, r25
    173c:	2f 93       	push	r18
    173e:	8f 93       	push	r24
    1740:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
				// use our table to figure out SOC.  From there, we estimate individual capacity.
				PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 60));
				

				puts_P(PSTR("**"));
				for(uint8_t i = 0; i < NumberOfCells; i++)
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	8f 5f       	subi	r24, 0xFF	; 255
    1750:	8b 83       	std	Y+3, r24	; 0x03
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	8c 30       	cpi	r24, 0x0C	; 12
    1756:	08 f4       	brcc	.+2      	; 0x175a <masterThread+0x54e>
    1758:	8b cf       	rjmp	.-234    	; 0x1670 <masterThread+0x464>
					SOC = getSOC(voltageFromCVReg(var->state->voltagePacket->reg.payload[0].bytes, i+1));
					capacities[i] = (int32_t)(tempCap/(UINT8_MAX-
						SOC));
					printf_P(PSTR("%"PRIx8"\t"), SOC);
				}
				puts_P(PSTR("**\n"));
    175a:	8e e0       	ldi	r24, 0x0E	; 14
    175c:	93 e0       	ldi	r25, 0x03	; 3
    175e:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				
				PT_YIELD(&var->ptVar);
    1762:	19 82       	std	Y+1, r1	; 0x01
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	22 eb       	ldi	r18, 0xB2	; 178
    176a:	3b e0       	ldi	r19, 0x0B	; 11
    176c:	fc 01       	movw	r30, r24
    176e:	31 83       	std	Z+1, r19	; 0x01
    1770:	20 83       	st	Z, r18
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	88 23       	and	r24, r24
    1776:	11 f4       	brne	.+4      	; 0x177c <masterThread+0x570>
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	7c c1       	rjmp	.+760    	; 0x1a74 <masterThread+0x868>
				//now store in EEPROM
				eeprom_update_block(capacities, capEEPROM, NumberOfCells*sizeof(int32_t));
    177c:	40 e3       	ldi	r20, 0x30	; 48
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	68 e4       	ldi	r22, 0x48	; 72
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	8a ec       	ldi	r24, 0xCA	; 202
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	0e 94 92 2a 	call	0x5524	; 0x5524 <__eeupd_block_m32a>
				
				//charge the pack so we don't leave it in a vulnerable place
				PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.5"), FullCharge));
    178c:	10 92 d2 00 	sts	0x00D2, r1
    1790:	10 92 d1 00 	sts	0x00D1, r1
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	9e 81       	ldd	r25, Y+6	; 0x06
    1798:	2a ec       	ldi	r18, 0xCA	; 202
    179a:	3b e0       	ldi	r19, 0x0B	; 11
    179c:	fc 01       	movw	r30, r24
    179e:	31 83       	std	Z+1, r19	; 0x01
    17a0:	20 83       	st	Z, r18
    17a2:	82 e1       	ldi	r24, 0x12	; 18
    17a4:	93 e0       	ldi	r25, 0x03	; 3
    17a6:	4f ef       	ldi	r20, 0xFF	; 255
    17a8:	bc 01       	movw	r22, r24
    17aa:	81 ed       	ldi	r24, 0xD1	; 209
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 36 07 	call	0xe6c	; 0xe6c <charge>
    17b2:	82 30       	cpi	r24, 0x02	; 2
    17b4:	10 f4       	brcc	.+4      	; 0x17ba <masterThread+0x5ae>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	5d c1       	rjmp	.+698    	; 0x1a74 <masterThread+0x868>
				
				//finally, just do nothing
				puts_P(PSTR("**Done find capacity**\n"));
    17ba:	86 e1       	ldi	r24, 0x16	; 22
    17bc:	93 e0       	ldi	r25, 0x03	; 3
    17be:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>

				shutdown();
    17c2:	0e 94 7e 24 	call	0x48fc	; 0x48fc <shutdown>
				var->state->mode=DoNothing;
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	fc 01       	movw	r30, r24
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	fc 01       	movw	r30, r24
    17d2:	10 82       	st	Z, r1

				break;
    17d4:	41 c1       	rjmp	.+642    	; 0x1a58 <masterThread+0x84c>
			case ActiveBalanceChargeDischarge:
				initEEPROM();
    17d6:	0e 94 4a 03 	call	0x694	; 0x694 <initEEPROM>
				
				ActiveBalanceMode = ActiveBalanceOff;
    17da:	10 92 ba 00 	sts	0x00BA, r1
				//ActiveBalanceMode = ActiveBalanceBegin;
				//PT_YIELD(&var->ptVar);
				//PT_YIELD(&var->ptVar);
				
				puts_P(PSTR("**Begin Active balance**\n"));
    17de:	8e e2       	ldi	r24, 0x2E	; 46
    17e0:	93 e0       	ldi	r25, 0x03	; 3
    17e2:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				//PT_SPAWN(&var->ptVar, &subThread.ptVar, calibrateTopBalance(&subThread, FullCharge));
				//PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 120));
				//PT_SPAWN(&var->ptVar, &subThread.ptVar, discharge((&subThread), PSTR("0.1"), 0.9*FullCharge));
				//PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.1"), FullCharge/2));
				//PT_SPAWN(&var->ptVar, &subThread.ptVar, calibrateTopBalance(&subThread, 0.9*FullCharge));
				puts_P(PSTR("**Done setup.  Beginning active balance Test**\n"));
    17e6:	88 e4       	ldi	r24, 0x48	; 72
    17e8:	93 e0       	ldi	r25, 0x03	; 3
    17ea:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 60*1));
    17ee:	10 92 d2 00 	sts	0x00D2, r1
    17f2:	10 92 d1 00 	sts	0x00D1, r1
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	2b ef       	ldi	r18, 0xFB	; 251
    17fc:	3b e0       	ldi	r19, 0x0B	; 11
    17fe:	fc 01       	movw	r30, r24
    1800:	31 83       	std	Z+1, r19	; 0x01
    1802:	20 83       	st	Z, r18
    1804:	6c e3       	ldi	r22, 0x3C	; 60
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	81 ed       	ldi	r24, 0xD1	; 209
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 ab 08 	call	0x1156	; 0x1156 <delay>
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	10 f4       	brcc	.+4      	; 0x1818 <masterThread+0x60c>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	2e c1       	rjmp	.+604    	; 0x1a74 <masterThread+0x868>
				ActiveBalanceMode = ActiveBalanceBegin;
    1818:	83 e0       	ldi	r24, 0x03	; 3
    181a:	80 93 ba 00 	sts	0x00BA, r24
				puts_P(PSTR("**Balancers engaged**\n"));
    181e:	88 e7       	ldi	r24, 0x78	; 120
    1820:	93 e0       	ldi	r25, 0x03	; 3
    1822:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 60*1));
    1826:	10 92 d2 00 	sts	0x00D2, r1
    182a:	10 92 d1 00 	sts	0x00D1, r1
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	27 e1       	ldi	r18, 0x17	; 23
    1834:	3c e0       	ldi	r19, 0x0C	; 12
    1836:	fc 01       	movw	r30, r24
    1838:	31 83       	std	Z+1, r19	; 0x01
    183a:	20 83       	st	Z, r18
    183c:	6c e3       	ldi	r22, 0x3C	; 60
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	81 ed       	ldi	r24, 0xD1	; 209
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 ab 08 	call	0x1156	; 0x1156 <delay>
    1848:	82 30       	cpi	r24, 0x02	; 2
    184a:	10 f4       	brcc	.+4      	; 0x1850 <masterThread+0x644>
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	12 c1       	rjmp	.+548    	; 0x1a74 <masterThread+0x868>
				//PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.1"), FullCharge*0.9));
				//puts_P(PSTR("**Done charge test**\n"));
				//shutdown();//temporary
				PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 60*10));
    1850:	10 92 d2 00 	sts	0x00D2, r1
    1854:	10 92 d1 00 	sts	0x00D1, r1
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	2c e2       	ldi	r18, 0x2C	; 44
    185e:	3c e0       	ldi	r19, 0x0C	; 12
    1860:	fc 01       	movw	r30, r24
    1862:	31 83       	std	Z+1, r19	; 0x01
    1864:	20 83       	st	Z, r18
    1866:	68 e5       	ldi	r22, 0x58	; 88
    1868:	72 e0       	ldi	r23, 0x02	; 2
    186a:	81 ed       	ldi	r24, 0xD1	; 209
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 ab 08 	call	0x1156	; 0x1156 <delay>
    1872:	82 30       	cpi	r24, 0x02	; 2
    1874:	10 f4       	brcc	.+4      	; 0x187a <masterThread+0x66e>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	fd c0       	rjmp	.+506    	; 0x1a74 <masterThread+0x868>
				PT_SPAWN(&var->ptVar, &subThread.ptVar, discharge((&subThread), PSTR("0.1"), FullCharge*0.1));
    187a:	10 92 d2 00 	sts	0x00D2, r1
    187e:	10 92 d1 00 	sts	0x00D1, r1
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	21 e4       	ldi	r18, 0x41	; 65
    1888:	3c e0       	ldi	r19, 0x0C	; 12
    188a:	fc 01       	movw	r30, r24
    188c:	31 83       	std	Z+1, r19	; 0x01
    188e:	20 83       	st	Z, r18
    1890:	8f e8       	ldi	r24, 0x8F	; 143
    1892:	93 e0       	ldi	r25, 0x03	; 3
    1894:	49 e1       	ldi	r20, 0x19	; 25
    1896:	bc 01       	movw	r22, r24
    1898:	81 ed       	ldi	r24, 0xD1	; 209
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 0c 08 	call	0x1018	; 0x1018 <discharge>
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	10 f4       	brcc	.+4      	; 0x18a8 <masterThread+0x69c>
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	e6 c0       	rjmp	.+460    	; 0x1a74 <masterThread+0x868>
				puts_P(PSTR("**Done discharge**\n"));
    18a8:	83 e9       	ldi	r24, 0x93	; 147
    18aa:	93 e0       	ldi	r25, 0x03	; 3
    18ac:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 60*10));
    18b0:	10 92 d2 00 	sts	0x00D2, r1
    18b4:	10 92 d1 00 	sts	0x00D1, r1
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	2c e5       	ldi	r18, 0x5C	; 92
    18be:	3c e0       	ldi	r19, 0x0C	; 12
    18c0:	fc 01       	movw	r30, r24
    18c2:	31 83       	std	Z+1, r19	; 0x01
    18c4:	20 83       	st	Z, r18
    18c6:	68 e5       	ldi	r22, 0x58	; 88
    18c8:	72 e0       	ldi	r23, 0x02	; 2
    18ca:	81 ed       	ldi	r24, 0xD1	; 209
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 ab 08 	call	0x1156	; 0x1156 <delay>
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	10 f4       	brcc	.+4      	; 0x18da <masterThread+0x6ce>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	cd c0       	rjmp	.+410    	; 0x1a74 <masterThread+0x868>
				puts_P(PSTR("**Begin Charge**\n"));
    18da:	87 ea       	ldi	r24, 0xA7	; 167
    18dc:	93 e0       	ldi	r25, 0x03	; 3
    18de:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				PT_SPAWN(&var->ptVar, &subThread.ptVar, charge(&subThread, PSTR("0.1"), FullCharge*0.9));
    18e2:	10 92 d2 00 	sts	0x00D2, r1
    18e6:	10 92 d1 00 	sts	0x00D1, r1
    18ea:	8d 81       	ldd	r24, Y+5	; 0x05
    18ec:	9e 81       	ldd	r25, Y+6	; 0x06
    18ee:	25 e7       	ldi	r18, 0x75	; 117
    18f0:	3c e0       	ldi	r19, 0x0C	; 12
    18f2:	fc 01       	movw	r30, r24
    18f4:	31 83       	std	Z+1, r19	; 0x01
    18f6:	20 83       	st	Z, r18
    18f8:	89 eb       	ldi	r24, 0xB9	; 185
    18fa:	93 e0       	ldi	r25, 0x03	; 3
    18fc:	45 ee       	ldi	r20, 0xE5	; 229
    18fe:	bc 01       	movw	r22, r24
    1900:	81 ed       	ldi	r24, 0xD1	; 209
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 36 07 	call	0xe6c	; 0xe6c <charge>
    1908:	82 30       	cpi	r24, 0x02	; 2
    190a:	10 f4       	brcc	.+4      	; 0x1910 <masterThread+0x704>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	b2 c0       	rjmp	.+356    	; 0x1a74 <masterThread+0x868>
				PT_SPAWN(&var->ptVar, &subThread.ptVar, delay(&subThread, 60*10));
    1910:	10 92 d2 00 	sts	0x00D2, r1
    1914:	10 92 d1 00 	sts	0x00D1, r1
    1918:	8d 81       	ldd	r24, Y+5	; 0x05
    191a:	9e 81       	ldd	r25, Y+6	; 0x06
    191c:	2c e8       	ldi	r18, 0x8C	; 140
    191e:	3c e0       	ldi	r19, 0x0C	; 12
    1920:	fc 01       	movw	r30, r24
    1922:	31 83       	std	Z+1, r19	; 0x01
    1924:	20 83       	st	Z, r18
    1926:	68 e5       	ldi	r22, 0x58	; 88
    1928:	72 e0       	ldi	r23, 0x02	; 2
    192a:	81 ed       	ldi	r24, 0xD1	; 209
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 ab 08 	call	0x1156	; 0x1156 <delay>
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	10 f4       	brcc	.+4      	; 0x193a <masterThread+0x72e>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	9d c0       	rjmp	.+314    	; 0x1a74 <masterThread+0x868>
				
				ActiveBalanceMode = ActiveBalanceEnd;
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	80 93 ba 00 	sts	0x00BA, r24
				puts_P(PSTR("**Done Active Balance\n"));
    1940:	8d eb       	ldi	r24, 0xBD	; 189
    1942:	93 e0       	ldi	r25, 0x03	; 3
    1944:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				
				shutdown();
    1948:	0e 94 7e 24 	call	0x48fc	; 0x48fc <shutdown>
				break;
    194c:	85 c0       	rjmp	.+266    	; 0x1a58 <masterThread+0x84c>
			case Test:	
				logMode = logRaw | logStackI | logBalancer;
    194e:	8d e0       	ldi	r24, 0x0D	; 13
    1950:	80 93 84 00 	sts	0x0084, r24

				uint8_t a;
				a=voltageFromSOC(FullCharge/2);
    1954:	8f e7       	ldi	r24, 0x7F	; 127
    1956:	0e 94 31 21 	call	0x4262	; 0x4262 <voltageFromSOC>
    195a:	8c 83       	std	Y+4, r24	; 0x04
				
				while(true)
				{
					for (i = 0; i < NumberOfCells; i++)
    195c:	10 92 da 00 	sts	0x00DA, r1
    1960:	4a c0       	rjmp	.+148    	; 0x19f6 <masterThread+0x7ea>
					{
						DischargerStatus = (1 << i);
    1962:	80 91 da 00 	lds	r24, 0x00DA
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <masterThread+0x768>
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	2a 95       	dec	r18
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <masterThread+0x764>
    1978:	90 93 fe 01 	sts	0x01FE, r25
    197c:	80 93 fd 01 	sts	0x01FD, r24
						timeRec = time;
    1980:	80 91 1d 01 	lds	r24, 0x011D
    1984:	90 91 1e 01 	lds	r25, 0x011E
    1988:	a0 91 1f 01 	lds	r26, 0x011F
    198c:	b0 91 20 01 	lds	r27, 0x0120
    1990:	80 93 db 00 	sts	0x00DB, r24
    1994:	90 93 dc 00 	sts	0x00DC, r25
    1998:	a0 93 dd 00 	sts	0x00DD, r26
    199c:	b0 93 de 00 	sts	0x00DE, r27
						PT_WAIT_UNTIL(&var->ptVar, (time - timeRec) > 30);
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	20 ed       	ldi	r18, 0xD0	; 208
    19a6:	3c e0       	ldi	r19, 0x0C	; 12
    19a8:	fc 01       	movw	r30, r24
    19aa:	31 83       	std	Z+1, r19	; 0x01
    19ac:	20 83       	st	Z, r18
    19ae:	20 91 1d 01 	lds	r18, 0x011D
    19b2:	30 91 1e 01 	lds	r19, 0x011E
    19b6:	40 91 1f 01 	lds	r20, 0x011F
    19ba:	50 91 20 01 	lds	r21, 0x0120
    19be:	80 91 db 00 	lds	r24, 0x00DB
    19c2:	90 91 dc 00 	lds	r25, 0x00DC
    19c6:	a0 91 dd 00 	lds	r26, 0x00DD
    19ca:	b0 91 de 00 	lds	r27, 0x00DE
    19ce:	79 01       	movw	r14, r18
    19d0:	8a 01       	movw	r16, r20
    19d2:	e8 1a       	sub	r14, r24
    19d4:	f9 0a       	sbc	r15, r25
    19d6:	0a 0b       	sbc	r16, r26
    19d8:	1b 0b       	sbc	r17, r27
    19da:	d8 01       	movw	r26, r16
    19dc:	c7 01       	movw	r24, r14
    19de:	8f 31       	cpi	r24, 0x1F	; 31
    19e0:	91 05       	cpc	r25, r1
    19e2:	a1 05       	cpc	r26, r1
    19e4:	b1 05       	cpc	r27, r1
    19e6:	10 f4       	brcc	.+4      	; 0x19ec <masterThread+0x7e0>
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	44 c0       	rjmp	.+136    	; 0x1a74 <masterThread+0x868>
				uint8_t a;
				a=voltageFromSOC(FullCharge/2);
				
				while(true)
				{
					for (i = 0; i < NumberOfCells; i++)
    19ec:	80 91 da 00 	lds	r24, 0x00DA
    19f0:	8f 5f       	subi	r24, 0xFF	; 255
    19f2:	80 93 da 00 	sts	0x00DA, r24
    19f6:	80 91 da 00 	lds	r24, 0x00DA
    19fa:	8c 30       	cpi	r24, 0x0C	; 12
    19fc:	08 f4       	brcc	.+2      	; 0x1a00 <masterThread+0x7f4>
    19fe:	b1 cf       	rjmp	.-158    	; 0x1962 <masterThread+0x756>
					{
						DischargerStatus = (1 << i);
						timeRec = time;
						PT_WAIT_UNTIL(&var->ptVar, (time - timeRec) > 30);
					}
				}
    1a00:	ad cf       	rjmp	.-166    	; 0x195c <masterThread+0x750>
				
			default:
				globalError = AlgorithmErrorDefaultState;
    1a02:	8d e4       	ldi	r24, 0x4D	; 77
    1a04:	80 93 6b 00 	sts	0x006B, r24
			case AlgorithmError:
				#ifndef IgnoreErrors
				emergencyShutdown();
    1a08:	0e 94 1d 24 	call	0x483a	; 0x483a <emergencyShutdown>
			
				CalibrateLEDPort &= ~(1 << CalibrateLED);	//Make sure calibrate light is on
    1a0c:	82 e3       	ldi	r24, 0x32	; 50
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	22 e3       	ldi	r18, 0x32	; 50
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	f9 01       	movw	r30, r18
    1a16:	20 81       	ld	r18, Z
    1a18:	2f 7e       	andi	r18, 0xEF	; 239
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	20 83       	st	Z, r18
				ErrorLEDPort &= ~(1 << ErrorLED);			//Turn on Error LED
    1a1e:	82 e3       	ldi	r24, 0x32	; 50
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	22 e3       	ldi	r18, 0x32	; 50
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	f9 01       	movw	r30, r18
    1a28:	20 81       	ld	r18, Z
    1a2a:	2b 7f       	andi	r18, 0xFB	; 251
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	20 83       	st	Z, r18

				printf_P(PSTR("**ADCAlgorithm Error: %d**\n"), globalError);
    1a30:	80 91 6b 00 	lds	r24, 0x006B
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	84 ed       	ldi	r24, 0xD4	; 212
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	43 2f       	mov	r20, r19
    1a3e:	4f 93       	push	r20
    1a40:	2f 93       	push	r18
    1a42:	29 2f       	mov	r18, r25
    1a44:	2f 93       	push	r18
    1a46:	8f 93       	push	r24
    1a48:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
				#endif
				break;
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <masterThread+0x84c>
				puts_P(PSTR("**End Charge**\n"));
				var->state->mode = DoNothing;
				shutdown();
				break;
			case Done:
				break;
    1a56:	00 00       	nop

				printf_P(PSTR("**ADCAlgorithm Error: %d**\n"), globalError);
				#endif
				break;
		}
		PT_YIELD(&var->ptVar);
    1a58:	19 82       	std	Y+1, r1	; 0x01
    1a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5e:	2d e2       	ldi	r18, 0x2D	; 45
    1a60:	3d e0       	ldi	r19, 0x0D	; 13
    1a62:	fc 01       	movw	r30, r24
    1a64:	31 83       	std	Z+1, r19	; 0x01
    1a66:	20 83       	st	Z, r18
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	88 23       	and	r24, r24
    1a6c:	11 f4       	brne	.+4      	; 0x1a72 <masterThread+0x866>
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <masterThread+0x868>
	}	
    1a72:	fd cb       	rjmp	.-2054   	; 0x126e <masterThread+0x62>
	
	PT_END(&var->ptVar);
}
    1a74:	2a 96       	adiw	r28, 0x0a	; 10
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	08 95       	ret

00001a8e <activeBalanceMonitor>:
			}
			break;
*/
		
PT_THREAD(activeBalanceMonitor(struct pt* pt))
{
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	27 97       	sbiw	r28, 0x07	; 7
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	9f 83       	std	Y+7, r25	; 0x07
    1ab0:	8e 83       	std	Y+6, r24	; 0x06
	static double prevMaxResult = DBL_MIN;
	static double tempMaxResult;
	static int16_t balancerStackI;
	static double netStackI;
	
	PT_BEGIN(pt);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aba:	fc 01       	movw	r30, r24
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	49 f0       	breq	.+18     	; 0x1ad6 <activeBalanceMonitor+0x48>
    1ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac8:	fc 01       	movw	r30, r24
    1aca:	80 81       	ld	r24, Z
    1acc:	91 81       	ldd	r25, Z+1	; 0x01
    1ace:	00 00       	nop
    1ad0:	8f 93       	push	r24
    1ad2:	9f 93       	push	r25
    1ad4:	08 95       	ret
	while(true)
	{
		switch(ActiveBalanceMode)
    1ad6:	80 91 ba 00 	lds	r24, 0x00BA
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <activeBalanceMonitor+0x58>
    1ae4:	51 c0       	rjmp	.+162    	; 0x1b88 <activeBalanceMonitor+0xfa>
    1ae6:	82 30       	cpi	r24, 0x02	; 2
    1ae8:	91 05       	cpc	r25, r1
    1aea:	24 f4       	brge	.+8      	; 0x1af4 <activeBalanceMonitor+0x66>
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <activeBalanceMonitor+0x64>
    1af0:	d2 c2       	rjmp	.+1444   	; 0x2096 <activeBalanceMonitor+0x608>
    1af2:	cb c2       	rjmp	.+1430   	; 0x208a <activeBalanceMonitor+0x5fc>
    1af4:	82 30       	cpi	r24, 0x02	; 2
    1af6:	91 05       	cpc	r25, r1
    1af8:	21 f0       	breq	.+8      	; 0x1b02 <activeBalanceMonitor+0x74>
    1afa:	83 30       	cpi	r24, 0x03	; 3
    1afc:	91 05       	cpc	r25, r1
    1afe:	59 f0       	breq	.+22     	; 0x1b16 <activeBalanceMonitor+0x88>
    1b00:	c4 c2       	rjmp	.+1416   	; 0x208a <activeBalanceMonitor+0x5fc>
		{
			case ActiveBalanceOff:
				break;
			case ActiveBalanceEnd:
				balanceMode = normalDisch;
    1b02:	10 92 23 01 	sts	0x0123, r1
				ActiveBalanceMode = ActiveBalanceOff;
    1b06:	10 92 ba 00 	sts	0x00BA, r1
				logMode &= ~logPWMThresh;
    1b0a:	80 91 84 00 	lds	r24, 0x0084
    1b0e:	8f 7d       	andi	r24, 0xDF	; 223
    1b10:	80 93 84 00 	sts	0x0084, r24
				break;
    1b14:	c1 c2       	rjmp	.+1410   	; 0x2098 <activeBalanceMonitor+0x60a>
			case ActiveBalanceBegin:
				calcIBDCHMult();	//calculates the constants
    1b16:	0e 94 84 12 	call	0x2508	; 0x2508 <calcIBDCHMult>
				puts_P(PSTR("**Multiplier constants: "));
    1b1a:	80 ef       	ldi	r24, 0xF0	; 240
    1b1c:	93 e0       	ldi	r25, 0x03	; 3
    1b1e:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				for(uint8_t i = 0; i < NumberOfCells; i++)
    1b22:	1a 82       	std	Y+2, r1	; 0x02
    1b24:	26 c0       	rjmp	.+76     	; 0x1b72 <activeBalanceMonitor+0xe4>
				{
					printf_P(PSTR("%"PRId32" "), BDCMult[i]);
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	88 2f       	mov	r24, r24
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	86 56       	subi	r24, 0x66	; 102
    1b36:	9e 4f       	sbci	r25, 0xFE	; 254
    1b38:	fc 01       	movw	r30, r24
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	a2 81       	ldd	r26, Z+2	; 0x02
    1b40:	b3 81       	ldd	r27, Z+3	; 0x03
    1b42:	29 e0       	ldi	r18, 0x09	; 9
    1b44:	34 e0       	ldi	r19, 0x04	; 4
    1b46:	4b 2f       	mov	r20, r27
    1b48:	4f 93       	push	r20
    1b4a:	4a 2f       	mov	r20, r26
    1b4c:	4f 93       	push	r20
    1b4e:	49 2f       	mov	r20, r25
    1b50:	4f 93       	push	r20
    1b52:	8f 93       	push	r24
    1b54:	83 2f       	mov	r24, r19
    1b56:	8f 93       	push	r24
    1b58:	82 2f       	mov	r24, r18
    1b5a:	8f 93       	push	r24
    1b5c:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
				logMode &= ~logPWMThresh;
				break;
			case ActiveBalanceBegin:
				calcIBDCHMult();	//calculates the constants
				puts_P(PSTR("**Multiplier constants: "));
				for(uint8_t i = 0; i < NumberOfCells; i++)
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	8f 5f       	subi	r24, 0xFF	; 255
    1b70:	8a 83       	std	Y+2, r24	; 0x02
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	8c 30       	cpi	r24, 0x0C	; 12
    1b76:	b8 f2       	brcs	.-82     	; 0x1b26 <activeBalanceMonitor+0x98>
				{
					printf_P(PSTR("%"PRId32" "), BDCMult[i]);
				}
				puts_P(PSTR("**\n"));
    1b78:	8e e0       	ldi	r24, 0x0E	; 14
    1b7a:	94 e0       	ldi	r25, 0x04	; 4
    1b7c:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
				
				ActiveBalanceMode = ActiveBalanceOn;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	80 93 ba 00 	sts	0x00BA, r24
				break;
    1b86:	88 c2       	rjmp	.+1296   	; 0x2098 <activeBalanceMonitor+0x60a>
			case ActiveBalanceOn:
				balanceMode = PWMDisch;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	80 93 23 01 	sts	0x0123, r24
				maxResult = DBL_MIN;
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a0 e8       	ldi	r26, 0x80	; 128
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	80 93 63 00 	sts	0x0063, r24
    1b9a:	90 93 64 00 	sts	0x0064, r25
    1b9e:	a0 93 65 00 	sts	0x0065, r26
    1ba2:	b0 93 66 00 	sts	0x0066, r27
				prevMaxResult = DBL_MAX;
    1ba6:	8f ef       	ldi	r24, 0xFF	; 255
    1ba8:	9f ef       	ldi	r25, 0xFF	; 255
    1baa:	af e7       	ldi	r26, 0x7F	; 127
    1bac:	bf e7       	ldi	r27, 0x7F	; 127
    1bae:	80 93 67 00 	sts	0x0067, r24
    1bb2:	90 93 68 00 	sts	0x0068, r25
    1bb6:	a0 93 69 00 	sts	0x0069, r26
    1bba:	b0 93 6a 00 	sts	0x006A, r27
				logMode |= logPWMThresh;
    1bbe:	80 91 84 00 	lds	r24, 0x0084
    1bc2:	80 62       	ori	r24, 0x20	; 32
    1bc4:	80 93 84 00 	sts	0x0084, r24
				logMode |= logStackI;
    1bc8:	80 91 84 00 	lds	r24, 0x0084
    1bcc:	88 60       	ori	r24, 0x08	; 8
    1bce:	80 93 84 00 	sts	0x0084, r24
				
				PT_WAIT_UNTIL(pt, NewISenseReadings & ISenseAlgoMonitor);
    1bd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd6:	29 ee       	ldi	r18, 0xE9	; 233
    1bd8:	3d e0       	ldi	r19, 0x0D	; 13
    1bda:	fc 01       	movw	r30, r24
    1bdc:	31 83       	std	Z+1, r19	; 0x01
    1bde:	20 83       	st	Z, r18
    1be0:	80 91 22 01 	lds	r24, 0x0122
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	80 72       	andi	r24, 0x20	; 32
    1bea:	99 27       	eor	r25, r25
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	11 f4       	brne	.+4      	; 0x1bf4 <activeBalanceMonitor+0x166>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	60 c2       	rjmp	.+1216   	; 0x20b4 <activeBalanceMonitor+0x626>
				NewISenseReadings &= ~ISenseAlgoMonitor;
    1bf4:	80 91 22 01 	lds	r24, 0x0122
    1bf8:	8f 7d       	andi	r24, 0xDF	; 223
    1bfa:	80 93 22 01 	sts	0x0122, r24
				}
				balancerStackI *= (BalancerCurrent/UINT8_MAX/CurrentTick);
				
				netStackI = ((double)(stackCurrent-balancerStackI))/CurrentTick;
				#else
				netStackI = ((double)stackCurrent)/CurrentTick;
    1bfe:	80 91 1b 01 	lds	r24, 0x011B
    1c02:	90 91 1c 01 	lds	r25, 0x011C
    1c06:	aa 27       	eor	r26, r26
    1c08:	97 fd       	sbrc	r25, 7
    1c0a:	a0 95       	com	r26
    1c0c:	ba 2f       	mov	r27, r26
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__floatsisf>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	43 e2       	ldi	r20, 0x23	; 35
    1c20:	53 e4       	ldi	r21, 0x43	; 67
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	80 93 df 00 	sts	0x00DF, r24
    1c32:	90 93 e0 00 	sts	0x00E0, r25
    1c36:	a0 93 e1 00 	sts	0x00E1, r26
    1c3a:	b0 93 e2 00 	sts	0x00E2, r27
				#endif
				maxResult = -DBL_MAX;
    1c3e:	8f ef       	ldi	r24, 0xFF	; 255
    1c40:	9f ef       	ldi	r25, 0xFF	; 255
    1c42:	af e7       	ldi	r26, 0x7F	; 127
    1c44:	bf ef       	ldi	r27, 0xFF	; 255
    1c46:	80 93 63 00 	sts	0x0063, r24
    1c4a:	90 93 64 00 	sts	0x0064, r25
    1c4e:	a0 93 65 00 	sts	0x0065, r26
    1c52:	b0 93 66 00 	sts	0x0066, r27
				//first find the largest discharge current
				#define fpTolerance 0.001
				
				for(uint8_t i = 0; i < NumberOfCells; i++)
    1c56:	1b 82       	std	Y+3, r1	; 0x03
    1c58:	71 c0       	rjmp	.+226    	; 0x1d3c <activeBalanceMonitor+0x2ae>
					//the equation here works like this:
					//First, we find the desired discharge current,
					//next, we find our what percentage of our discharge current that is
					//then scale so uint8_max = 100%
					//result = ((((double)ChargeI)*10000/BDCDivide[i])/BalancerCurrent)*UINT8_MAX;
					result = ((double)(netStackI * BDCMult[i]))/BDCMult[i];
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	88 2f       	mov	r24, r24
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	86 56       	subi	r24, 0x66	; 102
    1c6a:	9e 4f       	sbci	r25, 0xFE	; 254
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	80 81       	ld	r24, Z
    1c70:	91 81       	ldd	r25, Z+1	; 0x01
    1c72:	a2 81       	ldd	r26, Z+2	; 0x02
    1c74:	b3 81       	ldd	r27, Z+3	; 0x03
    1c76:	bc 01       	movw	r22, r24
    1c78:	cd 01       	movw	r24, r26
    1c7a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__floatsisf>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	20 91 df 00 	lds	r18, 0x00DF
    1c86:	30 91 e0 00 	lds	r19, 0x00E0
    1c8a:	40 91 e1 00 	lds	r20, 0x00E1
    1c8e:	50 91 e2 00 	lds	r21, 0x00E2
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	6c 01       	movw	r12, r24
    1ca0:	7d 01       	movw	r14, r26
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	86 56       	subi	r24, 0x66	; 102
    1cb2:	9e 4f       	sbci	r25, 0xFE	; 254
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	a2 81       	ldd	r26, Z+2	; 0x02
    1cbc:	b3 81       	ldd	r27, Z+3	; 0x03
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__floatsisf>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9c 01       	movw	r18, r24
    1ccc:	ad 01       	movw	r20, r26
    1cce:	c7 01       	movw	r24, r14
    1cd0:	b6 01       	movw	r22, r12
    1cd2:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	80 93 e3 00 	sts	0x00E3, r24
    1cde:	90 93 e4 00 	sts	0x00E4, r25
    1ce2:	a0 93 e5 00 	sts	0x00E5, r26
    1ce6:	b0 93 e6 00 	sts	0x00E6, r27

					
					
					if(result > maxResult)
    1cea:	80 91 e3 00 	lds	r24, 0x00E3
    1cee:	90 91 e4 00 	lds	r25, 0x00E4
    1cf2:	a0 91 e5 00 	lds	r26, 0x00E5
    1cf6:	b0 91 e6 00 	lds	r27, 0x00E6
    1cfa:	20 91 63 00 	lds	r18, 0x0063
    1cfe:	30 91 64 00 	lds	r19, 0x0064
    1d02:	40 91 65 00 	lds	r20, 0x0065
    1d06:	50 91 66 00 	lds	r21, 0x0066
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 d5 26 	call	0x4daa	; 0x4daa <__gesf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	84 f4       	brge	.+32     	; 0x1d36 <activeBalanceMonitor+0x2a8>
						maxResult = result;
    1d16:	80 91 e3 00 	lds	r24, 0x00E3
    1d1a:	90 91 e4 00 	lds	r25, 0x00E4
    1d1e:	a0 91 e5 00 	lds	r26, 0x00E5
    1d22:	b0 91 e6 00 	lds	r27, 0x00E6
    1d26:	80 93 63 00 	sts	0x0063, r24
    1d2a:	90 93 64 00 	sts	0x0064, r25
    1d2e:	a0 93 65 00 	sts	0x0065, r26
    1d32:	b0 93 66 00 	sts	0x0066, r27
				#endif
				maxResult = -DBL_MAX;
				//first find the largest discharge current
				#define fpTolerance 0.001
				
				for(uint8_t i = 0; i < NumberOfCells; i++)
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	8c 30       	cpi	r24, 0x0C	; 12
    1d40:	08 f4       	brcc	.+2      	; 0x1d44 <activeBalanceMonitor+0x2b6>
    1d42:	8b cf       	rjmp	.-234    	; 0x1c5a <activeBalanceMonitor+0x1cc>
					if(result > maxResult)
						maxResult = result;
				}
				
				//maxResult = DBL_MIN;
				prevMaxResult = DBL_MAX;
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	9f ef       	ldi	r25, 0xFF	; 255
    1d48:	af e7       	ldi	r26, 0x7F	; 127
    1d4a:	bf e7       	ldi	r27, 0x7F	; 127
    1d4c:	80 93 67 00 	sts	0x0067, r24
    1d50:	90 93 68 00 	sts	0x0068, r25
    1d54:	a0 93 69 00 	sts	0x0069, r26
    1d58:	b0 93 6a 00 	sts	0x006A, r27
				// I        = |  I - max | I      | (1-E) |* I_BDCH
				//   Bin,n    |-  s      \  Bin,n /      -|
				//
				// In the below code, result is I_bin,n and maxResult will be, once the code is done, max(I_bin,n)
				//also note that here, unlike in other parts of the code, I is in A, not ADC ticks
				while( fabs(prevMaxResult - maxResult) > fpTolerance )
    1d5c:	b7 c0       	rjmp	.+366    	; 0x1ecc <activeBalanceMonitor+0x43e>
				{
					prevMaxResult = maxResult;
    1d5e:	80 91 63 00 	lds	r24, 0x0063
    1d62:	90 91 64 00 	lds	r25, 0x0064
    1d66:	a0 91 65 00 	lds	r26, 0x0065
    1d6a:	b0 91 66 00 	lds	r27, 0x0066
    1d6e:	80 93 67 00 	sts	0x0067, r24
    1d72:	90 93 68 00 	sts	0x0068, r25
    1d76:	a0 93 69 00 	sts	0x0069, r26
    1d7a:	b0 93 6a 00 	sts	0x006A, r27
					tempMaxResult = -DBL_MAX;
    1d7e:	8f ef       	ldi	r24, 0xFF	; 255
    1d80:	9f ef       	ldi	r25, 0xFF	; 255
    1d82:	af e7       	ldi	r26, 0x7F	; 127
    1d84:	bf ef       	ldi	r27, 0xFF	; 255
    1d86:	80 93 e7 00 	sts	0x00E7, r24
    1d8a:	90 93 e8 00 	sts	0x00E8, r25
    1d8e:	a0 93 e9 00 	sts	0x00E9, r26
    1d92:	b0 93 ea 00 	sts	0x00EA, r27
					for(uint8_t i = 0; i < NumberOfCells; i++)
    1d96:	1c 82       	std	Y+4, r1	; 0x04
    1d98:	85 c0       	rjmp	.+266    	; 0x1ea4 <activeBalanceMonitor+0x416>
					{
						result = ((netStackI - (maxResult*(100-BalanceEff)/100.0))*BDCMult[i])/BDCDenom;
    1d9a:	c0 90 df 00 	lds	r12, 0x00DF
    1d9e:	d0 90 e0 00 	lds	r13, 0x00E0
    1da2:	e0 90 e1 00 	lds	r14, 0x00E1
    1da6:	f0 90 e2 00 	lds	r15, 0x00E2
    1daa:	80 91 63 00 	lds	r24, 0x0063
    1dae:	90 91 64 00 	lds	r25, 0x0064
    1db2:	a0 91 65 00 	lds	r26, 0x0065
    1db6:	b0 91 66 00 	lds	r27, 0x0066
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 ef       	ldi	r20, 0xF0	; 240
    1dc0:	51 e4       	ldi	r21, 0x41	; 65
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	48 ec       	ldi	r20, 0xC8	; 200
    1dd4:	52 e4       	ldi	r21, 0x42	; 66
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9c 01       	movw	r18, r24
    1de4:	ad 01       	movw	r20, r26
    1de6:	c7 01       	movw	r24, r14
    1de8:	b6 01       	movw	r22, r12
    1dea:	0e 94 cb 24 	call	0x4996	; 0x4996 <__subsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	6c 01       	movw	r12, r24
    1df4:	7d 01       	movw	r14, r26
    1df6:	8c 81       	ldd	r24, Y+4	; 0x04
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	86 56       	subi	r24, 0x66	; 102
    1e06:	9e 4f       	sbci	r25, 0xFE	; 254
    1e08:	fc 01       	movw	r30, r24
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	a2 81       	ldd	r26, Z+2	; 0x02
    1e10:	b3 81       	ldd	r27, Z+3	; 0x03
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__floatsisf>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9c 01       	movw	r18, r24
    1e20:	ad 01       	movw	r20, r26
    1e22:	c7 01       	movw	r24, r14
    1e24:	b6 01       	movw	r22, r12
    1e26:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e4       	ldi	r19, 0x40	; 64
    1e32:	4c e1       	ldi	r20, 0x1C	; 28
    1e34:	56 e4       	ldi	r21, 0x46	; 70
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	80 93 e3 00 	sts	0x00E3, r24
    1e46:	90 93 e4 00 	sts	0x00E4, r25
    1e4a:	a0 93 e5 00 	sts	0x00E5, r26
    1e4e:	b0 93 e6 00 	sts	0x00E6, r27
					
						if(result > tempMaxResult)
    1e52:	80 91 e3 00 	lds	r24, 0x00E3
    1e56:	90 91 e4 00 	lds	r25, 0x00E4
    1e5a:	a0 91 e5 00 	lds	r26, 0x00E5
    1e5e:	b0 91 e6 00 	lds	r27, 0x00E6
    1e62:	20 91 e7 00 	lds	r18, 0x00E7
    1e66:	30 91 e8 00 	lds	r19, 0x00E8
    1e6a:	40 91 e9 00 	lds	r20, 0x00E9
    1e6e:	50 91 ea 00 	lds	r21, 0x00EA
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	0e 94 d5 26 	call	0x4daa	; 0x4daa <__gesf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	84 f4       	brge	.+32     	; 0x1e9e <activeBalanceMonitor+0x410>
							tempMaxResult = result;
    1e7e:	80 91 e3 00 	lds	r24, 0x00E3
    1e82:	90 91 e4 00 	lds	r25, 0x00E4
    1e86:	a0 91 e5 00 	lds	r26, 0x00E5
    1e8a:	b0 91 e6 00 	lds	r27, 0x00E6
    1e8e:	80 93 e7 00 	sts	0x00E7, r24
    1e92:	90 93 e8 00 	sts	0x00E8, r25
    1e96:	a0 93 e9 00 	sts	0x00E9, r26
    1e9a:	b0 93 ea 00 	sts	0x00EA, r27
				//also note that here, unlike in other parts of the code, I is in A, not ADC ticks
				while( fabs(prevMaxResult - maxResult) > fpTolerance )
				{
					prevMaxResult = maxResult;
					tempMaxResult = -DBL_MAX;
					for(uint8_t i = 0; i < NumberOfCells; i++)
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	8f 5f       	subi	r24, 0xFF	; 255
    1ea2:	8c 83       	std	Y+4, r24	; 0x04
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	8c 30       	cpi	r24, 0x0C	; 12
    1ea8:	08 f4       	brcc	.+2      	; 0x1eac <activeBalanceMonitor+0x41e>
    1eaa:	77 cf       	rjmp	.-274    	; 0x1d9a <activeBalanceMonitor+0x30c>
						result = ((netStackI - (maxResult*(100-BalanceEff)/100.0))*BDCMult[i])/BDCDenom;
					
						if(result > tempMaxResult)
							tempMaxResult = result;
					}
					maxResult = tempMaxResult;
    1eac:	80 91 e7 00 	lds	r24, 0x00E7
    1eb0:	90 91 e8 00 	lds	r25, 0x00E8
    1eb4:	a0 91 e9 00 	lds	r26, 0x00E9
    1eb8:	b0 91 ea 00 	lds	r27, 0x00EA
    1ebc:	80 93 63 00 	sts	0x0063, r24
    1ec0:	90 93 64 00 	sts	0x0064, r25
    1ec4:	a0 93 65 00 	sts	0x0065, r26
    1ec8:	b0 93 66 00 	sts	0x0066, r27
				// I        = |  I - max | I      | (1-E) |* I_BDCH
				//   Bin,n    |-  s      \  Bin,n /      -|
				//
				// In the below code, result is I_bin,n and maxResult will be, once the code is done, max(I_bin,n)
				//also note that here, unlike in other parts of the code, I is in A, not ADC ticks
				while( fabs(prevMaxResult - maxResult) > fpTolerance )
    1ecc:	80 91 67 00 	lds	r24, 0x0067
    1ed0:	90 91 68 00 	lds	r25, 0x0068
    1ed4:	a0 91 69 00 	lds	r26, 0x0069
    1ed8:	b0 91 6a 00 	lds	r27, 0x006A
    1edc:	20 91 63 00 	lds	r18, 0x0063
    1ee0:	30 91 64 00 	lds	r19, 0x0064
    1ee4:	40 91 65 00 	lds	r20, 0x0065
    1ee8:	50 91 66 00 	lds	r21, 0x0066
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 cb 24 	call	0x4996	; 0x4996 <__subsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	bf 77       	andi	r27, 0x7F	; 127
    1efa:	2f e6       	ldi	r18, 0x6F	; 111
    1efc:	32 e1       	ldi	r19, 0x12	; 18
    1efe:	43 e8       	ldi	r20, 0x83	; 131
    1f00:	5a e3       	ldi	r21, 0x3A	; 58
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 d5 26 	call	0x4daa	; 0x4daa <__gesf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	0c f4       	brge	.+2      	; 0x1f10 <activeBalanceMonitor+0x482>
    1f0e:	27 cf       	rjmp	.-434    	; 0x1d5e <activeBalanceMonitor+0x2d0>
				// code elsewhere will take care of turning the balancers on and off as needed to achieve the necessary
				// fraction
				//
				// in the below code, result is I_Bin,n
				//also note that here, unlike other parts of the code, current is in A, not ADC ticks
				for(uint8_t i = 0; i < NumberOfCells; i++)
    1f10:	1d 82       	std	Y+5, r1	; 0x05
    1f12:	b6 c0       	rjmp	.+364    	; 0x2080 <activeBalanceMonitor+0x5f2>
				{
					result = ((netStackI - (maxResult*(100-BalanceEff)/100.0))*BDCMult[i])/BDCDenom;
    1f14:	c0 90 df 00 	lds	r12, 0x00DF
    1f18:	d0 90 e0 00 	lds	r13, 0x00E0
    1f1c:	e0 90 e1 00 	lds	r14, 0x00E1
    1f20:	f0 90 e2 00 	lds	r15, 0x00E2
    1f24:	80 91 63 00 	lds	r24, 0x0063
    1f28:	90 91 64 00 	lds	r25, 0x0064
    1f2c:	a0 91 65 00 	lds	r26, 0x0065
    1f30:	b0 91 66 00 	lds	r27, 0x0066
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 ef       	ldi	r20, 0xF0	; 240
    1f3a:	51 e4       	ldi	r21, 0x41	; 65
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	cd 01       	movw	r24, r26
    1f40:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	48 ec       	ldi	r20, 0xC8	; 200
    1f4e:	52 e4       	ldi	r21, 0x42	; 66
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	9c 01       	movw	r18, r24
    1f5e:	ad 01       	movw	r20, r26
    1f60:	c7 01       	movw	r24, r14
    1f62:	b6 01       	movw	r22, r12
    1f64:	0e 94 cb 24 	call	0x4996	; 0x4996 <__subsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	6c 01       	movw	r12, r24
    1f6e:	7d 01       	movw	r14, r26
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	86 56       	subi	r24, 0x66	; 102
    1f80:	9e 4f       	sbci	r25, 0xFE	; 254
    1f82:	fc 01       	movw	r30, r24
    1f84:	80 81       	ld	r24, Z
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
    1f88:	a2 81       	ldd	r26, Z+2	; 0x02
    1f8a:	b3 81       	ldd	r27, Z+3	; 0x03
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__floatsisf>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9c 01       	movw	r18, r24
    1f9a:	ad 01       	movw	r20, r26
    1f9c:	c7 01       	movw	r24, r14
    1f9e:	b6 01       	movw	r22, r12
    1fa0:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e4       	ldi	r19, 0x40	; 64
    1fac:	4c e1       	ldi	r20, 0x1C	; 28
    1fae:	56 e4       	ldi	r21, 0x46	; 70
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	80 93 e3 00 	sts	0x00E3, r24
    1fc0:	90 93 e4 00 	sts	0x00E4, r25
    1fc4:	a0 93 e5 00 	sts	0x00E5, r26
    1fc8:	b0 93 e6 00 	sts	0x00E6, r27
					//don't let balancers try to do positive current (or negative duty cycle)
					if(result > maxResult)
    1fcc:	80 91 e3 00 	lds	r24, 0x00E3
    1fd0:	90 91 e4 00 	lds	r25, 0x00E4
    1fd4:	a0 91 e5 00 	lds	r26, 0x00E5
    1fd8:	b0 91 e6 00 	lds	r27, 0x00E6
    1fdc:	20 91 63 00 	lds	r18, 0x0063
    1fe0:	30 91 64 00 	lds	r19, 0x0064
    1fe4:	40 91 65 00 	lds	r20, 0x0065
    1fe8:	50 91 66 00 	lds	r21, 0x0066
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 d5 26 	call	0x4daa	; 0x4daa <__gesf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	44 f4       	brge	.+16     	; 0x2008 <activeBalanceMonitor+0x57a>
					{
						balancePWMThresholds[i] = 0;
    1ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffa:	88 2f       	mov	r24, r24
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	80 55       	subi	r24, 0x50	; 80
    2000:	9d 4f       	sbci	r25, 0xFD	; 253
    2002:	fc 01       	movw	r30, r24
    2004:	10 82       	st	Z, r1
    2006:	39 c0       	rjmp	.+114    	; 0x207a <activeBalanceMonitor+0x5ec>
					} else {
						balancePWMThresholds[i] = (uint8_t)(((double)(-result+maxResult)/BalancerCurrent)*UINT8_MAX);
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	08 2f       	mov	r16, r24
    200c:	10 e0       	ldi	r17, 0x00	; 0
    200e:	80 91 63 00 	lds	r24, 0x0063
    2012:	90 91 64 00 	lds	r25, 0x0064
    2016:	a0 91 65 00 	lds	r26, 0x0065
    201a:	b0 91 66 00 	lds	r27, 0x0066
    201e:	20 91 e3 00 	lds	r18, 0x00E3
    2022:	30 91 e4 00 	lds	r19, 0x00E4
    2026:	40 91 e5 00 	lds	r20, 0x00E5
    202a:	50 91 e6 00 	lds	r21, 0x00E6
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 cb 24 	call	0x4996	; 0x4996 <__subsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	2e ef       	ldi	r18, 0xFE	; 254
    203c:	34 ed       	ldi	r19, 0xD4	; 212
    203e:	48 ef       	ldi	r20, 0xF8	; 248
    2040:	5e e3       	ldi	r21, 0x3E	; 62
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	4f e7       	ldi	r20, 0x7F	; 127
    2054:	53 e4       	ldi	r21, 0x43	; 67
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	28 2f       	mov	r18, r24
    2070:	c8 01       	movw	r24, r16
    2072:	80 55       	subi	r24, 0x50	; 80
    2074:	9d 4f       	sbci	r25, 0xFD	; 253
    2076:	fc 01       	movw	r30, r24
    2078:	20 83       	st	Z, r18
				// code elsewhere will take care of turning the balancers on and off as needed to achieve the necessary
				// fraction
				//
				// in the below code, result is I_Bin,n
				//also note that here, unlike other parts of the code, current is in A, not ADC ticks
				for(uint8_t i = 0; i < NumberOfCells; i++)
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	8f 5f       	subi	r24, 0xFF	; 255
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	8c 30       	cpi	r24, 0x0C	; 12
    2084:	08 f4       	brcc	.+2      	; 0x2088 <activeBalanceMonitor+0x5fa>
    2086:	46 cf       	rjmp	.-372    	; 0x1f14 <activeBalanceMonitor+0x486>
						balancePWMThresholds[i] = 0;
					} else {
						balancePWMThresholds[i] = (uint8_t)(((double)(-result+maxResult)/BalancerCurrent)*UINT8_MAX);
					}
				}
				break;
    2088:	07 c0       	rjmp	.+14     	; 0x2098 <activeBalanceMonitor+0x60a>
			default:
				globalError = ActiveBalanceNoSuchMode;
    208a:	81 e5       	ldi	r24, 0x51	; 81
    208c:	80 93 6b 00 	sts	0x006B, r24
				#ifndef IgnoreErrors
				emergencyShutdown();
    2090:	0e 94 1d 24 	call	0x483a	; 0x483a <emergencyShutdown>
				#else
				shutdown();
				#endif
				break;
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <activeBalanceMonitor+0x60a>
	while(true)
	{
		switch(ActiveBalanceMode)
		{
			case ActiveBalanceOff:
				break;
    2096:	00 00       	nop
				#else
				shutdown();
				#endif
				break;
		}
		PT_YIELD(pt);
    2098:	19 82       	std	Y+1, r1	; 0x01
    209a:	8e 81       	ldd	r24, Y+6	; 0x06
    209c:	9f 81       	ldd	r25, Y+7	; 0x07
    209e:	2d e4       	ldi	r18, 0x4D	; 77
    20a0:	30 e1       	ldi	r19, 0x10	; 16
    20a2:	fc 01       	movw	r30, r24
    20a4:	31 83       	std	Z+1, r19	; 0x01
    20a6:	20 83       	st	Z, r18
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	88 23       	and	r24, r24
    20ac:	11 f4       	brne	.+4      	; 0x20b2 <activeBalanceMonitor+0x624>
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <activeBalanceMonitor+0x626>
	}
    20b2:	11 cd       	rjmp	.-1502   	; 0x1ad6 <activeBalanceMonitor+0x48>
	
	PT_END(pt);
}
    20b4:	27 96       	adiw	r28, 0x07	; 7
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	ff 90       	pop	r15
    20ca:	ef 90       	pop	r14
    20cc:	df 90       	pop	r13
    20ce:	cf 90       	pop	r12
    20d0:	08 95       	ret

000020d2 <getOCV>:

//before calling this function, if accuracy is important, please make sure that 
//the voltage and current have been read recently
int16_t getOCV( CVRegPacket6802* voltages, uint8_t cell )
{
    20d2:	8f 92       	push	r8
    20d4:	9f 92       	push	r9
    20d6:	af 92       	push	r10
    20d8:	bf 92       	push	r11
    20da:	cf 92       	push	r12
    20dc:	df 92       	push	r13
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <getOCV+0x16>
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <getOCV+0x18>
    20ea:	1f 92       	push	r1
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	6d 83       	std	Y+5, r22	; 0x05
	//static uint32_t lastTime [NumberOfCells];

	int16_t OCV;
	
	OCV = voltageFromCVReg(voltages->reg.payload[0].bytes, cell);
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	02 96       	adiw	r24, 0x02	; 2
    20fc:	6d 81       	ldd	r22, Y+5	; 0x05
    20fe:	0e 94 51 14 	call	0x28a2	; 0x28a2 <voltageFromCVReg>
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
	/*  The equation that is implemented is 
	              /        /      1              \ \
	OCV_RC = R_1 | 1 - exp| - --------  \delta t | | * f_1,k
	              \        \   R_1 C_1           / /
	*/  
	OCV += (int16_t)(((double)R1[cell-1])/RScale*
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	88 2f       	mov	r24, r24
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	81 50       	subi	r24, 0x01	; 1
    2114:	9e 4f       	sbci	r25, 0xFE	; 254
    2116:	fc 01       	movw	r30, r24
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	cc 01       	movw	r24, r24
    211e:	a0 e0       	ldi	r26, 0x00	; 0
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__floatunsisf>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	48 ec       	ldi	r20, 0xC8	; 200
    2134:	52 e4       	ldi	r21, 0x42	; 66
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	6c 01       	movw	r12, r24
    2144:	7d 01       	movw	r14, r26
		(1.0-exp((-(double)(RScale*CScale))/
			(((double)R1[cell-1]*(double)C1[cell-1]))))*
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	81 50       	subi	r24, 0x01	; 1
    2154:	9e 4f       	sbci	r25, 0xFE	; 254
    2156:	fc 01       	movw	r30, r24
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	cc 01       	movw	r24, r24
    215e:	a0 e0       	ldi	r26, 0x00	; 0
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__floatunsisf>
    216a:	4b 01       	movw	r8, r22
    216c:	5c 01       	movw	r10, r24
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	88 2f       	mov	r24, r24
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	84 59       	subi	r24, 0x94	; 148
    217c:	9f 4f       	sbci	r25, 0xFF	; 255
    217e:	fc 01       	movw	r30, r24
    2180:	80 81       	ld	r24, Z
    2182:	91 81       	ldd	r25, Z+1	; 0x01
    2184:	cc 01       	movw	r24, r24
    2186:	a0 e0       	ldi	r26, 0x00	; 0
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__floatunsisf>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9c 01       	movw	r18, r24
    2198:	ad 01       	movw	r20, r26
    219a:	c5 01       	movw	r24, r10
    219c:	b4 01       	movw	r22, r8
    219e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
	              /        /      1              \ \
	OCV_RC = R_1 | 1 - exp| - --------  \delta t | | * f_1,k
	              \        \   R_1 C_1           / /
	*/  
	OCV += (int16_t)(((double)R1[cell-1])/RScale*
		(1.0-exp((-(double)(RScale*CScale))/
    21a6:	9c 01       	movw	r18, r24
    21a8:	ad 01       	movw	r20, r26
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	70 e4       	ldi	r23, 0x40	; 64
    21ae:	8c e1       	ldi	r24, 0x1C	; 28
    21b0:	96 ec       	ldi	r25, 0xC6	; 198
    21b2:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <exp>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9c 01       	movw	r18, r24
    21c8:	ad 01       	movw	r20, r26
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	80 e8       	ldi	r24, 0x80	; 128
    21d0:	9f e3       	ldi	r25, 0x3F	; 63
    21d2:	0e 94 cb 24 	call	0x4996	; 0x4996 <__subsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
	/*  The equation that is implemented is 
	              /        /      1              \ \
	OCV_RC = R_1 | 1 - exp| - --------  \delta t | | * f_1,k
	              \        \   R_1 C_1           / /
	*/  
	OCV += (int16_t)(((double)R1[cell-1])/RScale*
    21da:	9c 01       	movw	r18, r24
    21dc:	ad 01       	movw	r20, r26
    21de:	c7 01       	movw	r24, r14
    21e0:	b6 01       	movw	r22, r12
    21e2:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
		(1.0-exp((-(double)(RScale*CScale))/
			(((double)R1[cell-1]*(double)C1[cell-1]))))*
			R1I[cell-1]);
    21ea:	2d 81       	ldd	r18, Y+5	; 0x05
    21ec:	22 2f       	mov	r18, r18
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	21 50       	subi	r18, 0x01	; 1
    21f2:	31 09       	sbc	r19, r1
    21f4:	22 0f       	add	r18, r18
    21f6:	33 1f       	adc	r19, r19
    21f8:	22 0f       	add	r18, r18
    21fa:	33 1f       	adc	r19, r19
    21fc:	2a 5d       	subi	r18, 0xDA	; 218
    21fe:	3e 4f       	sbci	r19, 0xFE	; 254
    2200:	f9 01       	movw	r30, r18
    2202:	20 81       	ld	r18, Z
    2204:	31 81       	ldd	r19, Z+1	; 0x01
    2206:	42 81       	ldd	r20, Z+2	; 0x02
    2208:	53 81       	ldd	r21, Z+3	; 0x03
	OCV_RC = R_1 | 1 - exp| - --------  \delta t | | * f_1,k
	              \        \   R_1 C_1           / /
	*/  
	OCV += (int16_t)(((double)R1[cell-1])/RScale*
		(1.0-exp((-(double)(RScale*CScale))/
			(((double)R1[cell-1]*(double)C1[cell-1]))))*
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
	/*  The equation that is implemented is 
	              /        /      1              \ \
	OCV_RC = R_1 | 1 - exp| - --------  \delta t | | * f_1,k
	              \        \   R_1 C_1           / /
	*/  
	OCV += (int16_t)(((double)R1[cell-1])/RScale*
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <__fixsfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	29 81       	ldd	r18, Y+1	; 0x01
    2224:	3a 81       	ldd	r19, Y+2	; 0x02
    2226:	82 0f       	add	r24, r18
    2228:	93 1f       	adc	r25, r19
    222a:	9a 83       	std	Y+2, r25	; 0x02
    222c:	89 83       	std	Y+1, r24	; 0x01
			R1I[cell-1]);
	
	//lastTime[cell-1] = time;

	
	return OCV;
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	df 90       	pop	r13
    2246:	cf 90       	pop	r12
    2248:	bf 90       	pop	r11
    224a:	af 90       	pop	r10
    224c:	9f 90       	pop	r9
    224e:	8f 90       	pop	r8
    2250:	08 95       	ret

00002252 <updateOCV>:

PT_THREAD(updateOCV(struct pt* pt))
{
    2252:	cf 92       	push	r12
    2254:	df 92       	push	r13
    2256:	ef 92       	push	r14
    2258:	ff 92       	push	r15
    225a:	0f 93       	push	r16
    225c:	1f 93       	push	r17
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	00 d0       	rcall	.+0      	; 0x2264 <updateOCV+0x12>
    2264:	00 d0       	rcall	.+0      	; 0x2266 <updateOCV+0x14>
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	9c 83       	std	Y+4, r25	; 0x04
    226c:	8b 83       	std	Y+3, r24	; 0x03
	PT_BEGIN(pt);
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	fc 01       	movw	r30, r24
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	11 f0       	breq	.+4      	; 0x2284 <updateOCV+0x32>
    2280:	00 00       	nop
    2282:	d6 c0       	rjmp	.+428    	; 0x2430 <updateOCV+0x1de>
	initEEPROM();
    2284:	0e 94 4a 03 	call	0x694	; 0x694 <initEEPROM>
	while(true)
	{
		if(oneSecondPassed & secondOCVMask && NewISenseReadings & ISenseUpdateOCV)
    2288:	80 91 fc 01 	lds	r24, 0x01FC
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	88 70       	andi	r24, 0x08	; 8
    2292:	99 27       	eor	r25, r25
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	09 f4       	brne	.+2      	; 0x229a <updateOCV+0x48>
    2298:	ca c0       	rjmp	.+404    	; 0x242e <updateOCV+0x1dc>
    229a:	80 91 22 01 	lds	r24, 0x0122
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	80 71       	andi	r24, 0x10	; 16
    22a4:	99 27       	eor	r25, r25
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	09 f4       	brne	.+2      	; 0x22ac <updateOCV+0x5a>
    22aa:	c1 c0       	rjmp	.+386    	; 0x242e <updateOCV+0x1dc>
		{
			oneSecondPassed &= ~secondOCVMask;
    22ac:	80 91 fc 01 	lds	r24, 0x01FC
    22b0:	87 7f       	andi	r24, 0xF7	; 247
    22b2:	80 93 fc 01 	sts	0x01FC, r24
			NewISenseReadings &= ~ISenseUpdateOCV;
    22b6:	80 91 22 01 	lds	r24, 0x0122
    22ba:	8f 7e       	andi	r24, 0xEF	; 239
    22bc:	80 93 22 01 	sts	0x0122, r24
			
			for(uint8_t cell = 1; cell<=NumberOfCells; cell++)
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	8a 83       	std	Y+2, r24	; 0x02
    22c4:	b0 c0       	rjmp	.+352    	; 0x2426 <updateOCV+0x1d4>
				                    \   R_1 C_1          /
						
				  Units are the same as stackCurrent, so basically 1 x CurrentTick=1A
				*/

				R1I[cell-1] = exp((-(double)(RScale*CScale))/((double)(R1[cell-1]*C1[cell-1])))*
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	8c 01       	movw	r16, r24
    22ce:	01 50       	subi	r16, 0x01	; 1
    22d0:	11 09       	sbc	r17, r1
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	88 2f       	mov	r24, r24
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	81 50       	subi	r24, 0x01	; 1
    22e0:	9e 4f       	sbci	r25, 0xFE	; 254
    22e2:	fc 01       	movw	r30, r24
    22e4:	40 81       	ld	r20, Z
    22e6:	51 81       	ldd	r21, Z+1	; 0x01
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	84 59       	subi	r24, 0x94	; 148
    22f6:	9f 4f       	sbci	r25, 0xFF	; 255
    22f8:	fc 01       	movw	r30, r24
    22fa:	20 81       	ld	r18, Z
    22fc:	31 81       	ldd	r19, Z+1	; 0x01
    22fe:	42 9f       	mul	r20, r18
    2300:	c0 01       	movw	r24, r0
    2302:	43 9f       	mul	r20, r19
    2304:	90 0d       	add	r25, r0
    2306:	52 9f       	mul	r21, r18
    2308:	90 0d       	add	r25, r0
    230a:	11 24       	eor	r1, r1
    230c:	cc 01       	movw	r24, r24
    230e:	a0 e0       	ldi	r26, 0x00	; 0
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__floatunsisf>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9c 01       	movw	r18, r24
    2320:	ad 01       	movw	r20, r26
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	70 e4       	ldi	r23, 0x40	; 64
    2326:	8c e1       	ldi	r24, 0x1C	; 28
    2328:	96 ec       	ldi	r25, 0xC6	; 198
    232a:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <exp>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
						R1I[cell-1]+
    233e:	2a 81       	ldd	r18, Y+2	; 0x02
    2340:	22 2f       	mov	r18, r18
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	21 50       	subi	r18, 0x01	; 1
    2346:	31 09       	sbc	r19, r1
    2348:	22 0f       	add	r18, r18
    234a:	33 1f       	adc	r19, r19
    234c:	22 0f       	add	r18, r18
    234e:	33 1f       	adc	r19, r19
    2350:	2a 5d       	subi	r18, 0xDA	; 218
    2352:	3e 4f       	sbci	r19, 0xFE	; 254
    2354:	f9 01       	movw	r30, r18
    2356:	20 81       	ld	r18, Z
    2358:	31 81       	ldd	r19, Z+1	; 0x01
    235a:	42 81       	ldd	r20, Z+2	; 0x02
    235c:	53 81       	ldd	r21, Z+3	; 0x03
				                    \   R_1 C_1          /
						
				  Units are the same as stackCurrent, so basically 1 x CurrentTick=1A
				*/

				R1I[cell-1] = exp((-(double)(RScale*CScale))/((double)(R1[cell-1]*C1[cell-1])))*
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	6c 01       	movw	r12, r24
    236c:	7d 01       	movw	r14, r26
						R1I[cell-1]+
						(double)stackCurrent;
    236e:	80 91 1b 01 	lds	r24, 0x011B
    2372:	90 91 1c 01 	lds	r25, 0x011C
    2376:	aa 27       	eor	r26, r26
    2378:	97 fd       	sbrc	r25, 7
    237a:	a0 95       	com	r26
    237c:	ba 2f       	mov	r27, r26
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__floatsisf>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
						
				  Units are the same as stackCurrent, so basically 1 x CurrentTick=1A
				*/

				R1I[cell-1] = exp((-(double)(RScale*CScale))/((double)(R1[cell-1]*C1[cell-1])))*
						R1I[cell-1]+
    238a:	9c 01       	movw	r18, r24
    238c:	ad 01       	movw	r20, r26
    238e:	c7 01       	movw	r24, r14
    2390:	b6 01       	movw	r22, r12
    2392:	0e 94 cc 24 	call	0x4998	; 0x4998 <__addsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
				                    \   R_1 C_1          /
						
				  Units are the same as stackCurrent, so basically 1 x CurrentTick=1A
				*/

				R1I[cell-1] = exp((-(double)(RScale*CScale))/((double)(R1[cell-1]*C1[cell-1])))*
    239a:	98 01       	movw	r18, r16
    239c:	22 0f       	add	r18, r18
    239e:	33 1f       	adc	r19, r19
    23a0:	22 0f       	add	r18, r18
    23a2:	33 1f       	adc	r19, r19
    23a4:	2a 5d       	subi	r18, 0xDA	; 218
    23a6:	3e 4f       	sbci	r19, 0xFE	; 254
    23a8:	f9 01       	movw	r30, r18
    23aa:	80 83       	st	Z, r24
    23ac:	91 83       	std	Z+1, r25	; 0x01
    23ae:	a2 83       	std	Z+2, r26	; 0x02
    23b0:	b3 83       	std	Z+3, r27	; 0x03
						R1I[cell-1]+
						(double)stackCurrent;
				
				if(isSet(cell-1,DischargerStatus))
    23b2:	80 91 fd 01 	lds	r24, 0x01FD
    23b6:	90 91 fe 01 	lds	r25, 0x01FE
    23ba:	2a 81       	ldd	r18, Y+2	; 0x02
    23bc:	21 50       	subi	r18, 0x01	; 1
    23be:	bc 01       	movw	r22, r24
    23c0:	82 2f       	mov	r24, r18
    23c2:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <isSet>
    23c6:	88 23       	and	r24, r24
    23c8:	59 f1       	breq	.+86     	; 0x2420 <updateOCV+0x1ce>
				{
					R1I[cell-1] -= (double)(BalancerCurrent*CurrentTick);
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	88 2f       	mov	r24, r24
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	8c 01       	movw	r16, r24
    23d2:	01 50       	subi	r16, 0x01	; 1
    23d4:	11 09       	sbc	r17, r1
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	88 2f       	mov	r24, r24
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	8a 5d       	subi	r24, 0xDA	; 218
    23e8:	9e 4f       	sbci	r25, 0xFE	; 254
    23ea:	fc 01       	movw	r30, r24
    23ec:	80 81       	ld	r24, Z
    23ee:	91 81       	ldd	r25, Z+1	; 0x01
    23f0:	a2 81       	ldd	r26, Z+2	; 0x02
    23f2:	b3 81       	ldd	r27, Z+3	; 0x03
    23f4:	2e e9       	ldi	r18, 0x9E	; 158
    23f6:	3f e6       	ldi	r19, 0x6F	; 111
    23f8:	4e e9       	ldi	r20, 0x9E	; 158
    23fa:	52 e4       	ldi	r21, 0x42	; 66
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 cb 24 	call	0x4996	; 0x4996 <__subsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	98 01       	movw	r18, r16
    240a:	22 0f       	add	r18, r18
    240c:	33 1f       	adc	r19, r19
    240e:	22 0f       	add	r18, r18
    2410:	33 1f       	adc	r19, r19
    2412:	2a 5d       	subi	r18, 0xDA	; 218
    2414:	3e 4f       	sbci	r19, 0xFE	; 254
    2416:	f9 01       	movw	r30, r18
    2418:	80 83       	st	Z, r24
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	a2 83       	std	Z+2, r26	; 0x02
    241e:	b3 83       	std	Z+3, r27	; 0x03
		if(oneSecondPassed & secondOCVMask && NewISenseReadings & ISenseUpdateOCV)
		{
			oneSecondPassed &= ~secondOCVMask;
			NewISenseReadings &= ~ISenseUpdateOCV;
			
			for(uint8_t cell = 1; cell<=NumberOfCells; cell++)
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	8f 5f       	subi	r24, 0xFF	; 255
    2424:	8a 83       	std	Y+2, r24	; 0x02
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	8d 30       	cpi	r24, 0x0D	; 13
    242a:	08 f4       	brcc	.+2      	; 0x242e <updateOCV+0x1dc>
    242c:	4c cf       	rjmp	.-360    	; 0x22c6 <updateOCV+0x74>
					R1I[cell-1] -= (double)(BalancerCurrent*CurrentTick);
				}

			}
		}
		PT_YIELD(pt);
    242e:	19 82       	std	Y+1, r1	; 0x01
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	28 e1       	ldi	r18, 0x18	; 24
    2436:	32 e1       	ldi	r19, 0x12	; 18
    2438:	fc 01       	movw	r30, r24
    243a:	31 83       	std	Z+1, r19	; 0x01
    243c:	20 83       	st	Z, r18
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	88 23       	and	r24, r24
    2442:	11 f4       	brne	.+4      	; 0x2448 <updateOCV+0x1f6>
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	01 c0       	rjmp	.+2      	; 0x244a <updateOCV+0x1f8>
	}
    2448:	1f cf       	rjmp	.-450    	; 0x2288 <updateOCV+0x36>

	PT_END(pt);
}
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	0f 91       	pop	r16
    245a:	ff 90       	pop	r15
    245c:	ef 90       	pop	r14
    245e:	df 90       	pop	r13
    2460:	cf 90       	pop	r12
    2462:	08 95       	ret

00002464 <cellsBalanced>:

bool cellsBalanced(CVRegPacket6802* voltagePacket, uint8_t Tolerance)
{
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	2a 97       	sbiw	r28, 0x0a	; 10
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	99 87       	std	Y+9, r25	; 0x09
    247a:	88 87       	std	Y+8, r24	; 0x08
    247c:	6a 87       	std	Y+10, r22	; 0x0a
	int16_t minCell = INT16_MAX;
    247e:	8f ef       	ldi	r24, 0xFF	; 255
    2480:	9f e7       	ldi	r25, 0x7F	; 127
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01
	int16_t maxCell = 0;
    2486:	1c 82       	std	Y+4, r1	; 0x04
    2488:	1b 82       	std	Y+3, r1	; 0x03
	int16_t currentCell;
	
	for(uint8_t i = 1; i <= NumberOfCells; i++)
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	8d 83       	std	Y+5, r24	; 0x05
    248e:	21 c0       	rjmp	.+66     	; 0x24d2 <cellsBalanced+0x6e>
	{
		//currentCell = getOCV(voltagePacket, i);
		currentCell = voltageFromCVReg(voltagePacket->reg.payload[0].bytes, i);
    2490:	88 85       	ldd	r24, Y+8	; 0x08
    2492:	99 85       	ldd	r25, Y+9	; 0x09
    2494:	02 96       	adiw	r24, 0x02	; 2
    2496:	6d 81       	ldd	r22, Y+5	; 0x05
    2498:	0e 94 51 14 	call	0x28a2	; 0x28a2 <voltageFromCVReg>
    249c:	9f 83       	std	Y+7, r25	; 0x07
    249e:	8e 83       	std	Y+6, r24	; 0x06
		if(currentCell < minCell)
    24a0:	2e 81       	ldd	r18, Y+6	; 0x06
    24a2:	3f 81       	ldd	r19, Y+7	; 0x07
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	9a 81       	ldd	r25, Y+2	; 0x02
    24a8:	28 17       	cp	r18, r24
    24aa:	39 07       	cpc	r19, r25
    24ac:	24 f4       	brge	.+8      	; 0x24b6 <cellsBalanced+0x52>
			minCell = currentCell;
    24ae:	8e 81       	ldd	r24, Y+6	; 0x06
    24b0:	9f 81       	ldd	r25, Y+7	; 0x07
    24b2:	9a 83       	std	Y+2, r25	; 0x02
    24b4:	89 83       	std	Y+1, r24	; 0x01
		
		if(currentCell > maxCell)
    24b6:	2e 81       	ldd	r18, Y+6	; 0x06
    24b8:	3f 81       	ldd	r19, Y+7	; 0x07
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	82 17       	cp	r24, r18
    24c0:	93 07       	cpc	r25, r19
    24c2:	24 f4       	brge	.+8      	; 0x24cc <cellsBalanced+0x68>
			maxCell = currentCell;
    24c4:	8e 81       	ldd	r24, Y+6	; 0x06
    24c6:	9f 81       	ldd	r25, Y+7	; 0x07
    24c8:	9c 83       	std	Y+4, r25	; 0x04
    24ca:	8b 83       	std	Y+3, r24	; 0x03
{
	int16_t minCell = INT16_MAX;
	int16_t maxCell = 0;
	int16_t currentCell;
	
	for(uint8_t i = 1; i <= NumberOfCells; i++)
    24cc:	8d 81       	ldd	r24, Y+5	; 0x05
    24ce:	8f 5f       	subi	r24, 0xFF	; 255
    24d0:	8d 83       	std	Y+5, r24	; 0x05
    24d2:	8d 81       	ldd	r24, Y+5	; 0x05
    24d4:	8d 30       	cpi	r24, 0x0D	; 13
    24d6:	e0 f2       	brcs	.-72     	; 0x2490 <cellsBalanced+0x2c>
		
		if(currentCell > maxCell)
			maxCell = currentCell;
	}
	
	if((maxCell - minCell) > Tolerance)
    24d8:	2b 81       	ldd	r18, Y+3	; 0x03
    24da:	3c 81       	ldd	r19, Y+4	; 0x04
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	9a 81       	ldd	r25, Y+2	; 0x02
    24e0:	28 1b       	sub	r18, r24
    24e2:	39 0b       	sbc	r19, r25
    24e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24e6:	88 2f       	mov	r24, r24
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	82 17       	cp	r24, r18
    24ec:	93 07       	cpc	r25, r19
    24ee:	14 f4       	brge	.+4      	; 0x24f4 <cellsBalanced+0x90>
		return false;
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	01 c0       	rjmp	.+2      	; 0x24f6 <cellsBalanced+0x92>
	else
		return true;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
}
    24f6:	2a 96       	adiw	r28, 0x0a	; 10
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	08 95       	ret

00002508 <calcIBDCHMult>:

/*	Call this function to update the discharge multipliers.  It only needs to be called after updating the capacity measurements.
 *	
 */	
void calcIBDCHMult()
{
    2508:	cf 92       	push	r12
    250a:	df 92       	push	r13
    250c:	ef 92       	push	r14
    250e:	ff 92       	push	r15
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	ce 55       	subi	r28, 0x5E	; 94
    251e:	d1 09       	sbc	r29, r1
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
	uint32_t minQp = UINT32_MAX;
    252a:	8f ef       	ldi	r24, 0xFF	; 255
    252c:	9f ef       	ldi	r25, 0xFF	; 255
    252e:	dc 01       	movw	r26, r24
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	ab 83       	std	Y+3, r26	; 0x03
    2536:	bc 83       	std	Y+4, r27	; 0x04
	//       /_ n=i+1       /_ n=1
	//Qp = ----------------------------
	//            En + i - Ei

	int32_t sortCapacities [NumberOfCells];
	memcpy(sortCapacities, capacities, NumberOfCells*sizeof(int32_t));
    2538:	80 e3       	ldi	r24, 0x30	; 48
    253a:	ea ec       	ldi	r30, 0xCA	; 202
    253c:	f1 e0       	ldi	r31, 0x01	; 1
    253e:	de 01       	movw	r26, r28
    2540:	95 96       	adiw	r26, 0x25	; 37
    2542:	01 90       	ld	r0, Z+
    2544:	0d 92       	st	X+, r0
    2546:	8a 95       	dec	r24
    2548:	e1 f7       	brne	.-8      	; 0x2542 <calcIBDCHMult+0x3a>
	sortInt32(sortCapacities, NumberOfCells);
    254a:	ce 01       	movw	r24, r28
    254c:	85 96       	adiw	r24, 0x25	; 37
    254e:	6c e0       	ldi	r22, 0x0C	; 12
    2550:	0e 94 c9 22 	call	0x4592	; 0x4592 <sortInt32>
	uint32_t QpSub;
	uint32_t QpAdd;
	uint32_t Qp;
	
	//iterate through the possible values for i
	for(int i = 1; i <= NumberOfCells; i++)
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9a 8b       	std	Y+18, r25	; 0x12
    255a:	89 8b       	std	Y+17, r24	; 0x11
    255c:	bc c0       	rjmp	.+376    	; 0x26d6 <calcIBDCHMult+0x1ce>
	{
		QpSub=0;
    255e:	1d 82       	std	Y+5, r1	; 0x05
    2560:	1e 82       	std	Y+6, r1	; 0x06
    2562:	1f 82       	std	Y+7, r1	; 0x07
    2564:	18 86       	std	Y+8, r1	; 0x08
		QpAdd=0;
    2566:	19 86       	std	Y+9, r1	; 0x09
    2568:	1a 86       	std	Y+10, r1	; 0x0a
    256a:	1b 86       	std	Y+11, r1	; 0x0b
    256c:	1c 86       	std	Y+12, r1	; 0x0c
		//implement the equation for this i value
		for(int j = i+1-1; j < NumberOfCells; j++)
    256e:	89 89       	ldd	r24, Y+17	; 0x11
    2570:	9a 89       	ldd	r25, Y+18	; 0x12
    2572:	9c 8b       	std	Y+20, r25	; 0x14
    2574:	8b 8b       	std	Y+19, r24	; 0x13
    2576:	1e c0       	rjmp	.+60     	; 0x25b4 <calcIBDCHMult+0xac>
		{
			QpSub += capacities[j];
    2578:	8b 89       	ldd	r24, Y+19	; 0x13
    257a:	9c 89       	ldd	r25, Y+20	; 0x14
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	86 53       	subi	r24, 0x36	; 54
    2586:	9e 4f       	sbci	r25, 0xFE	; 254
    2588:	fc 01       	movw	r30, r24
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	a2 81       	ldd	r26, Z+2	; 0x02
    2590:	b3 81       	ldd	r27, Z+3	; 0x03
    2592:	2d 81       	ldd	r18, Y+5	; 0x05
    2594:	3e 81       	ldd	r19, Y+6	; 0x06
    2596:	4f 81       	ldd	r20, Y+7	; 0x07
    2598:	58 85       	ldd	r21, Y+8	; 0x08
    259a:	82 0f       	add	r24, r18
    259c:	93 1f       	adc	r25, r19
    259e:	a4 1f       	adc	r26, r20
    25a0:	b5 1f       	adc	r27, r21
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	af 83       	std	Y+7, r26	; 0x07
    25a8:	b8 87       	std	Y+8, r27	; 0x08
	for(int i = 1; i <= NumberOfCells; i++)
	{
		QpSub=0;
		QpAdd=0;
		//implement the equation for this i value
		for(int j = i+1-1; j < NumberOfCells; j++)
    25aa:	8b 89       	ldd	r24, Y+19	; 0x13
    25ac:	9c 89       	ldd	r25, Y+20	; 0x14
    25ae:	01 96       	adiw	r24, 0x01	; 1
    25b0:	9c 8b       	std	Y+20, r25	; 0x14
    25b2:	8b 8b       	std	Y+19, r24	; 0x13
    25b4:	8b 89       	ldd	r24, Y+19	; 0x13
    25b6:	9c 89       	ldd	r25, Y+20	; 0x14
    25b8:	8c 30       	cpi	r24, 0x0C	; 12
    25ba:	91 05       	cpc	r25, r1
    25bc:	ec f2       	brlt	.-70     	; 0x2578 <calcIBDCHMult+0x70>
		{
			QpSub += capacities[j];
		}
		for(int j = 0; j < i-1; j++)
    25be:	1e 8a       	std	Y+22, r1	; 0x16
    25c0:	1d 8a       	std	Y+21, r1	; 0x15
    25c2:	1e c0       	rjmp	.+60     	; 0x2600 <calcIBDCHMult+0xf8>
		{
			QpAdd += capacities[j];
    25c4:	8d 89       	ldd	r24, Y+21	; 0x15
    25c6:	9e 89       	ldd	r25, Y+22	; 0x16
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	86 53       	subi	r24, 0x36	; 54
    25d2:	9e 4f       	sbci	r25, 0xFE	; 254
    25d4:	fc 01       	movw	r30, r24
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	a2 81       	ldd	r26, Z+2	; 0x02
    25dc:	b3 81       	ldd	r27, Z+3	; 0x03
    25de:	29 85       	ldd	r18, Y+9	; 0x09
    25e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    25e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    25e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    25e6:	82 0f       	add	r24, r18
    25e8:	93 1f       	adc	r25, r19
    25ea:	a4 1f       	adc	r26, r20
    25ec:	b5 1f       	adc	r27, r21
    25ee:	89 87       	std	Y+9, r24	; 0x09
    25f0:	9a 87       	std	Y+10, r25	; 0x0a
    25f2:	ab 87       	std	Y+11, r26	; 0x0b
    25f4:	bc 87       	std	Y+12, r27	; 0x0c
		//implement the equation for this i value
		for(int j = i+1-1; j < NumberOfCells; j++)
		{
			QpSub += capacities[j];
		}
		for(int j = 0; j < i-1; j++)
    25f6:	8d 89       	ldd	r24, Y+21	; 0x15
    25f8:	9e 89       	ldd	r25, Y+22	; 0x16
    25fa:	01 96       	adiw	r24, 0x01	; 1
    25fc:	9e 8b       	std	Y+22, r25	; 0x16
    25fe:	8d 8b       	std	Y+21, r24	; 0x15
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	9c 01       	movw	r18, r24
    2606:	21 50       	subi	r18, 0x01	; 1
    2608:	31 09       	sbc	r19, r1
    260a:	8d 89       	ldd	r24, Y+21	; 0x15
    260c:	9e 89       	ldd	r25, Y+22	; 0x16
    260e:	82 17       	cp	r24, r18
    2610:	93 07       	cpc	r25, r19
    2612:	c4 f2       	brlt	.-80     	; 0x25c4 <calcIBDCHMult+0xbc>
		{
			QpAdd += capacities[j];
		}
		Qp = ((QpSub*BalanceEff)/100+QpAdd)/((NumberOfCells*BalanceEff)/100 + i - (i*BalanceEff)/100);
    2614:	2d 81       	ldd	r18, Y+5	; 0x05
    2616:	3e 81       	ldd	r19, Y+6	; 0x06
    2618:	4f 81       	ldd	r20, Y+7	; 0x07
    261a:	58 85       	ldd	r21, Y+8	; 0x08
    261c:	86 e4       	ldi	r24, 0x46	; 70
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	dc 01       	movw	r26, r24
    2622:	0e 94 38 28 	call	0x5070	; 0x5070 <__muluhisi3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	24 e6       	ldi	r18, 0x64	; 100
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	bc 01       	movw	r22, r24
    2634:	cd 01       	movw	r24, r26
    2636:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <__udivmodsi4>
    263a:	da 01       	movw	r26, r20
    263c:	c9 01       	movw	r24, r18
    263e:	9c 01       	movw	r18, r24
    2640:	ad 01       	movw	r20, r26
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	ab 85       	ldd	r26, Y+11	; 0x0b
    2648:	bc 85       	ldd	r27, Y+12	; 0x0c
    264a:	79 01       	movw	r14, r18
    264c:	8a 01       	movw	r16, r20
    264e:	e8 0e       	add	r14, r24
    2650:	f9 1e       	adc	r15, r25
    2652:	0a 1f       	adc	r16, r26
    2654:	1b 1f       	adc	r17, r27
    2656:	89 89       	ldd	r24, Y+17	; 0x11
    2658:	9a 89       	ldd	r25, Y+18	; 0x12
    265a:	9c 01       	movw	r18, r24
    265c:	28 5f       	subi	r18, 0xF8	; 248
    265e:	3f 4f       	sbci	r19, 0xFF	; 255
    2660:	49 89       	ldd	r20, Y+17	; 0x11
    2662:	5a 89       	ldd	r21, Y+18	; 0x12
    2664:	66 e4       	ldi	r22, 0x46	; 70
    2666:	64 9f       	mul	r22, r20
    2668:	c0 01       	movw	r24, r0
    266a:	65 9f       	mul	r22, r21
    266c:	90 0d       	add	r25, r0
    266e:	11 24       	eor	r1, r1
    2670:	44 e6       	ldi	r20, 0x64	; 100
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	ba 01       	movw	r22, r20
    2676:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <__divmodhi4>
    267a:	cb 01       	movw	r24, r22
    267c:	a9 01       	movw	r20, r18
    267e:	48 1b       	sub	r20, r24
    2680:	59 0b       	sbc	r21, r25
    2682:	ca 01       	movw	r24, r20
    2684:	9c 01       	movw	r18, r24
    2686:	44 27       	eor	r20, r20
    2688:	37 fd       	sbrc	r19, 7
    268a:	40 95       	com	r20
    268c:	54 2f       	mov	r21, r20
    268e:	c8 01       	movw	r24, r16
    2690:	b7 01       	movw	r22, r14
    2692:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <__udivmodsi4>
    2696:	da 01       	movw	r26, r20
    2698:	c9 01       	movw	r24, r18
    269a:	8d 87       	std	Y+13, r24	; 0x0d
    269c:	9e 87       	std	Y+14, r25	; 0x0e
    269e:	af 87       	std	Y+15, r26	; 0x0f
    26a0:	b8 8b       	std	Y+16, r27	; 0x10

		if(Qp < minQp)
    26a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    26a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    26a6:	4f 85       	ldd	r20, Y+15	; 0x0f
    26a8:	58 89       	ldd	r21, Y+16	; 0x10
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	9a 81       	ldd	r25, Y+2	; 0x02
    26ae:	ab 81       	ldd	r26, Y+3	; 0x03
    26b0:	bc 81       	ldd	r27, Y+4	; 0x04
    26b2:	28 17       	cp	r18, r24
    26b4:	39 07       	cpc	r19, r25
    26b6:	4a 07       	cpc	r20, r26
    26b8:	5b 07       	cpc	r21, r27
    26ba:	40 f4       	brcc	.+16     	; 0x26cc <calcIBDCHMult+0x1c4>
			minQp = Qp;
    26bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26be:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c0:	af 85       	ldd	r26, Y+15	; 0x0f
    26c2:	b8 89       	ldd	r27, Y+16	; 0x10
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	ab 83       	std	Y+3, r26	; 0x03
    26ca:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t QpSub;
	uint32_t QpAdd;
	uint32_t Qp;
	
	//iterate through the possible values for i
	for(int i = 1; i <= NumberOfCells; i++)
    26cc:	89 89       	ldd	r24, Y+17	; 0x11
    26ce:	9a 89       	ldd	r25, Y+18	; 0x12
    26d0:	01 96       	adiw	r24, 0x01	; 1
    26d2:	9a 8b       	std	Y+18, r25	; 0x12
    26d4:	89 8b       	std	Y+17, r24	; 0x11
    26d6:	89 89       	ldd	r24, Y+17	; 0x11
    26d8:	9a 89       	ldd	r25, Y+18	; 0x12
    26da:	8d 30       	cpi	r24, 0x0D	; 13
    26dc:	91 05       	cpc	r25, r1
    26de:	0c f4       	brge	.+2      	; 0x26e2 <calcIBDCHMult+0x1da>
    26e0:	3e cf       	rjmp	.-388    	; 0x255e <calcIBDCHMult+0x56>

		if(Qp < minQp)
			minQp = Qp;
	}
	
	double I_BDCHMult = 0;
    26e2:	1d 8e       	std	Y+29, r1	; 0x1d
    26e4:	1e 8e       	std	Y+30, r1	; 0x1e
    26e6:	1f 8e       	std	Y+31, r1	; 0x1f
    26e8:	18 a2       	std	Y+32, r1	; 0x20
	double I_BDCHPart = NumberOfCells;
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a0 e4       	ldi	r26, 0x40	; 64
    26f0:	b1 e4       	ldi	r27, 0x41	; 65
    26f2:	89 a3       	std	Y+33, r24	; 0x21
    26f4:	9a a3       	std	Y+34, r25	; 0x22
    26f6:	ab a3       	std	Y+35, r26	; 0x23
    26f8:	bc a3       	std	Y+36, r27	; 0x24
	int32_t QiSum = 0;
    26fa:	1f 8a       	std	Y+23, r1	; 0x17
    26fc:	18 8e       	std	Y+24, r1	; 0x18
    26fe:	19 8e       	std	Y+25, r1	; 0x19
    2700:	1a 8e       	std	Y+26, r1	; 0x1a
	// N - ---  \   Q_i
	//     Q_p  /   
	//         /__
	//         i=1
	
	for (uint8_t j = 0; j < NumberOfCells; j++)
    2702:	1b 8e       	std	Y+27, r1	; 0x1b
    2704:	1d c0       	rjmp	.+58     	; 0x2740 <calcIBDCHMult+0x238>
	{
		QiSum += capacities[j];
    2706:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2708:	88 2f       	mov	r24, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	86 53       	subi	r24, 0x36	; 54
    2716:	9e 4f       	sbci	r25, 0xFE	; 254
    2718:	fc 01       	movw	r30, r24
    271a:	80 81       	ld	r24, Z
    271c:	91 81       	ldd	r25, Z+1	; 0x01
    271e:	a2 81       	ldd	r26, Z+2	; 0x02
    2720:	b3 81       	ldd	r27, Z+3	; 0x03
    2722:	2f 89       	ldd	r18, Y+23	; 0x17
    2724:	38 8d       	ldd	r19, Y+24	; 0x18
    2726:	49 8d       	ldd	r20, Y+25	; 0x19
    2728:	5a 8d       	ldd	r21, Y+26	; 0x1a
    272a:	82 0f       	add	r24, r18
    272c:	93 1f       	adc	r25, r19
    272e:	a4 1f       	adc	r26, r20
    2730:	b5 1f       	adc	r27, r21
    2732:	8f 8b       	std	Y+23, r24	; 0x17
    2734:	98 8f       	std	Y+24, r25	; 0x18
    2736:	a9 8f       	std	Y+25, r26	; 0x19
    2738:	ba 8f       	std	Y+26, r27	; 0x1a
	// N - ---  \   Q_i
	//     Q_p  /   
	//         /__
	//         i=1
	
	for (uint8_t j = 0; j < NumberOfCells; j++)
    273a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273c:	8f 5f       	subi	r24, 0xFF	; 255
    273e:	8b 8f       	std	Y+27, r24	; 0x1b
    2740:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2742:	8c 30       	cpi	r24, 0x0C	; 12
    2744:	00 f3       	brcs	.-64     	; 0x2706 <calcIBDCHMult+0x1fe>
	{
		QiSum += capacities[j];
	}
	I_BDCHPart = QiSum;
    2746:	6f 89       	ldd	r22, Y+23	; 0x17
    2748:	78 8d       	ldd	r23, Y+24	; 0x18
    274a:	89 8d       	ldd	r24, Y+25	; 0x19
    274c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    274e:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__floatsisf>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	89 a3       	std	Y+33, r24	; 0x21
    2758:	9a a3       	std	Y+34, r25	; 0x22
    275a:	ab a3       	std	Y+35, r26	; 0x23
    275c:	bc a3       	std	Y+36, r27	; 0x24
	I_BDCHPart /= Qp;
    275e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2760:	7e 85       	ldd	r23, Y+14	; 0x0e
    2762:	8f 85       	ldd	r24, Y+15	; 0x0f
    2764:	98 89       	ldd	r25, Y+16	; 0x10
    2766:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__floatunsisf>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	9c 01       	movw	r18, r24
    2770:	ad 01       	movw	r20, r26
    2772:	69 a1       	ldd	r22, Y+33	; 0x21
    2774:	7a a1       	ldd	r23, Y+34	; 0x22
    2776:	8b a1       	ldd	r24, Y+35	; 0x23
    2778:	9c a1       	ldd	r25, Y+36	; 0x24
    277a:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	89 a3       	std	Y+33, r24	; 0x21
    2784:	9a a3       	std	Y+34, r25	; 0x22
    2786:	ab a3       	std	Y+35, r26	; 0x23
    2788:	bc a3       	std	Y+36, r27	; 0x24
			
	for(uint8_t i = 0; i< NumberOfCells; i++)
    278a:	1c 8e       	std	Y+28, r1	; 0x1c
    278c:	76 c0       	rjmp	.+236    	; 0x287a <calcIBDCHMult+0x372>
	{
		I_BDCHMult = -(double)(1-(double)capacities[i])/((double)Qp);
    278e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2790:	88 2f       	mov	r24, r24
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	86 53       	subi	r24, 0x36	; 54
    279e:	9e 4f       	sbci	r25, 0xFE	; 254
    27a0:	fc 01       	movw	r30, r24
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	a2 81       	ldd	r26, Z+2	; 0x02
    27a8:	b3 81       	ldd	r27, Z+3	; 0x03
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__floatsisf>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	9c 01       	movw	r18, r24
    27b8:	ad 01       	movw	r20, r26
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	80 e8       	ldi	r24, 0x80	; 128
    27c0:	9f e3       	ldi	r25, 0x3F	; 63
    27c2:	0e 94 cb 24 	call	0x4996	; 0x4996 <__subsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	6c 01       	movw	r12, r24
    27cc:	7d 01       	movw	r14, r26
    27ce:	f7 fa       	bst	r15, 7
    27d0:	f0 94       	com	r15
    27d2:	f7 f8       	bld	r15, 7
    27d4:	f0 94       	com	r15
    27d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    27d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    27da:	8f 85       	ldd	r24, Y+15	; 0x0f
    27dc:	98 89       	ldd	r25, Y+16	; 0x10
    27de:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__floatunsisf>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9c 01       	movw	r18, r24
    27e8:	ad 01       	movw	r20, r26
    27ea:	c7 01       	movw	r24, r14
    27ec:	b6 01       	movw	r22, r12
    27ee:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	8d 8f       	std	Y+29, r24	; 0x1d
    27f8:	9e 8f       	std	Y+30, r25	; 0x1e
    27fa:	af 8f       	std	Y+31, r26	; 0x1f
    27fc:	b8 a3       	std	Y+32, r27	; 0x20
						
						
		I_BDCHMult += ((double)BalanceEff)/((double)NumberOfCells*(double)(BalanceEff)-(double)NumberOfCells)*I_BDCHPart;
    27fe:	2d ed       	ldi	r18, 0xDD	; 221
    2800:	33 e2       	ldi	r19, 0x23	; 35
    2802:	4d ea       	ldi	r20, 0xAD	; 173
    2804:	5d e3       	ldi	r21, 0x3D	; 61
    2806:	69 a1       	ldd	r22, Y+33	; 0x21
    2808:	7a a1       	ldd	r23, Y+34	; 0x22
    280a:	8b a1       	ldd	r24, Y+35	; 0x23
    280c:	9c a1       	ldd	r25, Y+36	; 0x24
    280e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9c 01       	movw	r18, r24
    2818:	ad 01       	movw	r20, r26
    281a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    281c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    281e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2820:	98 a1       	ldd	r25, Y+32	; 0x20
    2822:	0e 94 cc 24 	call	0x4998	; 0x4998 <__addsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	8d 8f       	std	Y+29, r24	; 0x1d
    282c:	9e 8f       	std	Y+30, r25	; 0x1e
    282e:	af 8f       	std	Y+31, r26	; 0x1f
    2830:	b8 a3       	std	Y+32, r27	; 0x20
						
		BDCMult[i] = (int32_t)(I_BDCHMult*BDCDenom);
    2832:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2834:	08 2f       	mov	r16, r24
    2836:	10 e0       	ldi	r17, 0x00	; 0
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e4       	ldi	r19, 0x40	; 64
    283c:	4c e1       	ldi	r20, 0x1C	; 28
    283e:	56 e4       	ldi	r21, 0x46	; 70
    2840:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2842:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2844:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2846:	98 a1       	ldd	r25, Y+32	; 0x20
    2848:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <__fixsfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	98 01       	movw	r18, r16
    285e:	22 0f       	add	r18, r18
    2860:	33 1f       	adc	r19, r19
    2862:	22 0f       	add	r18, r18
    2864:	33 1f       	adc	r19, r19
    2866:	26 56       	subi	r18, 0x66	; 102
    2868:	3e 4f       	sbci	r19, 0xFE	; 254
    286a:	f9 01       	movw	r30, r18
    286c:	80 83       	st	Z, r24
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	a2 83       	std	Z+2, r26	; 0x02
    2872:	b3 83       	std	Z+3, r27	; 0x03
		QiSum += capacities[j];
	}
	I_BDCHPart = QiSum;
	I_BDCHPart /= Qp;
			
	for(uint8_t i = 0; i< NumberOfCells; i++)
    2874:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2876:	8f 5f       	subi	r24, 0xFF	; 255
    2878:	8c 8f       	std	Y+28, r24	; 0x1c
    287a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    287c:	8c 30       	cpi	r24, 0x0C	; 12
    287e:	08 f4       	brcc	.+2      	; 0x2882 <calcIBDCHMult+0x37a>
    2880:	86 cf       	rjmp	.-244    	; 0x278e <calcIBDCHMult+0x286>
		I_BDCHMult += ((double)BalanceEff)/((double)NumberOfCells*(double)(BalanceEff)-(double)NumberOfCells)*I_BDCHPart;
						
		BDCMult[i] = (int32_t)(I_BDCHMult*BDCDenom);
	}
	
}
    2882:	c2 5a       	subi	r28, 0xA2	; 162
    2884:	df 4f       	sbci	r29, 0xFF	; 255
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	1f 91       	pop	r17
    2896:	0f 91       	pop	r16
    2898:	ff 90       	pop	r15
    289a:	ef 90       	pop	r14
    289c:	df 90       	pop	r13
    289e:	cf 90       	pop	r12
    28a0:	08 95       	ret

000028a2 <voltageFromCVReg>:
// Qualifier:
// Parameter: CVRReg6802 * reg
// Parameter: uint8_t cell
//************************************
int16_t voltageFromCVReg(uint8_t* reg, uint8_t cell )
{
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	2a 97       	sbiw	r28, 0x0a	; 10
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	99 87       	std	Y+9, r25	; 0x09
    28b8:	88 87       	std	Y+8, r24	; 0x08
    28ba:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t lsbMask;
	uint8_t regIndex;
	
	uint16_t ADCCount;
	
	if( cell == 0 || cell > 12)	//invalid cell number
    28bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28be:	88 23       	and	r24, r24
    28c0:	19 f0       	breq	.+6      	; 0x28c8 <voltageFromCVReg+0x26>
    28c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28c4:	8d 30       	cpi	r24, 0x0D	; 13
    28c6:	18 f0       	brcs	.+6      	; 0x28ce <voltageFromCVReg+0x2c>
		return 0;
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	66 c0       	rjmp	.+204    	; 0x299a <voltageFromCVReg+0xf8>
		
	if(cell % 2 == 1)
    28ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    28d0:	81 70       	andi	r24, 0x01	; 1
    28d2:	88 23       	and	r24, r24
    28d4:	b1 f0       	breq	.+44     	; 0x2902 <voltageFromCVReg+0x60>
	{
		msbShiftValue = 8;
    28d6:	88 e0       	ldi	r24, 0x08	; 8
    28d8:	89 83       	std	Y+1, r24	; 0x01
		lsbShiftValue = 0;
    28da:	1a 82       	std	Y+2, r1	; 0x02
		lsbMask = 0xFF;
    28dc:	8f ef       	ldi	r24, 0xFF	; 255
    28de:	8c 83       	std	Y+4, r24	; 0x04
		msbMask = 0x0F;
    28e0:	8f e0       	ldi	r24, 0x0F	; 15
    28e2:	8b 83       	std	Y+3, r24	; 0x03
		//3		3		1		1
		//5		6		2		2
		//7		9		3		3
		//9		12		4		4
		//11	15		5		5
		regIndex = ((cell-1)/2)*3;
    28e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28e6:	88 2f       	mov	r24, r24
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	99 23       	and	r25, r25
    28ee:	0c f4       	brge	.+2      	; 0x28f2 <voltageFromCVReg+0x50>
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	95 95       	asr	r25
    28f4:	87 95       	ror	r24
    28f6:	98 2f       	mov	r25, r24
    28f8:	89 2f       	mov	r24, r25
    28fa:	88 0f       	add	r24, r24
    28fc:	89 0f       	add	r24, r25
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	17 c0       	rjmp	.+46     	; 0x2930 <voltageFromCVReg+0x8e>
	}		
	else
	{
		msbShiftValue = 4;
    2902:	84 e0       	ldi	r24, 0x04	; 4
    2904:	89 83       	std	Y+1, r24	; 0x01
		lsbShiftValue = 4;
    2906:	84 e0       	ldi	r24, 0x04	; 4
    2908:	8a 83       	std	Y+2, r24	; 0x02
		lsbMask = 0xF0;
    290a:	80 ef       	ldi	r24, 0xF0	; 240
    290c:	8c 83       	std	Y+4, r24	; 0x04
		msbMask = 0xFF;
    290e:	8f ef       	ldi	r24, 0xFF	; 255
    2910:	8b 83       	std	Y+3, r24	; 0x03
		//this index is the same as the other case, except we subtract one from
		//the cell number then add one at the end (since cell 2 starts at index 1, etc)
		regIndex = ((cell-2)/2)*3+1;
    2912:	8a 85       	ldd	r24, Y+10	; 0x0a
    2914:	88 2f       	mov	r24, r24
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	02 97       	sbiw	r24, 0x02	; 2
    291a:	99 23       	and	r25, r25
    291c:	0c f4       	brge	.+2      	; 0x2920 <voltageFromCVReg+0x7e>
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	95 95       	asr	r25
    2922:	87 95       	ror	r24
    2924:	98 2f       	mov	r25, r24
    2926:	89 2f       	mov	r24, r25
    2928:	88 0f       	add	r24, r24
    292a:	89 0f       	add	r24, r25
    292c:	8f 5f       	subi	r24, 0xFF	; 255
    292e:	8d 83       	std	Y+5, r24	; 0x05
	}		
	
	ADCCount = ((reg[regIndex] & lsbMask) >> lsbShiftValue) + ((reg[regIndex+1] & msbMask) << msbShiftValue);
    2930:	8d 81       	ldd	r24, Y+5	; 0x05
    2932:	88 2f       	mov	r24, r24
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	28 85       	ldd	r18, Y+8	; 0x08
    2938:	39 85       	ldd	r19, Y+9	; 0x09
    293a:	82 0f       	add	r24, r18
    293c:	93 1f       	adc	r25, r19
    293e:	fc 01       	movw	r30, r24
    2940:	90 81       	ld	r25, Z
    2942:	8c 81       	ldd	r24, Y+4	; 0x04
    2944:	89 23       	and	r24, r25
    2946:	88 2f       	mov	r24, r24
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	2a 81       	ldd	r18, Y+2	; 0x02
    294c:	33 27       	eor	r19, r19
    294e:	27 fd       	sbrc	r18, 7
    2950:	30 95       	com	r19
    2952:	ac 01       	movw	r20, r24
    2954:	02 c0       	rjmp	.+4      	; 0x295a <voltageFromCVReg+0xb8>
    2956:	55 95       	asr	r21
    2958:	47 95       	ror	r20
    295a:	2a 95       	dec	r18
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <voltageFromCVReg+0xb4>
    295e:	9a 01       	movw	r18, r20
    2960:	8d 81       	ldd	r24, Y+5	; 0x05
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	48 85       	ldd	r20, Y+8	; 0x08
    296a:	59 85       	ldd	r21, Y+9	; 0x09
    296c:	84 0f       	add	r24, r20
    296e:	95 1f       	adc	r25, r21
    2970:	fc 01       	movw	r30, r24
    2972:	90 81       	ld	r25, Z
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	89 23       	and	r24, r25
    2978:	88 2f       	mov	r24, r24
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	49 81       	ldd	r20, Y+1	; 0x01
    297e:	44 2f       	mov	r20, r20
    2980:	50 e0       	ldi	r21, 0x00	; 0
    2982:	04 2e       	mov	r0, r20
    2984:	02 c0       	rjmp	.+4      	; 0x298a <voltageFromCVReg+0xe8>
    2986:	88 0f       	add	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	0a 94       	dec	r0
    298c:	e2 f7       	brpl	.-8      	; 0x2986 <voltageFromCVReg+0xe4>
    298e:	82 0f       	add	r24, r18
    2990:	93 1f       	adc	r25, r19
    2992:	9f 83       	std	Y+7, r25	; 0x07
    2994:	8e 83       	std	Y+6, r24	; 0x06
	
	#ifdef LT6802
	return (int16_t)ADCCount;
    2996:	8e 81       	ldd	r24, Y+6	; 0x06
    2998:	9f 81       	ldd	r25, Y+7	; 0x07
	#else
	return (int16_t)ADCCount - 512;
	#endif
}
    299a:	2a 96       	adiw	r28, 0x0a	; 10
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	df 91       	pop	r29
    29a8:	cf 91       	pop	r28
    29aa:	08 95       	ret

000029ac <CRC86802>:
	//reg[regIndex] |= (voltage << lsbShiftValue) & lsbMask;
	//reg[regIndex+1] |= (voltage >> msbShiftValue ) & msbMask;
}

uint8_t CRC86802 (uint8_t* data, uint8_t length)
{
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	27 97       	sbiw	r28, 0x07	; 7
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	6f 83       	std	Y+7, r22	; 0x07
	//	 3				E3 + E2 + E1 + E7
	//	 2				E2 + E1 + E0 + E6
	//	 1				E1 + E0      + E6
	//	 0				E0			 + E6 + E7
	#ifdef LT6802
	uint8_t C=0x00;	//proper initial value for LT6802 (not explicitly specified by datasheet)
    29c6:	19 82       	std	Y+1, r1	; 0x01
	#else
	uint8_t C=0x41;	//initial value of 0x41 as specified by LT6803
	#endif
	
	uint8_t E;
	for (int i = 0; i < length; i++)
    29c8:	1b 82       	std	Y+3, r1	; 0x03
    29ca:	1a 82       	std	Y+2, r1	; 0x02
    29cc:	3a c0       	rjmp	.+116    	; 0x2a42 <CRC86802+0x96>
	{
		E=data[i]^C;
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	9b 81       	ldd	r25, Y+3	; 0x03
    29d2:	2d 81       	ldd	r18, Y+5	; 0x05
    29d4:	3e 81       	ldd	r19, Y+6	; 0x06
    29d6:	82 0f       	add	r24, r18
    29d8:	93 1f       	adc	r25, r19
    29da:	fc 01       	movw	r30, r24
    29dc:	90 81       	ld	r25, Z
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	89 27       	eor	r24, r25
    29e2:	8c 83       	std	Y+4, r24	; 0x04
		C=E ^ (E << 1) ^ (E << 2) ^ ((E >> 4) & 0x0C) ^ ((E >> 5) & 0x02) ^ ((E >> 6) & 0x01) ^ (E >> 7);
    29e4:	8c 81       	ldd	r24, Y+4	; 0x04
    29e6:	88 2f       	mov	r24, r24
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	98 2f       	mov	r25, r24
    29f0:	8c 81       	ldd	r24, Y+4	; 0x04
    29f2:	29 2f       	mov	r18, r25
    29f4:	28 27       	eor	r18, r24
    29f6:	8c 81       	ldd	r24, Y+4	; 0x04
    29f8:	88 2f       	mov	r24, r24
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	88 0f       	add	r24, r24
    29fe:	99 1f       	adc	r25, r25
    2a00:	88 0f       	add	r24, r24
    2a02:	99 1f       	adc	r25, r25
    2a04:	92 2f       	mov	r25, r18
    2a06:	98 27       	eor	r25, r24
    2a08:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0a:	82 95       	swap	r24
    2a0c:	8f 70       	andi	r24, 0x0F	; 15
    2a0e:	8c 70       	andi	r24, 0x0C	; 12
    2a10:	98 27       	eor	r25, r24
    2a12:	8c 81       	ldd	r24, Y+4	; 0x04
    2a14:	82 95       	swap	r24
    2a16:	86 95       	lsr	r24
    2a18:	87 70       	andi	r24, 0x07	; 7
    2a1a:	82 70       	andi	r24, 0x02	; 2
    2a1c:	98 27       	eor	r25, r24
    2a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a20:	82 95       	swap	r24
    2a22:	86 95       	lsr	r24
    2a24:	86 95       	lsr	r24
    2a26:	83 70       	andi	r24, 0x03	; 3
    2a28:	81 70       	andi	r24, 0x01	; 1
    2a2a:	98 27       	eor	r25, r24
    2a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2e:	88 1f       	adc	r24, r24
    2a30:	88 27       	eor	r24, r24
    2a32:	88 1f       	adc	r24, r24
    2a34:	89 27       	eor	r24, r25
    2a36:	89 83       	std	Y+1, r24	; 0x01
	#else
	uint8_t C=0x41;	//initial value of 0x41 as specified by LT6803
	#endif
	
	uint8_t E;
	for (int i = 0; i < length; i++)
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3c:	01 96       	adiw	r24, 0x01	; 1
    2a3e:	9b 83       	std	Y+3, r25	; 0x03
    2a40:	8a 83       	std	Y+2, r24	; 0x02
    2a42:	8f 81       	ldd	r24, Y+7	; 0x07
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4c:	82 17       	cp	r24, r18
    2a4e:	93 07       	cpc	r25, r19
    2a50:	0c f4       	brge	.+2      	; 0x2a54 <CRC86802+0xa8>
    2a52:	bd cf       	rjmp	.-134    	; 0x29ce <CRC86802+0x22>
	{
		E=data[i]^C;
		C=E ^ (E << 1) ^ (E << 2) ^ ((E >> 4) & 0x0C) ^ ((E >> 5) & 0x02) ^ ((E >> 6) & 0x01) ^ (E >> 7);
	}
	
	return C;
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	27 96       	adiw	r28, 0x07	; 7
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	f8 94       	cli
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	cd bf       	out	0x3d, r28	; 61
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	08 95       	ret

00002a68 <__vector_14>:

volatile SPIStatusStruct SPIStatus = {false, NULL, 0, 0, false};
volatile bool updateCFGReg=false;
uint8_t logMode = logRaw;

setupOutputDevice
    2a68:	1f 92       	push	r1
    2a6a:	0f 92       	push	r0
    2a6c:	00 90 5f 00 	lds	r0, 0x005F
    2a70:	0f 92       	push	r0
    2a72:	11 24       	eor	r1, r1
    2a74:	2f 93       	push	r18
    2a76:	3f 93       	push	r19
    2a78:	8f 93       	push	r24
    2a7a:	9f 93       	push	r25
    2a7c:	ef 93       	push	r30
    2a7e:	ff 93       	push	r31
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	1f 92       	push	r1
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	90 91 fb 01 	lds	r25, 0x01FB
    2a8e:	80 91 17 02 	lds	r24, 0x0217
    2a92:	98 17       	cp	r25, r24
    2a94:	a1 f0       	breq	.+40     	; 0x2abe <__vector_14+0x56>
    2a96:	80 91 17 02 	lds	r24, 0x0217
    2a9a:	8f 5f       	subi	r24, 0xFF	; 255
    2a9c:	8f 77       	andi	r24, 0x7F	; 127
    2a9e:	89 83       	std	Y+1, r24	; 0x01
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	80 93 17 02 	sts	0x0217, r24
    2aa6:	8c e2       	ldi	r24, 0x2C	; 44
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	29 81       	ldd	r18, Y+1	; 0x01
    2aac:	22 2f       	mov	r18, r18
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	20 5d       	subi	r18, 0xD0	; 208
    2ab2:	3d 4f       	sbci	r19, 0xFD	; 253
    2ab4:	f9 01       	movw	r30, r18
    2ab6:	20 81       	ld	r18, Z
    2ab8:	fc 01       	movw	r30, r24
    2aba:	20 83       	st	Z, r18
    2abc:	09 c0       	rjmp	.+18     	; 0x2ad0 <__vector_14+0x68>
    2abe:	8a e2       	ldi	r24, 0x2A	; 42
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	2a e2       	ldi	r18, 0x2A	; 42
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	f9 01       	movw	r30, r18
    2ac8:	20 81       	ld	r18, Z
    2aca:	2f 7d       	andi	r18, 0xDF	; 223
    2acc:	fc 01       	movw	r30, r24
    2ace:	20 83       	st	Z, r18
    2ad0:	0f 90       	pop	r0
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	ff 91       	pop	r31
    2ad8:	ef 91       	pop	r30
    2ada:	9f 91       	pop	r25
    2adc:	8f 91       	pop	r24
    2ade:	3f 91       	pop	r19
    2ae0:	2f 91       	pop	r18
    2ae2:	0f 90       	pop	r0
    2ae4:	00 92 5f 00 	sts	0x005F, r0
    2ae8:	0f 90       	pop	r0
    2aea:	1f 90       	pop	r1
    2aec:	18 95       	reti

00002aee <TransmitByte>:
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	00 d0       	rcall	.+0      	; 0x2af4 <TransmitByte+0x6>
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <TransmitByte+0x8>
    2af6:	cd b7       	in	r28, 0x3d	; 61
    2af8:	de b7       	in	r29, 0x3e	; 62
    2afa:	8a 83       	std	Y+2, r24	; 0x02
    2afc:	7c 83       	std	Y+4, r23	; 0x04
    2afe:	6b 83       	std	Y+3, r22	; 0x03
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	8a 30       	cpi	r24, 0x0A	; 10
    2b04:	31 f4       	brne	.+12     	; 0x2b12 <TransmitByte+0x24>
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	8d e0       	ldi	r24, 0x0D	; 13
    2b0e:	0e 94 77 15 	call	0x2aee	; 0x2aee <TransmitByte>
    2b12:	80 91 fb 01 	lds	r24, 0x01FB
    2b16:	8f 5f       	subi	r24, 0xFF	; 255
    2b18:	8f 77       	andi	r24, 0x7F	; 127
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	00 00       	nop
    2b1e:	80 91 17 02 	lds	r24, 0x0217
    2b22:	99 81       	ldd	r25, Y+1	; 0x01
    2b24:	98 17       	cp	r25, r24
    2b26:	d9 f3       	breq	.-10     	; 0x2b1e <TransmitByte+0x30>
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	88 2f       	mov	r24, r24
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	80 5d       	subi	r24, 0xD0	; 208
    2b30:	9d 4f       	sbci	r25, 0xFD	; 253
    2b32:	2a 81       	ldd	r18, Y+2	; 0x02
    2b34:	fc 01       	movw	r30, r24
    2b36:	20 83       	st	Z, r18
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	80 93 fb 01 	sts	0x01FB, r24
    2b3e:	8a e2       	ldi	r24, 0x2A	; 42
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	2a e2       	ldi	r18, 0x2A	; 42
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	f9 01       	movw	r30, r18
    2b48:	20 81       	ld	r18, Z
    2b4a:	20 62       	ori	r18, 0x20	; 32
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	20 83       	st	Z, r18
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	08 95       	ret

00002b62 <init>:

void init()
{
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <init+0x6>
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
	//initialize the SPI port
	
	//PB5 is MOSI, PB7 is SCK - these need to be outputs
	//PB4 is SS (also output)
	DDRB = (1 << PB4) | (1 << PB5) | (1 << PB7) | (1 << PB4) | (1 << DisableStackPin) | (1 << BalancerDisconnect) | (1 << TriggerPin);
    2b6c:	87 e3       	ldi	r24, 0x37	; 55
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	27 eb       	ldi	r18, 0xB7	; 183
    2b72:	fc 01       	movw	r30, r24
    2b74:	20 83       	st	Z, r18
	//enable SPI, setup as master
	//together this line and the next setup data comm at f_osc/8
	//also, enable SPI interrupts
	//SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPIE) | (1 << SPR0);
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPIE) | (1 << SPR1) | (1 << CPHA) | (1 << CPOL);
    2b76:	8d e2       	ldi	r24, 0x2D	; 45
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	2e ed       	ldi	r18, 0xDE	; 222
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	20 83       	st	Z, r18
	SPSR = (1 << SPI2X);
    2b80:	8e e2       	ldi	r24, 0x2E	; 46
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	21 e0       	ldi	r18, 0x01	; 1
    2b86:	fc 01       	movw	r30, r24
    2b88:	20 83       	st	Z, r18
	//start SS high
	PORTB |= (1 << PB4);
    2b8a:	88 e3       	ldi	r24, 0x38	; 56
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	28 e3       	ldi	r18, 0x38	; 56
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	f9 01       	movw	r30, r18
    2b94:	20 81       	ld	r18, Z
    2b96:	20 61       	ori	r18, 0x10	; 16
    2b98:	fc 01       	movw	r30, r24
    2b9a:	20 83       	st	Z, r18
	
	//setup timer counter 1
	//no need to touch waveform generation mode - default is Normal
	//setup clock to be clk/1024
	TCCR1B = (1 << CS12) | (1 << CS10);
    2b9c:	8e e4       	ldi	r24, 0x4E	; 78
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	25 e0       	ldi	r18, 0x05	; 5
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	20 83       	st	Z, r18
	//enable the timer overflow interrupt and output compare channel A ISR
	TIMSK = (1 << TOIE1) | (1 << OCIE1A) | (1 << OCIE1B);
    2ba6:	89 e5       	ldi	r24, 0x59	; 89
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	2c e1       	ldi	r18, 0x1C	; 28
    2bac:	fc 01       	movw	r30, r24
    2bae:	20 83       	st	Z, r18
	//TIMSK = (1 << OCIE1A) | (1 << OCIE1B);
	uint16_t time = TCNT1;
    2bb0:	8c e4       	ldi	r24, 0x4C	; 76
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	9a 83       	std	Y+2, r25	; 0x02
    2bbc:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = time + Timer1OneSecondOffset;
    2bbe:	8a e4       	ldi	r24, 0x4A	; 74
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	29 81       	ldd	r18, Y+1	; 0x01
    2bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    2bc6:	24 53       	subi	r18, 0x34	; 52
    2bc8:	30 4e       	sbci	r19, 0xE0	; 224
    2bca:	fc 01       	movw	r30, r24
    2bcc:	31 83       	std	Z+1, r19	; 0x01
    2bce:	20 83       	st	Z, r18
	
	//setup ADC
	//enable ADC, allow the ADC to run as fast as possible
	ADCSRA = (1 << ADEN);
    2bd0:	86 e2       	ldi	r24, 0x26	; 38
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	20 e8       	ldi	r18, 0x80	; 128
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	20 83       	st	Z, r18

	//enable conversion from internal 2.56V reference.  Use ADC0 for input (single ended)
	ADMUX=(1 << REFS1) | (1 << REFS0);
    2bda:	87 e2       	ldi	r24, 0x27	; 39
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	20 ec       	ldi	r18, 0xC0	; 192
    2be0:	fc 01       	movw	r30, r24
    2be2:	20 83       	st	Z, r18
	//don't touch SFIOR to allow free running mode
	
	//setup LED ports
	DDRD = (1 << ErrorLED) | (1 << BalanceLED) | (1 << CalibrateLED);
    2be4:	81 e3       	ldi	r24, 0x31	; 49
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	2c e1       	ldi	r18, 0x1C	; 28
    2bea:	fc 01       	movw	r30, r24
    2bec:	20 83       	st	Z, r18
	PORTD |= (1 << ErrorLED) | (1 << BalanceLED) | (1 << CalibrateLED);
    2bee:	82 e3       	ldi	r24, 0x32	; 50
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	22 e3       	ldi	r18, 0x32	; 50
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	f9 01       	movw	r30, r18
    2bf8:	20 81       	ld	r18, Z
    2bfa:	2c 61       	ori	r18, 0x1C	; 28
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	20 83       	st	Z, r18
	

	initializeOutputDevice
    2c00:	89 e2       	ldi	r24, 0x29	; 41
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	24 e3       	ldi	r18, 0x34	; 52
    2c06:	fc 01       	movw	r30, r24
    2c08:	20 83       	st	Z, r18
    2c0a:	8b e2       	ldi	r24, 0x2B	; 43
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	2b e2       	ldi	r18, 0x2B	; 43
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	f9 01       	movw	r30, r18
    2c14:	20 81       	ld	r18, Z
    2c16:	22 60       	ori	r18, 0x02	; 2
    2c18:	fc 01       	movw	r30, r24
    2c1a:	20 83       	st	Z, r18
    2c1c:	8a e2       	ldi	r24, 0x2A	; 42
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	2a e2       	ldi	r18, 0x2A	; 42
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	f9 01       	movw	r30, r18
    2c26:	20 81       	ld	r18, Z
    2c28:	28 60       	ori	r18, 0x08	; 8
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	20 83       	st	Z, r18
    2c2e:	10 92 17 02 	sts	0x0217, r1
    2c32:	10 92 fb 01 	sts	0x01FB, r1
    2c36:	78 94       	sei
    2c38:	85 e8       	ldi	r24, 0x85	; 133
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	90 93 bf 02 	sts	0x02BF, r25
    2c40:	80 93 be 02 	sts	0x02BE, r24
	
	sei();	//allow interrupts
    2c44:	78 94       	sei
}
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	08 95       	ret

00002c50 <main>:


int main(void)
{
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	af 97       	sbiw	r28, 0x2f	; 47
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
	#ifndef IgnoreErrors
	//watchdog stuff
	if(MCUCSR & (1<<WDRF))
    2c64:	84 e5       	ldi	r24, 0x54	; 84
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	fc 01       	movw	r30, r24
    2c6a:	80 81       	ld	r24, Z
    2c6c:	88 2f       	mov	r24, r24
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	88 70       	andi	r24, 0x08	; 8
    2c72:	99 27       	eor	r25, r25
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	61 f0       	breq	.+24     	; 0x2c90 <main+0x40>
	{
		//oops we got here because the watchdog bit
		init();
    2c78:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <init>
		emergencyShutdown();
    2c7c:	0e 94 1d 24 	call	0x483a	; 0x483a <emergencyShutdown>
		globalError = WatchdogBit;
    2c80:	8b e0       	ldi	r24, 0x0B	; 11
    2c82:	80 93 6b 00 	sts	0x006B, r24
		puts_P(PSTR("**Watchdog bit, stopping**\n"));
    2c86:	82 e1       	ldi	r24, 0x12	; 18
    2c88:	94 e0       	ldi	r25, 0x04	; 4
    2c8a:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
		while(true)
			;
    2c8e:	ff cf       	rjmp	.-2      	; 0x2c8e <main+0x3e>
	}
	#endif
	
	MCUCSR &= ~(1<<WDRF);
    2c90:	84 e5       	ldi	r24, 0x54	; 84
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	24 e5       	ldi	r18, 0x54	; 84
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	f9 01       	movw	r30, r18
    2c9a:	20 81       	ld	r18, Z
    2c9c:	27 7f       	andi	r18, 0xF7	; 247
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	20 83       	st	Z, r18
	wdt_disable();
    2ca2:	88 e1       	ldi	r24, 0x18	; 24
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	80 93 41 00 	sts	0x0041, r24
    2cac:	10 92 41 00 	sts	0x0041, r1
    2cb0:	0f be       	out	0x3f, r0	; 63
	
	//initialization
	init();
    2cb2:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <init>
	
	ErrorLEDPort &= ~(1 << ErrorLED);
    2cb6:	82 e3       	ldi	r24, 0x32	; 50
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	22 e3       	ldi	r18, 0x32	; 50
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	f9 01       	movw	r30, r18
    2cc0:	20 81       	ld	r18, Z
    2cc2:	2b 7f       	andi	r18, 0xFB	; 251
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	20 83       	st	Z, r18
	BalanceLEDPort &= ~(1 << BalanceLED);
    2cc8:	82 e3       	ldi	r24, 0x32	; 50
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	22 e3       	ldi	r18, 0x32	; 50
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	f9 01       	movw	r30, r18
    2cd2:	20 81       	ld	r18, Z
    2cd4:	27 7f       	andi	r18, 0xF7	; 247
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	20 83       	st	Z, r18
	CalibrateLEDPort &= ~(1 << CalibrateLED);
    2cda:	82 e3       	ldi	r24, 0x32	; 50
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	22 e3       	ldi	r18, 0x32	; 50
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	f9 01       	movw	r30, r18
    2ce4:	20 81       	ld	r18, Z
    2ce6:	2f 7e       	andi	r18, 0xEF	; 239
    2ce8:	fc 01       	movw	r30, r24
    2cea:	20 83       	st	Z, r18
	
	//enable stack current
	DisableStackPort |= (1 << DisableStackPin);
    2cec:	88 e3       	ldi	r24, 0x38	; 56
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	28 e3       	ldi	r18, 0x38	; 56
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	f9 01       	movw	r30, r18
    2cf6:	20 81       	ld	r18, Z
    2cf8:	21 60       	ori	r18, 0x01	; 1
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	20 83       	st	Z, r18
	BalancerDisconnectPort |= (1 << BalancerDisconnect);
    2cfe:	88 e3       	ldi	r24, 0x38	; 56
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	28 e3       	ldi	r18, 0x38	; 56
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	f9 01       	movw	r30, r18
    2d08:	20 81       	ld	r18, Z
    2d0a:	24 60       	ori	r18, 0x04	; 4
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	20 83       	st	Z, r18

	//start the first ADC conversion
	ADCSRA |= (1 << ADSC);
    2d10:	86 e2       	ldi	r24, 0x26	; 38
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	26 e2       	ldi	r18, 0x26	; 38
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	f9 01       	movw	r30, r18
    2d1a:	20 81       	ld	r18, Z
    2d1c:	20 64       	ori	r18, 0x40	; 64
    2d1e:	fc 01       	movw	r30, r24
    2d20:	20 83       	st	Z, r18
	
	//temporary - turn power supply on so we can start charging
	//set the power supply to 60V, and current to 0.5A
	//since we charge batteries, the supply should be current limited)
	//puts("<ps<P50.9VC0.5ARG>>\n");
	puts_P(PSTR("\n"));
    2d22:	8e e2       	ldi	r24, 0x2E	; 46
    2d24:	94 e0       	ldi	r25, 0x04	; 4
    2d26:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
	//state.mode = Test;
	//state.mode=FindCapacities;
	//state.mode=ChargeCells;
	//state.mode=ExtractParams;
	//state.mode=DoTopBalance;
	state.mode=ActiveBalanceChargeDischarge;
    2d2a:	88 e0       	ldi	r24, 0x08	; 8
    2d2c:	8e 8b       	std	Y+22, r24	; 0x16
	
	state.voltagePacket=&voltageRegisters;
    2d2e:	ce 01       	movw	r24, r28
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	99 8f       	std	Y+25, r25	; 0x19
    2d34:	88 8f       	std	Y+24, r24	; 0x18
	
	//setup thread variables
	threadVar algorithmThread;
	algorithmThread.state=&state;
    2d36:	ce 01       	movw	r24, r28
    2d38:	46 96       	adiw	r24, 0x16	; 22
    2d3a:	9d 8f       	std	Y+29, r25	; 0x1d
    2d3c:	8c 8f       	std	Y+28, r24	; 0x1c
	PT_INIT(&algorithmThread.ptVar);
    2d3e:	1b 8e       	std	Y+27, r1	; 0x1b
    2d40:	1a 8e       	std	Y+26, r1	; 0x1a
	
	logThreadVars logThread;
	logThread.voltageRegisters=&voltageRegisters;
    2d42:	ce 01       	movw	r24, r28
    2d44:	01 96       	adiw	r24, 0x01	; 1
    2d46:	99 a3       	std	Y+33, r25	; 0x21
    2d48:	88 a3       	std	Y+32, r24	; 0x20
	PT_INIT(&logThread.ptVar);
    2d4a:	1f 8e       	std	Y+31, r1	; 0x1f
    2d4c:	1e 8e       	std	Y+30, r1	; 0x1e
	
	commThreadVars comThread;
	comThread.voltageRegisters=&voltageRegisters;
    2d4e:	ce 01       	movw	r24, r28
    2d50:	01 96       	adiw	r24, 0x01	; 1
    2d52:	9d a3       	std	Y+37, r25	; 0x25
    2d54:	8c a3       	std	Y+36, r24	; 0x24
	PT_INIT(&comThread.ptVar);
    2d56:	1b a2       	std	Y+35, r1	; 0x23
    2d58:	1a a2       	std	Y+34, r1	; 0x22
	
	commThreadVars voltageCheckThread;
	voltageCheckThread.voltageRegisters=&voltageRegisters;
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	99 a7       	std	Y+41, r25	; 0x29
    2d60:	88 a7       	std	Y+40, r24	; 0x28
	PT_INIT(&voltageCheckThread.ptVar);
    2d62:	1f a2       	std	Y+39, r1	; 0x27
    2d64:	1e a2       	std	Y+38, r1	; 0x26
	
	struct pt stackCurrentThread;
	PT_INIT(&stackCurrentThread);
    2d66:	1b a6       	std	Y+43, r1	; 0x2b
    2d68:	1a a6       	std	Y+42, r1	; 0x2a
	
	struct pt updateOCVThread;
	PT_INIT(&updateOCVThread);
    2d6a:	1d a6       	std	Y+45, r1	; 0x2d
    2d6c:	1c a6       	std	Y+44, r1	; 0x2c
	
	struct pt balanceMonitorThread;
	PT_INIT(&balanceMonitorThread);
    2d6e:	1f a6       	std	Y+47, r1	; 0x2f
    2d70:	1e a6       	std	Y+46, r1	; 0x2e
	
	doneDischarging(state.voltagePacket, 25);
    2d72:	88 8d       	ldd	r24, Y+24	; 0x18
    2d74:	99 8d       	ldd	r25, Y+25	; 0x19
    2d76:	69 e1       	ldi	r22, 0x19	; 25
    2d78:	0e 94 b9 23 	call	0x4772	; 0x4772 <doneDischarging>
	
	while(time < 1)
    2d7c:	00 00       	nop
    2d7e:	80 91 1d 01 	lds	r24, 0x011D
    2d82:	90 91 1e 01 	lds	r25, 0x011E
    2d86:	a0 91 1f 01 	lds	r26, 0x011F
    2d8a:	b0 91 20 01 	lds	r27, 0x0120
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	a1 05       	cpc	r26, r1
    2d92:	b1 05       	cpc	r27, r1
    2d94:	a1 f3       	breq	.-24     	; 0x2d7e <main+0x12e>
		;
	
	wdt_reset();
    2d96:	a8 95       	wdr
	#ifndef IgnoreErrors
	wdt_enable(WDTO_1S);
    2d98:	88 e1       	ldi	r24, 0x18	; 24
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	2e e0       	ldi	r18, 0x0E	; 14
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	a8 95       	wdr
    2da4:	80 93 41 00 	sts	0x0041, r24
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	20 93 41 00 	sts	0x0041, r18
	#endif
	
	ErrorLEDPort |= (1 << ErrorLED);
    2dae:	82 e3       	ldi	r24, 0x32	; 50
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	22 e3       	ldi	r18, 0x32	; 50
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	f9 01       	movw	r30, r18
    2db8:	20 81       	ld	r18, Z
    2dba:	24 60       	ori	r18, 0x04	; 4
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	20 83       	st	Z, r18
	BalanceLEDPort |= (1 << BalanceLED);
    2dc0:	82 e3       	ldi	r24, 0x32	; 50
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	22 e3       	ldi	r18, 0x32	; 50
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	f9 01       	movw	r30, r18
    2dca:	20 81       	ld	r18, Z
    2dcc:	28 60       	ori	r18, 0x08	; 8
    2dce:	fc 01       	movw	r30, r24
    2dd0:	20 83       	st	Z, r18
	CalibrateLEDPort |= (1 << CalibrateLED);
    2dd2:	82 e3       	ldi	r24, 0x32	; 50
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	22 e3       	ldi	r18, 0x32	; 50
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	f9 01       	movw	r30, r18
    2ddc:	20 81       	ld	r18, Z
    2dde:	20 61       	ori	r18, 0x10	; 16
    2de0:	fc 01       	movw	r30, r24
    2de2:	20 83       	st	Z, r18
	
	puts_P(PSTR("**Init done.**\n"));
    2de4:	80 e3       	ldi	r24, 0x30	; 48
    2de6:	94 e0       	ldi	r25, 0x04	; 4
    2de8:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
	#endif
	
	
    while(1)
    {	 
		wdt_reset();
    2dec:	a8 95       	wdr

		//don't run the algorithm if we hit an error state - no point
		#ifndef IgnoreErrors
		if(globalError == NoError)
    2dee:	80 91 6b 00 	lds	r24, 0x006B
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	e9 f4       	brne	.+58     	; 0x2e30 <main+0x1e0>
		{
		#endif
			PT_SCHEDULE(LT6802CommThread(&comThread));
    2df6:	ce 01       	movw	r24, r28
    2df8:	82 96       	adiw	r24, 0x22	; 34
    2dfa:	0e 94 a4 19 	call	0x3348	; 0x3348 <LT6802CommThread>
			PT_SCHEDULE(SoftVoltageCheck(&voltageCheckThread));
    2dfe:	ce 01       	movw	r24, r28
    2e00:	86 96       	adiw	r24, 0x26	; 38
    2e02:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <SoftVoltageCheck>
			PT_SCHEDULE(ReadStackCurrent(&stackCurrentThread));
    2e06:	ce 01       	movw	r24, r28
    2e08:	8a 96       	adiw	r24, 0x2a	; 42
    2e0a:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <ReadStackCurrent>
			PT_SCHEDULE(updateOCV(&updateOCVThread));
    2e0e:	ce 01       	movw	r24, r28
    2e10:	8c 96       	adiw	r24, 0x2c	; 44
    2e12:	0e 94 29 11 	call	0x2252	; 0x2252 <updateOCV>
			PT_SCHEDULE(masterThread(&algorithmThread));
    2e16:	ce 01       	movw	r24, r28
    2e18:	4a 96       	adiw	r24, 0x1a	; 26
    2e1a:	0e 94 06 09 	call	0x120c	; 0x120c <masterThread>
			PT_SCHEDULE(activeBalanceMonitor(&balanceMonitorThread));
    2e1e:	ce 01       	movw	r24, r28
    2e20:	8e 96       	adiw	r24, 0x2e	; 46
    2e22:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <activeBalanceMonitor>
			PT_SCHEDULE(logData(&logThread));
    2e26:	ce 01       	movw	r24, r28
    2e28:	4e 96       	adiw	r24, 0x1e	; 30
    2e2a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <logData>
			PT_SCHEDULE(logData(&logThread));
			while(true)
				wdt_reset();	//we already caught the error - just keep resetting the watchdog
		}
		#endif
    }	//end main loop
    2e2e:	de cf       	rjmp	.-68     	; 0x2dec <main+0x19c>
			PT_SCHEDULE(masterThread(&algorithmThread));
			PT_SCHEDULE(activeBalanceMonitor(&balanceMonitorThread));
			PT_SCHEDULE(logData(&logThread));
		#ifndef IgnoreErrors
		} else {
			emergencyShutdown();
    2e30:	0e 94 1d 24 	call	0x483a	; 0x483a <emergencyShutdown>
			printf_P(PSTR("**Loop halted at %5"PRIu32": Error code: %d**\n"), time, globalError);
    2e34:	80 91 6b 00 	lds	r24, 0x006B
    2e38:	48 2f       	mov	r20, r24
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	80 91 1d 01 	lds	r24, 0x011D
    2e40:	90 91 1e 01 	lds	r25, 0x011E
    2e44:	a0 91 1f 01 	lds	r26, 0x011F
    2e48:	b0 91 20 01 	lds	r27, 0x0120
    2e4c:	20 e4       	ldi	r18, 0x40	; 64
    2e4e:	34 e0       	ldi	r19, 0x04	; 4
    2e50:	65 2f       	mov	r22, r21
    2e52:	6f 93       	push	r22
    2e54:	4f 93       	push	r20
    2e56:	4b 2f       	mov	r20, r27
    2e58:	4f 93       	push	r20
    2e5a:	4a 2f       	mov	r20, r26
    2e5c:	4f 93       	push	r20
    2e5e:	49 2f       	mov	r20, r25
    2e60:	4f 93       	push	r20
    2e62:	8f 93       	push	r24
    2e64:	83 2f       	mov	r24, r19
    2e66:	8f 93       	push	r24
    2e68:	82 2f       	mov	r24, r18
    2e6a:	8f 93       	push	r24
    2e6c:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    2e70:	8d b7       	in	r24, 0x3d	; 61
    2e72:	9e b7       	in	r25, 0x3e	; 62
    2e74:	08 96       	adiw	r24, 0x08	; 8
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	0f be       	out	0x3f, r0	; 63
    2e7e:	cd bf       	out	0x3d, r28	; 61
			puts_P(PSTR("**Exit**\n"));
    2e80:	89 e6       	ldi	r24, 0x69	; 105
    2e82:	94 e0       	ldi	r25, 0x04	; 4
    2e84:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
			NewADCReadings = 0xFF;
    2e88:	8f ef       	ldi	r24, 0xFF	; 255
    2e8a:	80 93 21 01 	sts	0x0121, r24
			PT_SCHEDULE(LT6802CommThread(&comThread));
    2e8e:	ce 01       	movw	r24, r28
    2e90:	82 96       	adiw	r24, 0x22	; 34
    2e92:	0e 94 a4 19 	call	0x3348	; 0x3348 <LT6802CommThread>
			NewADCReadings = 0xFF;
    2e96:	8f ef       	ldi	r24, 0xFF	; 255
    2e98:	80 93 21 01 	sts	0x0121, r24
			NewISenseReadings = 0xFF;
    2e9c:	8f ef       	ldi	r24, 0xFF	; 255
    2e9e:	80 93 22 01 	sts	0x0122, r24
			PT_SCHEDULE(logData(&logThread));
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	4e 96       	adiw	r24, 0x1e	; 30
    2ea6:	0e 94 9c 1b 	call	0x3738	; 0x3738 <logData>
			while(true)
				wdt_reset();	//we already caught the error - just keep resetting the watchdog
    2eaa:	a8 95       	wdr
    2eac:	fe cf       	rjmp	.-4      	; 0x2eaa <main+0x25a>

00002eae <__vector_12>:
    }	//end main loop
}


ISR(SPI_STC_vect)
{
    2eae:	1f 92       	push	r1
    2eb0:	0f 92       	push	r0
    2eb2:	00 90 5f 00 	lds	r0, 0x005F
    2eb6:	0f 92       	push	r0
    2eb8:	11 24       	eor	r1, r1
    2eba:	2f 93       	push	r18
    2ebc:	3f 93       	push	r19
    2ebe:	4f 93       	push	r20
    2ec0:	5f 93       	push	r21
    2ec2:	8f 93       	push	r24
    2ec4:	9f 93       	push	r25
    2ec6:	ef 93       	push	r30
    2ec8:	ff 93       	push	r31
    2eca:	cf 93       	push	r28
    2ecc:	df 93       	push	r29
    2ece:	1f 92       	push	r1
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
	//get the data we got back from the SPI transfer
	if(SPIStatus.readDataFromSPI)
    2ed4:	80 91 5d 01 	lds	r24, 0x015D
    2ed8:	88 23       	and	r24, r24
    2eda:	81 f0       	breq	.+32     	; 0x2efc <__vector_12+0x4e>
	{
		SPIStatus.Data[SPIStatus.currentByte]=SPDR;
    2edc:	20 91 57 01 	lds	r18, 0x0157
    2ee0:	30 91 58 01 	lds	r19, 0x0158
    2ee4:	80 91 5a 01 	lds	r24, 0x015A
    2ee8:	88 2f       	mov	r24, r24
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	82 0f       	add	r24, r18
    2eee:	93 1f       	adc	r25, r19
    2ef0:	2f e2       	ldi	r18, 0x2F	; 47
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	f9 01       	movw	r30, r18
    2ef6:	20 81       	ld	r18, Z
    2ef8:	fc 01       	movw	r30, r24
    2efa:	20 83       	st	Z, r18
	}
	SPIStatus.currentByte++;
    2efc:	80 91 5a 01 	lds	r24, 0x015A
    2f00:	8f 5f       	subi	r24, 0xFF	; 255
    2f02:	80 93 5a 01 	sts	0x015A, r24
	
	//if we've got stuff to send, send it
	//else, we're done - set SS low and set TransferInProgress to false
	if(SPIStatus.currentByte < SPIStatus.DataLength)
    2f06:	90 91 5a 01 	lds	r25, 0x015A
    2f0a:	80 91 59 01 	lds	r24, 0x0159
    2f0e:	98 17       	cp	r25, r24
    2f10:	88 f4       	brcc	.+34     	; 0x2f34 <__vector_12+0x86>
	{
		SPDR=SPIStatus.Data[SPIStatus.currentByte];
    2f12:	8f e2       	ldi	r24, 0x2F	; 47
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	40 91 57 01 	lds	r20, 0x0157
    2f1a:	50 91 58 01 	lds	r21, 0x0158
    2f1e:	20 91 5a 01 	lds	r18, 0x015A
    2f22:	22 2f       	mov	r18, r18
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	24 0f       	add	r18, r20
    2f28:	35 1f       	adc	r19, r21
    2f2a:	f9 01       	movw	r30, r18
    2f2c:	20 81       	ld	r18, Z
    2f2e:	fc 01       	movw	r30, r24
    2f30:	20 83       	st	Z, r18
    2f32:	23 c0       	rjmp	.+70     	; 0x2f7a <__vector_12+0xcc>
	} else {
		uint8_t PINBstatus = PINB;
    2f34:	86 e3       	ldi	r24, 0x36	; 54
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	fc 01       	movw	r30, r24
    2f3a:	80 81       	ld	r24, Z
    2f3c:	89 83       	std	Y+1, r24	; 0x01
		if(SPIStatus.readSDOStatusBeforeCS)
    2f3e:	80 91 5c 01 	lds	r24, 0x015C
    2f42:	88 23       	and	r24, r24
    2f44:	79 f0       	breq	.+30     	; 0x2f64 <__vector_12+0xb6>
		{
			SPIStatus.SDOStatus=((PINBstatus & (1 << PB6)) >> PB6);
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	88 2f       	mov	r24, r24
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	80 74       	andi	r24, 0x40	; 64
    2f4e:	99 27       	eor	r25, r25
    2f50:	08 2e       	mov	r0, r24
    2f52:	89 2f       	mov	r24, r25
    2f54:	00 0c       	add	r0, r0
    2f56:	88 1f       	adc	r24, r24
    2f58:	99 0b       	sbc	r25, r25
    2f5a:	00 0c       	add	r0, r0
    2f5c:	88 1f       	adc	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	80 93 5b 01 	sts	0x015B, r24
		}
		//disable SS
		PORTB |= (1 << PB4);
    2f64:	88 e3       	ldi	r24, 0x38	; 56
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	28 e3       	ldi	r18, 0x38	; 56
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	f9 01       	movw	r30, r18
    2f6e:	20 81       	ld	r18, Z
    2f70:	20 61       	ori	r18, 0x10	; 16
    2f72:	fc 01       	movw	r30, r24
    2f74:	20 83       	st	Z, r18
		SPIStatus.TransferInProgress=false;
    2f76:	10 92 56 01 	sts	0x0156, r1
	}
}
    2f7a:	0f 90       	pop	r0
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	ff 91       	pop	r31
    2f82:	ef 91       	pop	r30
    2f84:	9f 91       	pop	r25
    2f86:	8f 91       	pop	r24
    2f88:	5f 91       	pop	r21
    2f8a:	4f 91       	pop	r20
    2f8c:	3f 91       	pop	r19
    2f8e:	2f 91       	pop	r18
    2f90:	0f 90       	pop	r0
    2f92:	00 92 5f 00 	sts	0x005F, r0
    2f96:	0f 90       	pop	r0
    2f98:	1f 90       	pop	r1
    2f9a:	18 95       	reti

00002f9c <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
    2f9c:	1f 92       	push	r1
    2f9e:	0f 92       	push	r0
    2fa0:	00 90 5f 00 	lds	r0, 0x005F
    2fa4:	0f 92       	push	r0
    2fa6:	11 24       	eor	r1, r1
    2fa8:	2f 93       	push	r18
    2faa:	3f 93       	push	r19
    2fac:	4f 93       	push	r20
    2fae:	5f 93       	push	r21
    2fb0:	6f 93       	push	r22
    2fb2:	7f 93       	push	r23
    2fb4:	8f 93       	push	r24
    2fb6:	9f 93       	push	r25
    2fb8:	af 93       	push	r26
    2fba:	bf 93       	push	r27
    2fbc:	ef 93       	push	r30
    2fbe:	ff 93       	push	r31
    2fc0:	cf 93       	push	r28
    2fc2:	df 93       	push	r29
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <__vector_7+0x2a>
    2fc6:	1f 92       	push	r1
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
	//get the time for the interrupt, then set the compare
	//to 1 second from now
	uint16_t timer = TCNT1;
    2fcc:	8c e4       	ldi	r24, 0x4C	; 76
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	80 81       	ld	r24, Z
    2fd4:	91 81       	ldd	r25, Z+1	; 0x01
    2fd6:	9b 83       	std	Y+3, r25	; 0x03
    2fd8:	8a 83       	std	Y+2, r24	; 0x02
	OCR1A = timer + Timer1OneSecondOffset;
    2fda:	8a e4       	ldi	r24, 0x4A	; 74
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	2a 81       	ldd	r18, Y+2	; 0x02
    2fe0:	3b 81       	ldd	r19, Y+3	; 0x03
    2fe2:	24 53       	subi	r18, 0x34	; 52
    2fe4:	30 4e       	sbci	r19, 0xE0	; 224
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	31 83       	std	Z+1, r19	; 0x01
    2fea:	20 83       	st	Z, r18
	time++;
    2fec:	80 91 1d 01 	lds	r24, 0x011D
    2ff0:	90 91 1e 01 	lds	r25, 0x011E
    2ff4:	a0 91 1f 01 	lds	r26, 0x011F
    2ff8:	b0 91 20 01 	lds	r27, 0x0120
    2ffc:	01 96       	adiw	r24, 0x01	; 1
    2ffe:	a1 1d       	adc	r26, r1
    3000:	b1 1d       	adc	r27, r1
    3002:	80 93 1d 01 	sts	0x011D, r24
    3006:	90 93 1e 01 	sts	0x011E, r25
    300a:	a0 93 1f 01 	sts	0x011F, r26
    300e:	b0 93 20 01 	sts	0x0120, r27
	oneSecondPassed = 0xFF;
    3012:	8f ef       	ldi	r24, 0xFF	; 255
    3014:	80 93 fc 01 	sts	0x01FC, r24
	
	//accumulate current
	//we will measure capacity in ADC ticks * second
	//we have seconds because that's the period of this ISR
	for (uint8_t i = 0; i < NumberOfCells; i++)
    3018:	19 82       	std	Y+1, r1	; 0x01
    301a:	2c c0       	rjmp	.+88     	; 0x3074 <__vector_7+0xd8>
	{
		currentAccumulators[i] += stackCurrent;// add balancer current every second
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	68 2f       	mov	r22, r24
    3020:	70 e0       	ldi	r23, 0x00	; 0
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	88 0f       	add	r24, r24
    302a:	99 1f       	adc	r25, r25
    302c:	88 0f       	add	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	85 51       	subi	r24, 0x15	; 21
    3032:	9f 4f       	sbci	r25, 0xFF	; 255
    3034:	fc 01       	movw	r30, r24
    3036:	20 81       	ld	r18, Z
    3038:	31 81       	ldd	r19, Z+1	; 0x01
    303a:	42 81       	ldd	r20, Z+2	; 0x02
    303c:	53 81       	ldd	r21, Z+3	; 0x03
    303e:	80 91 1b 01 	lds	r24, 0x011B
    3042:	90 91 1c 01 	lds	r25, 0x011C
    3046:	aa 27       	eor	r26, r26
    3048:	97 fd       	sbrc	r25, 7
    304a:	a0 95       	com	r26
    304c:	ba 2f       	mov	r27, r26
    304e:	82 0f       	add	r24, r18
    3050:	93 1f       	adc	r25, r19
    3052:	a4 1f       	adc	r26, r20
    3054:	b5 1f       	adc	r27, r21
    3056:	9b 01       	movw	r18, r22
    3058:	22 0f       	add	r18, r18
    305a:	33 1f       	adc	r19, r19
    305c:	22 0f       	add	r18, r18
    305e:	33 1f       	adc	r19, r19
    3060:	25 51       	subi	r18, 0x15	; 21
    3062:	3f 4f       	sbci	r19, 0xFF	; 255
    3064:	f9 01       	movw	r30, r18
    3066:	80 83       	st	Z, r24
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	a2 83       	std	Z+2, r26	; 0x02
    306c:	b3 83       	std	Z+3, r27	; 0x03
	oneSecondPassed = 0xFF;
	
	//accumulate current
	//we will measure capacity in ADC ticks * second
	//we have seconds because that's the period of this ISR
	for (uint8_t i = 0; i < NumberOfCells; i++)
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	8f 5f       	subi	r24, 0xFF	; 255
    3072:	89 83       	std	Y+1, r24	; 0x01
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	8c 30       	cpi	r24, 0x0C	; 12
    3078:	88 f2       	brcs	.-94     	; 0x301c <__vector_7+0x80>
	{
		currentAccumulators[i] += stackCurrent;// add balancer current every second
	}		
}
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	ff 91       	pop	r31
    3086:	ef 91       	pop	r30
    3088:	bf 91       	pop	r27
    308a:	af 91       	pop	r26
    308c:	9f 91       	pop	r25
    308e:	8f 91       	pop	r24
    3090:	7f 91       	pop	r23
    3092:	6f 91       	pop	r22
    3094:	5f 91       	pop	r21
    3096:	4f 91       	pop	r20
    3098:	3f 91       	pop	r19
    309a:	2f 91       	pop	r18
    309c:	0f 90       	pop	r0
    309e:	00 92 5f 00 	sts	0x005F, r0
    30a2:	0f 90       	pop	r0
    30a4:	1f 90       	pop	r1
    30a6:	18 95       	reti

000030a8 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    30a8:	1f 92       	push	r1
    30aa:	0f 92       	push	r0
    30ac:	00 90 5f 00 	lds	r0, 0x005F
    30b0:	0f 92       	push	r0
    30b2:	11 24       	eor	r1, r1
    30b4:	cf 93       	push	r28
    30b6:	df 93       	push	r29
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
//	DischargerStatus = 0x0000;
//	updateCFGReg = true;
}
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	0f 90       	pop	r0
    30c2:	00 92 5f 00 	sts	0x005F, r0
    30c6:	0f 90       	pop	r0
    30c8:	1f 90       	pop	r1
    30ca:	18 95       	reti

000030cc <__vector_8>:



ISR(TIMER1_COMPB_vect)
{
    30cc:	1f 92       	push	r1
    30ce:	0f 92       	push	r0
    30d0:	00 90 5f 00 	lds	r0, 0x005F
    30d4:	0f 92       	push	r0
    30d6:	11 24       	eor	r1, r1
    30d8:	2f 93       	push	r18
    30da:	3f 93       	push	r19
    30dc:	4f 93       	push	r20
    30de:	5f 93       	push	r21
    30e0:	6f 93       	push	r22
    30e2:	7f 93       	push	r23
    30e4:	8f 93       	push	r24
    30e6:	9f 93       	push	r25
    30e8:	af 93       	push	r26
    30ea:	bf 93       	push	r27
    30ec:	ef 93       	push	r30
    30ee:	ff 93       	push	r31
    30f0:	cf 93       	push	r28
    30f2:	df 93       	push	r29
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
    30f8:	6e 97       	sbiw	r28, 0x1e	; 30
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	cd bf       	out	0x3d, r28	; 61
	  so,
	                 i_bal_i 
	  pwmCntMax_i = ---------- * uint8_max
	                 i_bal_min
	*/
	const uint16_t balLengths [NumberOfCells] = {(uint16_t)((minCount * Bal1I) / (minBalCurrent)),
    30fe:	88 e1       	ldi	r24, 0x18	; 24
    3100:	ea e9       	ldi	r30, 0x9A	; 154
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	de 01       	movw	r26, r28
    3106:	17 96       	adiw	r26, 0x07	; 7
    3108:	01 90       	ld	r0, Z+
    310a:	0d 92       	st	X+, r0
    310c:	8a 95       	dec	r24
    310e:	e1 f7       	brne	.-8      	; 0x3108 <__vector_8+0x3c>
												 (uint16_t)((minCount * Bal10I) / (minBalCurrent)),
												 (uint16_t)((minCount * Bal11I) / (minBalCurrent)),
												 (uint16_t)((minCount * Bal12I) / (minBalCurrent))};
		
	
	uint16_t timer = TCNT1;
    3110:	8c e4       	ldi	r24, 0x4C	; 76
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	fc 01       	movw	r30, r24
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	9e 83       	std	Y+6, r25	; 0x06
    311c:	8d 83       	std	Y+5, r24	; 0x05
	OCR1B = timer + HundredMSOffset;
    311e:	88 e4       	ldi	r24, 0x48	; 72
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	2d 81       	ldd	r18, Y+5	; 0x05
    3124:	3e 81       	ldd	r19, Y+6	; 0x06
    3126:	22 5d       	subi	r18, 0xD2	; 210
    3128:	3c 4f       	sbci	r19, 0xFC	; 252
    312a:	fc 01       	movw	r30, r24
    312c:	31 83       	std	Z+1, r19	; 0x01
    312e:	20 83       	st	Z, r18
	hundredMSPassed = 0xFF;
    3130:	8f ef       	ldi	r24, 0xFF	; 255
    3132:	80 93 fa 01 	sts	0x01FA, r24
	
		
	static uint16_t balancePWMCount[NumberOfCells] = {0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0};
		
	if(balanceMode == PWMDisch)
    3136:	80 91 23 01 	lds	r24, 0x0123
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	09 f0       	breq	.+2      	; 0x3140 <__vector_8+0x74>
    313e:	71 c0       	rjmp	.+226    	; 0x3222 <__vector_8+0x156>
	{	
		uint16_t status = 0x0000;
    3140:	1a 82       	std	Y+2, r1	; 0x02
    3142:	19 82       	std	Y+1, r1	; 0x01
		for(uint8_t i = 0; i < NumberOfCells; i++)
    3144:	1b 82       	std	Y+3, r1	; 0x03
    3146:	63 c0       	rjmp	.+198    	; 0x320e <__vector_8+0x142>
		{
			if(balancePWMCount[i] < balLengths[i])
    3148:	8b 81       	ldd	r24, Y+3	; 0x03
    314a:	88 2f       	mov	r24, r24
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	81 5a       	subi	r24, 0xA1	; 161
    3154:	9e 4f       	sbci	r25, 0xFE	; 254
    3156:	fc 01       	movw	r30, r24
    3158:	20 81       	ld	r18, Z
    315a:	31 81       	ldd	r19, Z+1	; 0x01
    315c:	8b 81       	ldd	r24, Y+3	; 0x03
    315e:	88 2f       	mov	r24, r24
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	88 0f       	add	r24, r24
    3164:	99 1f       	adc	r25, r25
    3166:	ae 01       	movw	r20, r28
    3168:	4f 5f       	subi	r20, 0xFF	; 255
    316a:	5f 4f       	sbci	r21, 0xFF	; 255
    316c:	84 0f       	add	r24, r20
    316e:	95 1f       	adc	r25, r21
    3170:	06 96       	adiw	r24, 0x06	; 6
    3172:	fc 01       	movw	r30, r24
    3174:	80 81       	ld	r24, Z
    3176:	91 81       	ldd	r25, Z+1	; 0x01
    3178:	28 17       	cp	r18, r24
    317a:	39 07       	cpc	r19, r25
    317c:	a8 f4       	brcc	.+42     	; 0x31a8 <__vector_8+0xdc>
				balancePWMCount[i]++;
    317e:	8b 81       	ldd	r24, Y+3	; 0x03
    3180:	88 2f       	mov	r24, r24
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9c 01       	movw	r18, r24
    3186:	22 0f       	add	r18, r18
    3188:	33 1f       	adc	r19, r19
    318a:	21 5a       	subi	r18, 0xA1	; 161
    318c:	3e 4f       	sbci	r19, 0xFE	; 254
    318e:	f9 01       	movw	r30, r18
    3190:	20 81       	ld	r18, Z
    3192:	31 81       	ldd	r19, Z+1	; 0x01
    3194:	2f 5f       	subi	r18, 0xFF	; 255
    3196:	3f 4f       	sbci	r19, 0xFF	; 255
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	81 5a       	subi	r24, 0xA1	; 161
    319e:	9e 4f       	sbci	r25, 0xFE	; 254
    31a0:	fc 01       	movw	r30, r24
    31a2:	31 83       	std	Z+1, r19	; 0x01
    31a4:	20 83       	st	Z, r18
    31a6:	0a c0       	rjmp	.+20     	; 0x31bc <__vector_8+0xf0>
			else
				balancePWMCount[i] = 0;
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	88 2f       	mov	r24, r24
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	88 0f       	add	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	81 5a       	subi	r24, 0xA1	; 161
    31b4:	9e 4f       	sbci	r25, 0xFE	; 254
    31b6:	fc 01       	movw	r30, r24
    31b8:	11 82       	std	Z+1, r1	; 0x01
    31ba:	10 82       	st	Z, r1
			
			if(balancePWMCount[i] < balancePWMThresholds[i])
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	88 2f       	mov	r24, r24
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	88 0f       	add	r24, r24
    31c4:	99 1f       	adc	r25, r25
    31c6:	81 5a       	subi	r24, 0xA1	; 161
    31c8:	9e 4f       	sbci	r25, 0xFE	; 254
    31ca:	fc 01       	movw	r30, r24
    31cc:	20 81       	ld	r18, Z
    31ce:	31 81       	ldd	r19, Z+1	; 0x01
    31d0:	8b 81       	ldd	r24, Y+3	; 0x03
    31d2:	88 2f       	mov	r24, r24
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	80 55       	subi	r24, 0x50	; 80
    31d8:	9d 4f       	sbci	r25, 0xFD	; 253
    31da:	fc 01       	movw	r30, r24
    31dc:	80 81       	ld	r24, Z
    31de:	88 2f       	mov	r24, r24
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	28 17       	cp	r18, r24
    31e4:	39 07       	cpc	r19, r25
    31e6:	80 f4       	brcc	.+32     	; 0x3208 <__vector_8+0x13c>
			{
				status |= (1 << i);
    31e8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ea:	28 2f       	mov	r18, r24
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <__vector_8+0x12c>
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	2a 95       	dec	r18
    31fa:	e2 f7       	brpl	.-8      	; 0x31f4 <__vector_8+0x128>
    31fc:	29 81       	ldd	r18, Y+1	; 0x01
    31fe:	3a 81       	ldd	r19, Y+2	; 0x02
    3200:	82 2b       	or	r24, r18
    3202:	93 2b       	or	r25, r19
    3204:	9a 83       	std	Y+2, r25	; 0x02
    3206:	89 83       	std	Y+1, r24	; 0x01
	static uint16_t balancePWMCount[NumberOfCells] = {0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0};
		
	if(balanceMode == PWMDisch)
	{	
		uint16_t status = 0x0000;
		for(uint8_t i = 0; i < NumberOfCells; i++)
    3208:	8b 81       	ldd	r24, Y+3	; 0x03
    320a:	8f 5f       	subi	r24, 0xFF	; 255
    320c:	8b 83       	std	Y+3, r24	; 0x03
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	8c 30       	cpi	r24, 0x0C	; 12
    3212:	08 f4       	brcc	.+2      	; 0x3216 <__vector_8+0x14a>
    3214:	99 cf       	rjmp	.-206    	; 0x3148 <__vector_8+0x7c>
			if(balancePWMCount[i] < balancePWMThresholds[i])
			{
				status |= (1 << i);
			}
		}
		DischargerStatus = status;
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	9a 81       	ldd	r25, Y+2	; 0x02
    321a:	90 93 fe 01 	sts	0x01FE, r25
    321e:	80 93 fd 01 	sts	0x01FD, r24
	}
	
	for(uint8_t i = 0; i < NumberOfCells; i++)
    3222:	1c 82       	std	Y+4, r1	; 0x04
    3224:	2c c0       	rjmp	.+88     	; 0x327e <__vector_8+0x1b2>
	{
		//divide by 10 because we update this 10x/second
		if(isSet(i, DischargerStatus))
    3226:	80 91 fd 01 	lds	r24, 0x01FD
    322a:	90 91 fe 01 	lds	r25, 0x01FE
    322e:	bc 01       	movw	r22, r24
    3230:	8c 81       	ldd	r24, Y+4	; 0x04
    3232:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <isSet>
    3236:	88 23       	and	r24, r24
    3238:	f9 f0       	breq	.+62     	; 0x3278 <__vector_8+0x1ac>
		{
			currentAccumulators[i] -= (int32_t)(BalancerCurrent*CurrentTick/10);
    323a:	8c 81       	ldd	r24, Y+4	; 0x04
    323c:	28 2f       	mov	r18, r24
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	8c 81       	ldd	r24, Y+4	; 0x04
    3242:	88 2f       	mov	r24, r24
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	88 0f       	add	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	88 0f       	add	r24, r24
    324c:	99 1f       	adc	r25, r25
    324e:	85 51       	subi	r24, 0x15	; 21
    3250:	9f 4f       	sbci	r25, 0xFF	; 255
    3252:	fc 01       	movw	r30, r24
    3254:	80 81       	ld	r24, Z
    3256:	91 81       	ldd	r25, Z+1	; 0x01
    3258:	a2 81       	ldd	r26, Z+2	; 0x02
    325a:	b3 81       	ldd	r27, Z+3	; 0x03
    325c:	07 97       	sbiw	r24, 0x07	; 7
    325e:	a1 09       	sbc	r26, r1
    3260:	b1 09       	sbc	r27, r1
    3262:	22 0f       	add	r18, r18
    3264:	33 1f       	adc	r19, r19
    3266:	22 0f       	add	r18, r18
    3268:	33 1f       	adc	r19, r19
    326a:	25 51       	subi	r18, 0x15	; 21
    326c:	3f 4f       	sbci	r19, 0xFF	; 255
    326e:	f9 01       	movw	r30, r18
    3270:	80 83       	st	Z, r24
    3272:	91 83       	std	Z+1, r25	; 0x01
    3274:	a2 83       	std	Z+2, r26	; 0x02
    3276:	b3 83       	std	Z+3, r27	; 0x03
			}
		}
		DischargerStatus = status;
	}
	
	for(uint8_t i = 0; i < NumberOfCells; i++)
    3278:	8c 81       	ldd	r24, Y+4	; 0x04
    327a:	8f 5f       	subi	r24, 0xFF	; 255
    327c:	8c 83       	std	Y+4, r24	; 0x04
    327e:	8c 81       	ldd	r24, Y+4	; 0x04
    3280:	8c 30       	cpi	r24, 0x0C	; 12
    3282:	88 f2       	brcs	.-94     	; 0x3226 <__vector_8+0x15a>
		if(isSet(i, DischargerStatus))
		{
			currentAccumulators[i] -= (int32_t)(BalancerCurrent*CurrentTick/10);
		}
	}		
}
    3284:	6e 96       	adiw	r28, 0x1e	; 30
    3286:	0f b6       	in	r0, 0x3f	; 63
    3288:	f8 94       	cli
    328a:	de bf       	out	0x3e, r29	; 62
    328c:	0f be       	out	0x3f, r0	; 63
    328e:	cd bf       	out	0x3d, r28	; 61
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	ff 91       	pop	r31
    3296:	ef 91       	pop	r30
    3298:	bf 91       	pop	r27
    329a:	af 91       	pop	r26
    329c:	9f 91       	pop	r25
    329e:	8f 91       	pop	r24
    32a0:	7f 91       	pop	r23
    32a2:	6f 91       	pop	r22
    32a4:	5f 91       	pop	r21
    32a6:	4f 91       	pop	r20
    32a8:	3f 91       	pop	r19
    32aa:	2f 91       	pop	r18
    32ac:	0f 90       	pop	r0
    32ae:	00 92 5f 00 	sts	0x005F, r0
    32b2:	0f 90       	pop	r0
    32b4:	1f 90       	pop	r1
    32b6:	18 95       	reti

000032b8 <startSPITransaction>:

void startSPITransaction (uint8_t* data, uint8_t size, uint8_t flags)
{
    32b8:	cf 93       	push	r28
    32ba:	df 93       	push	r29
    32bc:	00 d0       	rcall	.+0      	; 0x32be <startSPITransaction+0x6>
    32be:	00 d0       	rcall	.+0      	; 0x32c0 <startSPITransaction+0x8>
    32c0:	cd b7       	in	r28, 0x3d	; 61
    32c2:	de b7       	in	r29, 0x3e	; 62
    32c4:	9a 83       	std	Y+2, r25	; 0x02
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	6b 83       	std	Y+3, r22	; 0x03
    32ca:	4c 83       	std	Y+4, r20	; 0x04
	SPIStatus.Data = data;
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	9a 81       	ldd	r25, Y+2	; 0x02
    32d0:	90 93 58 01 	sts	0x0158, r25
    32d4:	80 93 57 01 	sts	0x0157, r24
	SPIStatus.DataLength = size;
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	80 93 59 01 	sts	0x0159, r24
	SPIStatus.SDOStatus = 0;
    32de:	10 92 5b 01 	sts	0x015B, r1
	SPIStatus.readSDOStatusBeforeCS = !((flags & SDOStatusBeforeCS)==0);
    32e2:	8c 81       	ldd	r24, Y+4	; 0x04
    32e4:	88 2f       	mov	r24, r24
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	81 70       	andi	r24, 0x01	; 1
    32ea:	99 27       	eor	r25, r25
    32ec:	21 e0       	ldi	r18, 0x01	; 1
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	09 f4       	brne	.+2      	; 0x32f4 <startSPITransaction+0x3c>
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	20 93 5c 01 	sts	0x015C, r18
	SPIStatus.TransferInProgress = true;
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	80 93 56 01 	sts	0x0156, r24
	SPIStatus.currentByte = 0;
    32fe:	10 92 5a 01 	sts	0x015A, r1
	SPIStatus.readDataFromSPI = !((flags & readFromSPI)==0);
    3302:	8c 81       	ldd	r24, Y+4	; 0x04
    3304:	88 2f       	mov	r24, r24
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	82 70       	andi	r24, 0x02	; 2
    330a:	99 27       	eor	r25, r25
    330c:	21 e0       	ldi	r18, 0x01	; 1
    330e:	00 97       	sbiw	r24, 0x00	; 0
    3310:	09 f4       	brne	.+2      	; 0x3314 <startSPITransaction+0x5c>
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	20 93 5d 01 	sts	0x015D, r18
	//enable SS
	PORTB &= ~(1 << PB4);
    3318:	88 e3       	ldi	r24, 0x38	; 56
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	28 e3       	ldi	r18, 0x38	; 56
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	f9 01       	movw	r30, r18
    3322:	20 81       	ld	r18, Z
    3324:	2f 7e       	andi	r18, 0xEF	; 239
    3326:	fc 01       	movw	r30, r24
    3328:	20 83       	st	Z, r18
	
	SPDR = data[0];
    332a:	8f e2       	ldi	r24, 0x2F	; 47
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	29 81       	ldd	r18, Y+1	; 0x01
    3330:	3a 81       	ldd	r19, Y+2	; 0x02
    3332:	f9 01       	movw	r30, r18
    3334:	20 81       	ld	r18, Z
    3336:	fc 01       	movw	r30, r24
    3338:	20 83       	st	Z, r18
}
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	08 95       	ret

00003348 <LT6802CommThread>:
	gotADCData,
	error
};

PT_THREAD(LT6802CommThread(commThreadVars* vars))
{
    3348:	ef 92       	push	r14
    334a:	ff 92       	push	r15
    334c:	0f 93       	push	r16
    334e:	1f 93       	push	r17
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	00 d0       	rcall	.+0      	; 0x3356 <LT6802CommThread+0xe>
    3356:	1f 92       	push	r1
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	9b 83       	std	Y+3, r25	; 0x03
    335e:	8a 83       	std	Y+2, r24	; 0x02
	static uint8_t hundredMSCount =0;
	static uint32_t ADCTimoutTime=0;
	
	
	
	PT_BEGIN(&vars->ptVar);
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	89 83       	std	Y+1, r24	; 0x01
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	9b 81       	ldd	r25, Y+3	; 0x03
    3368:	fc 01       	movw	r30, r24
    336a:	80 81       	ld	r24, Z
    336c:	91 81       	ldd	r25, Z+1	; 0x01
    336e:	00 97       	sbiw	r24, 0x00	; 0
    3370:	11 f0       	breq	.+4      	; 0x3376 <LT6802CommThread+0x2e>
    3372:	00 00       	nop
    3374:	ca c1       	rjmp	.+916    	; 0x370a <LT6802CommThread+0x3c2>

	configRegisters.packet.payload[0].reg.CFGR0=(1 << LVLPL) | (1 << CDC0);//(1 << CDC2) | (1 << CDC0);
    3376:	81 e1       	ldi	r24, 0x11	; 17
    3378:	80 93 78 01 	sts	0x0178, r24
	configRegisters.packet.payload[0].reg.CFGR1=0;
    337c:	10 92 79 01 	sts	0x0179, r1

	configRegisters.packet.payload[0].reg.CFGR2=((MaskedCells & 0x000F)<<4);
    3380:	10 92 7a 01 	sts	0x017A, r1
	//configRegisters.packet.payload[0].reg.CFGR2=0;	//don't mask interrupts
	//configRegisters.packet.payload[0].reg.CFGR3=0;	//don't mask interrupts
	configRegisters.packet.payload[0].reg.CFGR3=((MaskedCells & 0x0FF0)>>4);
    3384:	10 92 7b 01 	sts	0x017B, r1
	
	configRegisters.packet.payload[0].reg.VOV=(uint8_t)(alarmOV/16);
    3388:	80 ec       	ldi	r24, 0xC0	; 192
    338a:	80 93 7d 01 	sts	0x017D, r24
	//configRegisters.packet.payload[0].reg.VOV=0xFF;
	
	#ifndef AllowChargeOverDischargedCells
	configRegisters.packet.payload[0].reg.VUV=(uint8_t)(alarmUV/16);
    338e:	80 e7       	ldi	r24, 0x70	; 112
    3390:	80 93 7c 01 	sts	0x017C, r24
	#else
	configRegisters.packet.payload[0].reg.VUV=0x00;
	#endif

	//ok, we have the config register setup, now setup and begin the transfer
	configRegisters.packet.command = WRCFG;
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	80 93 77 01 	sts	0x0177, r24
	
	while(true)
	{
		if(!SPIStatus.TransferInProgress)
    339a:	80 91 56 01 	lds	r24, 0x0156
    339e:	88 23       	and	r24, r24
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <LT6802CommThread+0x5c>
    33a2:	b2 c1       	rjmp	.+868    	; 0x3708 <LT6802CommThread+0x3c0>
			//state 3: poll for data
			//state 4: poll for interrupt - send packet to get flag registers
			//state 5: check flag register, if all is well, get ADC data, if not, we are in error
			//state 6: we got the ADC data - notify the rest of the main loop we have new data, goto state 1
			//state 7: error state - send signal to stop charging/discharging, turn off balancers, set error light
			switch(LT6802State)
    33a4:	80 91 93 00 	lds	r24, 0x0093
    33a8:	88 2f       	mov	r24, r24
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	aa 27       	eor	r26, r26
    33ae:	97 fd       	sbrc	r25, 7
    33b0:	a0 95       	com	r26
    33b2:	ba 2f       	mov	r27, r26
    33b4:	41 e0       	ldi	r20, 0x01	; 1
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	27 e0       	ldi	r18, 0x07	; 7
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	84 1b       	sub	r24, r20
    33be:	95 0b       	sbc	r25, r21
    33c0:	28 17       	cp	r18, r24
    33c2:	39 07       	cpc	r19, r25
    33c4:	08 f4       	brcc	.+2      	; 0x33c8 <LT6802CommThread+0x80>
    33c6:	a0 c1       	rjmp	.+832    	; 0x3708 <LT6802CommThread+0x3c0>
    33c8:	8a 58       	subi	r24, 0x8A	; 138
    33ca:	9f 4f       	sbci	r25, 0xFF	; 255
    33cc:	fc 01       	movw	r30, r24
    33ce:	0c 94 23 28 	jmp	0x5046	; 0x5046 <__tablejump2__>
			{
				case sendSetupData:

					
					configRegisters.packet.command = WRCFG;
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	80 93 77 01 	sts	0x0177, r24
					startSPITransaction(configRegisters.bytes, sizeof(configRegisters.bytes), noFlags);
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	67 e0       	ldi	r22, 0x07	; 7
    33dc:	87 e7       	ldi	r24, 0x77	; 119
    33de:	91 e0       	ldi	r25, 0x01	; 1
    33e0:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <startSPITransaction>
					LT6802State= preConversion;
    33e4:	82 e0       	ldi	r24, 0x02	; 2
    33e6:	80 93 93 00 	sts	0x0093, r24
					break;
    33ea:	8e c1       	rjmp	.+796    	; 0x3708 <LT6802CommThread+0x3c0>
				case preConversion:
					
					if (updateCFGReg) {
    33ec:	80 91 5e 01 	lds	r24, 0x015E
    33f0:	88 23       	and	r24, r24
    33f2:	f1 f0       	breq	.+60     	; 0x3430 <LT6802CommThread+0xe8>
						updateCFGReg = false;
    33f4:	10 92 5e 01 	sts	0x015E, r1
						//kill the dischargers if we disable the UV check
						#ifdef AllowChargeOverDischargedCells
						DischargerStatus = 0x0000;
						#endif
						//set the discharger status registers based on our bitmap
						configRegisters.packet.payload[0].reg.CFGR1=(DischargerStatus & 0x00FF);
    33f8:	80 91 fd 01 	lds	r24, 0x01FD
    33fc:	90 91 fe 01 	lds	r25, 0x01FE
    3400:	80 93 79 01 	sts	0x0179, r24
						configRegisters.packet.payload[0].reg.CFGR2 &= 0xF0;
    3404:	80 91 7a 01 	lds	r24, 0x017A
    3408:	80 7f       	andi	r24, 0xF0	; 240
    340a:	80 93 7a 01 	sts	0x017A, r24
						configRegisters.packet.payload[0].reg.CFGR2 |= ((DischargerStatus & 0x0F00) >> 8);
    340e:	20 91 7a 01 	lds	r18, 0x017A
    3412:	80 91 fd 01 	lds	r24, 0x01FD
    3416:	90 91 fe 01 	lds	r25, 0x01FE
    341a:	88 27       	eor	r24, r24
    341c:	9f 70       	andi	r25, 0x0F	; 15
    341e:	89 2f       	mov	r24, r25
    3420:	99 27       	eor	r25, r25
    3422:	82 2b       	or	r24, r18
    3424:	80 93 7a 01 	sts	0x017A, r24
						LT6802State = sendSetupData;
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	80 93 93 00 	sts	0x0093, r24
    342e:	70 c0       	rjmp	.+224    	; 0x3510 <LT6802CommThread+0x1c8>
					//poll the ADC once per second
					}else if((oneSecondPassed & secondReadMask) || force6802Conversion)	
    3430:	80 91 fc 01 	lds	r24, 0x01FC
    3434:	88 2f       	mov	r24, r24
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	82 70       	andi	r24, 0x02	; 2
    343a:	99 27       	eor	r25, r25
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	21 f4       	brne	.+8      	; 0x3448 <LT6802CommThread+0x100>
    3440:	80 91 24 01 	lds	r24, 0x0124
    3444:	88 23       	and	r24, r24
    3446:	99 f1       	breq	.+102    	; 0x34ae <LT6802CommThread+0x166>
					{
						hundredMSPassed &= ~secondReadMask;
    3448:	80 91 fa 01 	lds	r24, 0x01FA
    344c:	8d 7f       	andi	r24, 0xFD	; 253
    344e:	80 93 fa 01 	sts	0x01FA, r24
						force6802Conversion = false;
    3452:	10 92 24 01 	sts	0x0124, r1
						hundredMSCount=0;
    3456:	10 92 7e 01 	sts	0x017E, r1
						//	stoppedBalancers = true;
						//	configRegisters.packet.payload[0].reg.CFGR1=0x00;
						//	configRegisters.packet.payload[0].reg.CFGR2 &= 0xF0;
						//	LT6802State = sendSetupData;
						//} else {
							stoppedBalancers = false;
    345a:	10 92 7f 01 	sts	0x017F, r1
							//commandPacket.reg.command=STCVADAll;
							inhibitStackIADC = true;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	80 93 25 01 	sts	0x0125, r24
							oneSecondPassed &= ~secondReadMask;
    3464:	80 91 fc 01 	lds	r24, 0x01FC
    3468:	8d 7f       	andi	r24, 0xFD	; 253
    346a:	80 93 fc 01 	sts	0x01FC, r24
							addressCommPacket.reg.command=STCVADAll;
    346e:	80 e1       	ldi	r24, 0x10	; 16
    3470:	80 93 81 01 	sts	0x0181, r24
							addressCommPacket.reg.address=0x85;
    3474:	85 e8       	ldi	r24, 0x85	; 133
    3476:	80 93 80 01 	sts	0x0180, r24
							startSPITransaction(addressCommPacket.bytes, sizeof(addressCommPacket.bytes), noFlags);
    347a:	40 e0       	ldi	r20, 0x00	; 0
    347c:	62 e0       	ldi	r22, 0x02	; 2
    347e:	80 e8       	ldi	r24, 0x80	; 128
    3480:	91 e0       	ldi	r25, 0x01	; 1
    3482:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <startSPITransaction>
							LT6802State = pollingADC;
    3486:	83 e0       	ldi	r24, 0x03	; 3
    3488:	80 93 93 00 	sts	0x0093, r24
							
							#ifndef IgnoreErrors
							ADCTimoutTime=time;
    348c:	80 91 1d 01 	lds	r24, 0x011D
    3490:	90 91 1e 01 	lds	r25, 0x011E
    3494:	a0 91 1f 01 	lds	r26, 0x011F
    3498:	b0 91 20 01 	lds	r27, 0x0120
    349c:	80 93 82 01 	sts	0x0182, r24
    34a0:	90 93 83 01 	sts	0x0183, r25
    34a4:	a0 93 84 01 	sts	0x0184, r26
    34a8:	b0 93 85 01 	sts	0x0185, r27
    34ac:	31 c0       	rjmp	.+98     	; 0x3510 <LT6802CommThread+0x1c8>
							#endif
						//}							
					
					//poll the interrupt every hundred ms
					} else if(hundredMSPassed & secondReadMask){
    34ae:	80 91 fa 01 	lds	r24, 0x01FA
    34b2:	88 2f       	mov	r24, r24
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	82 70       	andi	r24, 0x02	; 2
    34b8:	99 27       	eor	r25, r25
    34ba:	00 97       	sbiw	r24, 0x00	; 0
    34bc:	49 f1       	breq	.+82     	; 0x3510 <LT6802CommThread+0x1c8>
						hundredMSCount++;
    34be:	80 91 7e 01 	lds	r24, 0x017E
    34c2:	8f 5f       	subi	r24, 0xFF	; 255
    34c4:	80 93 7e 01 	sts	0x017E, r24
						hundredMSPassed &= ~ secondReadMask;
    34c8:	80 91 fa 01 	lds	r24, 0x01FA
    34cc:	8d 7f       	andi	r24, 0xFD	; 253
    34ce:	80 93 fa 01 	sts	0x01FA, r24
						if (hundredMSCount > 9)
    34d2:	80 91 7e 01 	lds	r24, 0x017E
    34d6:	8a 30       	cpi	r24, 0x0A	; 10
    34d8:	58 f0       	brcs	.+22     	; 0x34f0 <LT6802CommThread+0x1a8>
						{
							configRegisters.packet.payload[0].reg.CFGR1=0x00;
    34da:	10 92 79 01 	sts	0x0179, r1
							configRegisters.packet.payload[0].reg.CFGR2 &= 0xF0;
    34de:	80 91 7a 01 	lds	r24, 0x017A
    34e2:	80 7f       	andi	r24, 0xF0	; 240
    34e4:	80 93 7a 01 	sts	0x017A, r24
							LT6802State = sendSetupData;
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	80 93 93 00 	sts	0x0093, r24
    34ee:	10 c0       	rjmp	.+32     	; 0x3510 <LT6802CommThread+0x1c8>
							//puts_P(PSTR("**bals off**\n"))	;
						} else {						
							addressCommPacket.reg.command=PLINT;
    34f0:	80 e5       	ldi	r24, 0x50	; 80
    34f2:	80 93 81 01 	sts	0x0181, r24
							addressCommPacket.reg.address=0x85;
    34f6:	85 e8       	ldi	r24, 0x85	; 133
    34f8:	80 93 80 01 	sts	0x0180, r24
							startSPITransaction(addressCommPacket.bytes, sizeof(addressCommPacket.bytes), SDOStatusBeforeCS);
    34fc:	41 e0       	ldi	r20, 0x01	; 1
    34fe:	62 e0       	ldi	r22, 0x02	; 2
    3500:	80 e8       	ldi	r24, 0x80	; 128
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <startSPITransaction>
							LT6802State = pollingInterrupt;
    3508:	84 e0       	ldi	r24, 0x04	; 4
    350a:	80 93 93 00 	sts	0x0093, r24
						}

					}
					break;
    350e:	fc c0       	rjmp	.+504    	; 0x3708 <LT6802CommThread+0x3c0>
    3510:	fb c0       	rjmp	.+502    	; 0x3708 <LT6802CommThread+0x3c0>
					//LT6802 interrupts if all the cells are within range, but interrupt is indicated by 
					//sdo low (same as busy).  So, low still means keep polling - nothing interesting to
					//report.
					//We check the condition here since last packet sent was poll
					//interrupt (and the poll interrupt state checks poll adc stuff)
					if(SPIStatus.SDOStatus)
    3512:	80 91 5b 01 	lds	r24, 0x015B
    3516:	88 23       	and	r24, r24
    3518:	21 f0       	breq	.+8      	; 0x3522 <LT6802CommThread+0x1da>
					{
						//everything is good if the pin is low
						LT6802State = preConversion;
    351a:	82 e0       	ldi	r24, 0x02	; 2
    351c:	80 93 93 00 	sts	0x0093, r24
						flagRegisters.reg.command=RDFLG;
						flagRegisters.reg.address=0x85;
						startSPITransaction(flagRegisters.bytes, sizeof(flagRegisters.bytes), readFromSPI);
						LT6802State = gotFlagData;
					}
					break;
    3520:	f3 c0       	rjmp	.+486    	; 0x3708 <LT6802CommThread+0x3c0>
						LT6802State = preConversion;
					} else {
						//this is a little odd here since thats the one for interrupts, but
						//the last poll we did was for interrupt, so, if we got interrupted,
						//we want to go to the interrupt stuff
						flagRegisters.reg.command=RDFLG;
    3522:	8c e0       	ldi	r24, 0x0C	; 12
    3524:	80 93 87 01 	sts	0x0187, r24
						flagRegisters.reg.address=0x85;
    3528:	85 e8       	ldi	r24, 0x85	; 133
    352a:	80 93 86 01 	sts	0x0186, r24
						startSPITransaction(flagRegisters.bytes, sizeof(flagRegisters.bytes), readFromSPI);
    352e:	42 e0       	ldi	r20, 0x02	; 2
    3530:	65 e0       	ldi	r22, 0x05	; 5
    3532:	86 e8       	ldi	r24, 0x86	; 134
    3534:	91 e0       	ldi	r25, 0x01	; 1
    3536:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <startSPITransaction>
						LT6802State = gotFlagData;
    353a:	86 e0       	ldi	r24, 0x06	; 6
    353c:	80 93 93 00 	sts	0x0093, r24
					}
					break;
    3540:	e3 c0       	rjmp	.+454    	; 0x3708 <LT6802CommThread+0x3c0>
					
				case pollingADC:
					//low for busy / in interrupt
					if(!SPIStatus.SDOStatus)
    3542:	80 91 5b 01 	lds	r24, 0x015B
    3546:	88 23       	and	r24, r24
    3548:	a1 f5       	brne	.+104    	; 0x35b2 <LT6802CommThread+0x26a>
					{
						//addressCommPacket.reg.command=PLINT;
						addressCommPacket.reg.command=PLADC;
    354a:	80 e4       	ldi	r24, 0x40	; 64
    354c:	80 93 81 01 	sts	0x0181, r24
						addressCommPacket.reg.address=0x85;
    3550:	85 e8       	ldi	r24, 0x85	; 133
    3552:	80 93 80 01 	sts	0x0180, r24
						startSPITransaction(addressCommPacket.bytes, sizeof(addressCommPacket.bytes), SDOStatusBeforeCS);
    3556:	41 e0       	ldi	r20, 0x01	; 1
    3558:	62 e0       	ldi	r22, 0x02	; 2
    355a:	80 e8       	ldi	r24, 0x80	; 128
    355c:	91 e0       	ldi	r25, 0x01	; 1
    355e:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <startSPITransaction>
						LT6802State = pollingADC;
    3562:	83 e0       	ldi	r24, 0x03	; 3
    3564:	80 93 93 00 	sts	0x0093, r24
						
						#ifndef IgnoreErrors
						#define maxADCPollTime 5
						if((time-ADCTimoutTime) > maxADCPollTime)
    3568:	20 91 1d 01 	lds	r18, 0x011D
    356c:	30 91 1e 01 	lds	r19, 0x011E
    3570:	40 91 1f 01 	lds	r20, 0x011F
    3574:	50 91 20 01 	lds	r21, 0x0120
    3578:	80 91 82 01 	lds	r24, 0x0182
    357c:	90 91 83 01 	lds	r25, 0x0183
    3580:	a0 91 84 01 	lds	r26, 0x0184
    3584:	b0 91 85 01 	lds	r27, 0x0185
    3588:	79 01       	movw	r14, r18
    358a:	8a 01       	movw	r16, r20
    358c:	e8 1a       	sub	r14, r24
    358e:	f9 0a       	sbc	r15, r25
    3590:	0a 0b       	sbc	r16, r26
    3592:	1b 0b       	sbc	r17, r27
    3594:	d8 01       	movw	r26, r16
    3596:	c7 01       	movw	r24, r14
    3598:	86 30       	cpi	r24, 0x06	; 6
    359a:	91 05       	cpc	r25, r1
    359c:	a1 05       	cpc	r26, r1
    359e:	b1 05       	cpc	r27, r1
    35a0:	28 f1       	brcs	.+74     	; 0x35ec <LT6802CommThread+0x2a4>
						{
							puts_P(PSTR("**Timeout polling for ADC response**\n"));
    35a2:	83 e7       	ldi	r24, 0x73	; 115
    35a4:	94 e0       	ldi	r25, 0x04	; 4
    35a6:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
							globalError=LT6802TimeoutError;
    35aa:	8c e1       	ldi	r24, 0x1C	; 28
    35ac:	80 93 6b 00 	sts	0x006B, r24
						vars->voltageRegisters->reg.address=0x85;
						vars->voltageRegisters->reg.command=RDCV;
						startSPITransaction(vars->voltageRegisters->bytes, sizeof(vars->voltageRegisters->bytes), readFromSPI);	
						LT6802State = gotADCData;
					}
					break;
    35b0:	ab c0       	rjmp	.+342    	; 0x3708 <LT6802CommThread+0x3c0>
							puts_P(PSTR("**Timeout polling for ADC response**\n"));
							globalError=LT6802TimeoutError;
						}
						#endif
					} else {
						vars->voltageRegisters->reg.address=0x85;
    35b2:	8a 81       	ldd	r24, Y+2	; 0x02
    35b4:	9b 81       	ldd	r25, Y+3	; 0x03
    35b6:	fc 01       	movw	r30, r24
    35b8:	82 81       	ldd	r24, Z+2	; 0x02
    35ba:	93 81       	ldd	r25, Z+3	; 0x03
    35bc:	25 e8       	ldi	r18, 0x85	; 133
    35be:	fc 01       	movw	r30, r24
    35c0:	20 83       	st	Z, r18
						vars->voltageRegisters->reg.command=RDCV;
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	9b 81       	ldd	r25, Y+3	; 0x03
    35c6:	fc 01       	movw	r30, r24
    35c8:	82 81       	ldd	r24, Z+2	; 0x02
    35ca:	93 81       	ldd	r25, Z+3	; 0x03
    35cc:	24 e0       	ldi	r18, 0x04	; 4
    35ce:	fc 01       	movw	r30, r24
    35d0:	21 83       	std	Z+1, r18	; 0x01
						startSPITransaction(vars->voltageRegisters->bytes, sizeof(vars->voltageRegisters->bytes), readFromSPI);	
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	9b 81       	ldd	r25, Y+3	; 0x03
    35d6:	fc 01       	movw	r30, r24
    35d8:	82 81       	ldd	r24, Z+2	; 0x02
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	42 e0       	ldi	r20, 0x02	; 2
    35de:	65 e1       	ldi	r22, 0x15	; 21
    35e0:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <startSPITransaction>
						LT6802State = gotADCData;
    35e4:	87 e0       	ldi	r24, 0x07	; 7
    35e6:	80 93 93 00 	sts	0x0093, r24
					}
					break;
    35ea:	8e c0       	rjmp	.+284    	; 0x3708 <LT6802CommThread+0x3c0>
    35ec:	8d c0       	rjmp	.+282    	; 0x3708 <LT6802CommThread+0x3c0>
				case gotFlagData:
					//if none of the flags are set, we're good to get the ADC readings
					if (flagRegisters.reg.packet.reg.FLGR0 == 0 &&
    35ee:	80 91 88 01 	lds	r24, 0x0188
    35f2:	88 23       	and	r24, r24
    35f4:	81 f4       	brne	.+32     	; 0x3616 <LT6802CommThread+0x2ce>
						flagRegisters.reg.packet.reg.FLGR1 == 0 &&
    35f6:	80 91 89 01 	lds	r24, 0x0189
						LT6802State = gotADCData;
					}
					break;
				case gotFlagData:
					//if none of the flags are set, we're good to get the ADC readings
					if (flagRegisters.reg.packet.reg.FLGR0 == 0 &&
    35fa:	88 23       	and	r24, r24
    35fc:	61 f4       	brne	.+24     	; 0x3616 <LT6802CommThread+0x2ce>
						flagRegisters.reg.packet.reg.FLGR1 == 0 &&
						flagRegisters.reg.packet.reg.FLGR2 == 0)
    35fe:	80 91 8a 01 	lds	r24, 0x018A
					}
					break;
				case gotFlagData:
					//if none of the flags are set, we're good to get the ADC readings
					if (flagRegisters.reg.packet.reg.FLGR0 == 0 &&
						flagRegisters.reg.packet.reg.FLGR1 == 0 &&
    3602:	88 23       	and	r24, r24
    3604:	41 f4       	brne	.+16     	; 0x3616 <LT6802CommThread+0x2ce>
						flagRegisters.reg.packet.reg.FLGR2 == 0)
					{
						//? what are we doing here?  We shouldn't be in this state unless there was a problem.
						//print an error and reset the state
						puts_P(PSTR("**Error: Unexpected interrupt**\n"));
    3606:	89 e9       	ldi	r24, 0x99	; 153
    3608:	94 e0       	ldi	r25, 0x04	; 4
    360a:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
						LT6802State = sendSetupData;
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	80 93 93 00 	sts	0x0093, r24
    3614:	2e c0       	rjmp	.+92     	; 0x3672 <LT6802CommThread+0x32a>
					} else {
						if(time > 5 && errorCount > 5)	//give a grace period
    3616:	80 91 1d 01 	lds	r24, 0x011D
    361a:	90 91 1e 01 	lds	r25, 0x011E
    361e:	a0 91 1f 01 	lds	r26, 0x011F
    3622:	b0 91 20 01 	lds	r27, 0x0120
    3626:	86 30       	cpi	r24, 0x06	; 6
    3628:	91 05       	cpc	r25, r1
    362a:	a1 05       	cpc	r26, r1
    362c:	b1 05       	cpc	r27, r1
    362e:	c0 f0       	brcs	.+48     	; 0x3660 <LT6802CommThread+0x318>
    3630:	80 91 8b 01 	lds	r24, 0x018B
    3634:	86 30       	cpi	r24, 0x06	; 6
    3636:	a0 f0       	brcs	.+40     	; 0x3660 <LT6802CommThread+0x318>
						{
							#ifndef IgnoreErrors
							emergencyShutdown();
    3638:	0e 94 1d 24 	call	0x483a	; 0x483a <emergencyShutdown>
						
							//light the error LED
							ErrorLEDPort = ~(1 << ErrorLED);
    363c:	82 e3       	ldi	r24, 0x32	; 50
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	2b ef       	ldi	r18, 0xFB	; 251
    3642:	fc 01       	movw	r30, r24
    3644:	20 83       	st	Z, r18
							//send a nice error message
							puts_P(PSTR("**Error some cell has under or over voltaged**\n"));
    3646:	8a eb       	ldi	r24, 0xBA	; 186
    3648:	94 e0       	ldi	r25, 0x04	; 4
    364a:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
							oneSecondPassed = 0x00;		//suppress possible next log
    364e:	10 92 fc 01 	sts	0x01FC, r1
							
							globalError = LT6802CellOVUVError;
    3652:	8a e1       	ldi	r24, 0x1A	; 26
    3654:	80 93 6b 00 	sts	0x006B, r24
							LT6802State = error;
    3658:	88 e0       	ldi	r24, 0x08	; 8
    365a:	80 93 93 00 	sts	0x0093, r24
    365e:	09 c0       	rjmp	.+18     	; 0x3672 <LT6802CommThread+0x32a>
							if(time % 10 == 1)
								LT6802State = sendSetupData;
							#endif
						} else {
							//let's try this again and see if things are OK
							errorCount++;
    3660:	80 91 8b 01 	lds	r24, 0x018B
    3664:	8f 5f       	subi	r24, 0xFF	; 255
    3666:	80 93 8b 01 	sts	0x018B, r24
							LT6802State = sendSetupData;
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	80 93 93 00 	sts	0x0093, r24
						}
					}
					break;
    3670:	4b c0       	rjmp	.+150    	; 0x3708 <LT6802CommThread+0x3c0>
    3672:	4a c0       	rjmp	.+148    	; 0x3708 <LT6802CommThread+0x3c0>

				case gotADCData:
					if(CRC86802(vars->voltageRegisters->reg.payload[0].bytes, sizeof(CVRReg6802Struct)-1) 
    3674:	8a 81       	ldd	r24, Y+2	; 0x02
    3676:	9b 81       	ldd	r25, Y+3	; 0x03
    3678:	fc 01       	movw	r30, r24
    367a:	82 81       	ldd	r24, Z+2	; 0x02
    367c:	93 81       	ldd	r25, Z+3	; 0x03
    367e:	02 96       	adiw	r24, 0x02	; 2
    3680:	62 e1       	ldi	r22, 0x12	; 18
    3682:	0e 94 d6 14 	call	0x29ac	; 0x29ac <CRC86802>
    3686:	28 2f       	mov	r18, r24
						!= vars->voltageRegisters->reg.payload[0].reg.PEC)
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	9b 81       	ldd	r25, Y+3	; 0x03
    368c:	fc 01       	movw	r30, r24
    368e:	82 81       	ldd	r24, Z+2	; 0x02
    3690:	93 81       	ldd	r25, Z+3	; 0x03
    3692:	fc 01       	movw	r30, r24
    3694:	84 89       	ldd	r24, Z+20	; 0x14
						}
					}
					break;

				case gotADCData:
					if(CRC86802(vars->voltageRegisters->reg.payload[0].bytes, sizeof(CVRReg6802Struct)-1) 
    3696:	28 17       	cp	r18, r24
    3698:	39 f1       	breq	.+78     	; 0x36e8 <LT6802CommThread+0x3a0>
						!= vars->voltageRegisters->reg.payload[0].reg.PEC)
					{
						TriggerPort ^= (1 << TriggerPin);
    369a:	88 e3       	ldi	r24, 0x38	; 56
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	28 e3       	ldi	r18, 0x38	; 56
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	f9 01       	movw	r30, r18
    36a4:	30 81       	ld	r19, Z
    36a6:	22 e0       	ldi	r18, 0x02	; 2
    36a8:	23 27       	eor	r18, r19
    36aa:	fc 01       	movw	r30, r24
    36ac:	20 83       	st	Z, r18
						puts_P(PSTR("**Warning: Pec mismatch**\n"));
    36ae:	8a ee       	ldi	r24, 0xEA	; 234
    36b0:	94 e0       	ldi	r25, 0x04	; 4
    36b2:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
						#ifndef IgnoreErrors
						if(badDataCount > 10)
    36b6:	80 91 8c 01 	lds	r24, 0x018C
    36ba:	8b 30       	cpi	r24, 0x0B	; 11
    36bc:	28 f0       	brcs	.+10     	; 0x36c8 <LT6802CommThread+0x380>
						{
							globalError= LT6802CommunicationsError;
    36be:	8b e1       	ldi	r24, 0x1B	; 27
    36c0:	80 93 6b 00 	sts	0x006B, r24
							emergencyShutdown();
    36c4:	0e 94 1d 24 	call	0x483a	; 0x483a <emergencyShutdown>
						}
						#endif
						badDataCount++;
    36c8:	80 91 8c 01 	lds	r24, 0x018C
    36cc:	8f 5f       	subi	r24, 0xFF	; 255
    36ce:	80 93 8c 01 	sts	0x018C, r24
						NewADCReadings = 0x00;					//this reading was bad.  don't let anybody use it.
    36d2:	10 92 21 01 	sts	0x0121, r1
						oneSecondPassed |= secondReadMask;		//trick into getting another reading
    36d6:	80 91 fc 01 	lds	r24, 0x01FC
    36da:	82 60       	ori	r24, 0x02	; 2
    36dc:	80 93 fc 01 	sts	0x01FC, r24
						LT6802State = preConversion;
    36e0:	82 e0       	ldi	r24, 0x02	; 2
    36e2:	80 93 93 00 	sts	0x0093, r24
						break;
    36e6:	10 c0       	rjmp	.+32     	; 0x3708 <LT6802CommThread+0x3c0>
					}
					errorCount = 0;
    36e8:	10 92 8b 01 	sts	0x018B, r1
					badDataCount=0;
    36ec:	10 92 8c 01 	sts	0x018C, r1
					//crc=CRC86802(voltageRegisters.reg.payload[0].bytes, sizeof(voltageRegisters.reg.payload[0].bytes)-1);
					NewADCReadings = 0xFF;
    36f0:	8f ef       	ldi	r24, 0xFF	; 255
    36f2:	80 93 21 01 	sts	0x0121, r24
					inhibitStackIADC = false;
    36f6:	10 92 25 01 	sts	0x0125, r1
					//updateCFGReg = true;
					//addressCommPacket.reg.command=PLINT;
					//addressCommPacket.reg.address=0x85;
					//startSPITransaction(addressCommPacket.bytes, sizeof(addressCommPacket.bytes), SDOStatusBeforeCS);
					
					updateCFGReg = true;
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	80 93 5e 01 	sts	0x015E, r24
					LT6802State = preConversion;
    3700:	82 e0       	ldi	r24, 0x02	; 2
    3702:	80 93 93 00 	sts	0x0093, r24
					break;
    3706:	00 00       	nop
					//what to do, what to do?  For now, let's just stay in this state
					break;
					
			}	//end switch
		}	//end if
		PT_YIELD(&vars->ptVar);
    3708:	19 82       	std	Y+1, r1	; 0x01
    370a:	8a 81       	ldd	r24, Y+2	; 0x02
    370c:	9b 81       	ldd	r25, Y+3	; 0x03
    370e:	25 e8       	ldi	r18, 0x85	; 133
    3710:	3b e1       	ldi	r19, 0x1B	; 27
    3712:	fc 01       	movw	r30, r24
    3714:	31 83       	std	Z+1, r19	; 0x01
    3716:	20 83       	st	Z, r18
    3718:	89 81       	ldd	r24, Y+1	; 0x01
    371a:	88 23       	and	r24, r24
    371c:	11 f4       	brne	.+4      	; 0x3722 <LT6802CommThread+0x3da>
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	01 c0       	rjmp	.+2      	; 0x3724 <LT6802CommThread+0x3dc>
	}	//end while
    3722:	3b ce       	rjmp	.-906    	; 0x339a <LT6802CommThread+0x52>
	
	PT_END(&vars->ptVar);
}
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	df 91       	pop	r29
    372c:	cf 91       	pop	r28
    372e:	1f 91       	pop	r17
    3730:	0f 91       	pop	r16
    3732:	ff 90       	pop	r15
    3734:	ef 90       	pop	r14
    3736:	08 95       	ret

00003738 <logData>:

PT_THREAD(logData(logThreadVars* var))
{
    3738:	cf 93       	push	r28
    373a:	df 93       	push	r29
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
    3740:	29 97       	sbiw	r28, 0x09	; 9
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	f8 94       	cli
    3746:	de bf       	out	0x3e, r29	; 62
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	cd bf       	out	0x3d, r28	; 61
    374c:	9d 83       	std	Y+5, r25	; 0x05
    374e:	8c 83       	std	Y+4, r24	; 0x04
	static uint8_t prevLogMode = 0x00;
	PT_BEGIN(&var->ptVar);
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	89 83       	std	Y+1, r24	; 0x01
    3754:	8c 81       	ldd	r24, Y+4	; 0x04
    3756:	9d 81       	ldd	r25, Y+5	; 0x05
    3758:	fc 01       	movw	r30, r24
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	11 f0       	breq	.+4      	; 0x3766 <logData+0x2e>
    3762:	00 00       	nop
    3764:	4f c1       	rjmp	.+670    	; 0x3a04 <logData+0x2cc>
	
	while(true)
	{
		if(logMode != prevLogMode)
    3766:	90 91 84 00 	lds	r25, 0x0084
    376a:	80 91 8d 01 	lds	r24, 0x018D
    376e:	98 17       	cp	r25, r24
    3770:	b1 f0       	breq	.+44     	; 0x379e <logData+0x66>
		{
			prevLogMode = logMode;
    3772:	80 91 84 00 	lds	r24, 0x0084
    3776:	80 93 8d 01 	sts	0x018D, r24
			printf_P(PSTR("**Log mode: %"PRIx8"**\n"), logMode);
    377a:	80 91 84 00 	lds	r24, 0x0084
    377e:	28 2f       	mov	r18, r24
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	85 e0       	ldi	r24, 0x05	; 5
    3784:	95 e0       	ldi	r25, 0x05	; 5
    3786:	43 2f       	mov	r20, r19
    3788:	4f 93       	push	r20
    378a:	2f 93       	push	r18
    378c:	29 2f       	mov	r18, r25
    378e:	2f 93       	push	r18
    3790:	8f 93       	push	r24
    3792:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
		//if(oneSecondPassed & secondPrintMask)
		//{
		//	oneSecondPassed &= ~secondPrintMask;
		
		if(/*oneSecondPassed & secondPrintMask &&*/ 
			NewADCReadings & ADCPrint && 
    379e:	80 91 21 01 	lds	r24, 0x0121
    37a2:	88 2f       	mov	r24, r24
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	81 70       	andi	r24, 0x01	; 1
    37a8:	99 27       	eor	r25, r25
		//optional stuff in case we decide to poll the LT6802 more often than once / second
		//if(oneSecondPassed & secondPrintMask)
		//{
		//	oneSecondPassed &= ~secondPrintMask;
		
		if(/*oneSecondPassed & secondPrintMask &&*/ 
    37aa:	00 97       	sbiw	r24, 0x00	; 0
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <logData+0x78>
    37ae:	29 c1       	rjmp	.+594    	; 0x3a02 <logData+0x2ca>
			NewADCReadings & ADCPrint && 
			NewISenseReadings & ISensePrint && 
    37b0:	80 91 22 01 	lds	r24, 0x0122
    37b4:	88 2f       	mov	r24, r24
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	82 70       	andi	r24, 0x02	; 2
    37ba:	99 27       	eor	r25, r25
		//if(oneSecondPassed & secondPrintMask)
		//{
		//	oneSecondPassed &= ~secondPrintMask;
		
		if(/*oneSecondPassed & secondPrintMask &&*/ 
			NewADCReadings & ADCPrint && 
    37bc:	00 97       	sbiw	r24, 0x00	; 0
    37be:	09 f4       	brne	.+2      	; 0x37c2 <logData+0x8a>
    37c0:	20 c1       	rjmp	.+576    	; 0x3a02 <logData+0x2ca>
			NewISenseReadings & ISensePrint && 
			logMode != logNone)
    37c2:	80 91 84 00 	lds	r24, 0x0084
		//{
		//	oneSecondPassed &= ~secondPrintMask;
		
		if(/*oneSecondPassed & secondPrintMask &&*/ 
			NewADCReadings & ADCPrint && 
			NewISenseReadings & ISensePrint && 
    37c6:	80 34       	cpi	r24, 0x40	; 64
    37c8:	09 f4       	brne	.+2      	; 0x37cc <logData+0x94>
    37ca:	1b c1       	rjmp	.+566    	; 0x3a02 <logData+0x2ca>
			logMode != logNone)
		{
			oneSecondPassed &= ~secondPrintMask;
    37cc:	80 91 fc 01 	lds	r24, 0x01FC
    37d0:	8e 7f       	andi	r24, 0xFE	; 254
    37d2:	80 93 fc 01 	sts	0x01FC, r24
			NewADCReadings &= ~ADCPrint;
    37d6:	80 91 21 01 	lds	r24, 0x0121
    37da:	8e 7f       	andi	r24, 0xFE	; 254
    37dc:	80 93 21 01 	sts	0x0121, r24
			NewISenseReadings &= ~ISensePrint;
    37e0:	80 91 22 01 	lds	r24, 0x0122
    37e4:	8d 7f       	andi	r24, 0xFD	; 253
    37e6:	80 93 22 01 	sts	0x0122, r24
			
			//int16_t count;
			printf_P (PSTR("%5" PRIu32 "\t"), time);
    37ea:	80 91 1d 01 	lds	r24, 0x011D
    37ee:	90 91 1e 01 	lds	r25, 0x011E
    37f2:	a0 91 1f 01 	lds	r26, 0x011F
    37f6:	b0 91 20 01 	lds	r27, 0x0120
    37fa:	27 e1       	ldi	r18, 0x17	; 23
    37fc:	35 e0       	ldi	r19, 0x05	; 5
    37fe:	4b 2f       	mov	r20, r27
    3800:	4f 93       	push	r20
    3802:	4a 2f       	mov	r20, r26
    3804:	4f 93       	push	r20
    3806:	49 2f       	mov	r20, r25
    3808:	4f 93       	push	r20
    380a:	8f 93       	push	r24
    380c:	83 2f       	mov	r24, r19
    380e:	8f 93       	push	r24
    3810:	82 2f       	mov	r24, r18
    3812:	8f 93       	push	r24
    3814:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    3818:	0f 90       	pop	r0
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
			if(logMode & logBalancer)
    3824:	80 91 84 00 	lds	r24, 0x0084
    3828:	88 2f       	mov	r24, r24
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	84 70       	andi	r24, 0x04	; 4
    382e:	99 27       	eor	r25, r25
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	a1 f0       	breq	.+40     	; 0x385c <logData+0x124>
			{
				printf("%"PRIx16"\t", DischargerStatus);
    3834:	80 91 fd 01 	lds	r24, 0x01FD
    3838:	90 91 fe 01 	lds	r25, 0x01FE
    383c:	29 2f       	mov	r18, r25
    383e:	2f 93       	push	r18
    3840:	8f 93       	push	r24
    3842:	82 eb       	ldi	r24, 0xB2	; 178
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	89 2f       	mov	r24, r25
    3848:	8f 93       	push	r24
    384a:	82 eb       	ldi	r24, 0xB2	; 178
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	8f 93       	push	r24
    3850:	0e 94 4b 28 	call	0x5096	; 0x5096 <printf>
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	0f 90       	pop	r0
			}
			if(logMode & logStackI)
    385c:	80 91 84 00 	lds	r24, 0x0084
    3860:	88 2f       	mov	r24, r24
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	88 70       	andi	r24, 0x08	; 8
    3866:	99 27       	eor	r25, r25
    3868:	00 97       	sbiw	r24, 0x00	; 0
    386a:	a1 f0       	breq	.+40     	; 0x3894 <logData+0x15c>
			{
				printf("%"PRId16"\t", stackCurrent);
    386c:	80 91 1b 01 	lds	r24, 0x011B
    3870:	90 91 1c 01 	lds	r25, 0x011C
    3874:	29 2f       	mov	r18, r25
    3876:	2f 93       	push	r18
    3878:	8f 93       	push	r24
    387a:	86 eb       	ldi	r24, 0xB6	; 182
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	89 2f       	mov	r24, r25
    3880:	8f 93       	push	r24
    3882:	86 eb       	ldi	r24, 0xB6	; 182
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	8f 93       	push	r24
    3888:	0e 94 4b 28 	call	0x5096	; 0x5096 <printf>
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
			}
			
			for(int i = 1; i <= NumberOfCells; i++)
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	9b 83       	std	Y+3, r25	; 0x03
    389a:	8a 83       	std	Y+2, r24	; 0x02
    389c:	a3 c0       	rjmp	.+326    	; 0x39e4 <logData+0x2ac>
			{
				if(logMode & logRaw)
    389e:	80 91 84 00 	lds	r24, 0x0084
    38a2:	88 2f       	mov	r24, r24
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	81 70       	andi	r24, 0x01	; 1
    38a8:	99 27       	eor	r25, r25
    38aa:	00 97       	sbiw	r24, 0x00	; 0
    38ac:	61 f0       	breq	.+24     	; 0x38c6 <logData+0x18e>
				{
					print680xCV(voltageFromCVReg(var->voltageRegisters->reg.payload[0].bytes, i));
    38ae:	2a 81       	ldd	r18, Y+2	; 0x02
    38b0:	8c 81       	ldd	r24, Y+4	; 0x04
    38b2:	9d 81       	ldd	r25, Y+5	; 0x05
    38b4:	fc 01       	movw	r30, r24
    38b6:	82 81       	ldd	r24, Z+2	; 0x02
    38b8:	93 81       	ldd	r25, Z+3	; 0x03
    38ba:	02 96       	adiw	r24, 0x02	; 2
    38bc:	62 2f       	mov	r22, r18
    38be:	0e 94 51 14 	call	0x28a2	; 0x28a2 <voltageFromCVReg>
    38c2:	0e 94 bb 21 	call	0x4376	; 0x4376 <print680xCV>
				}
				if(logMode & logOCV){
    38c6:	80 91 84 00 	lds	r24, 0x0084
    38ca:	88 2f       	mov	r24, r24
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	82 70       	andi	r24, 0x02	; 2
    38d0:	99 27       	eor	r25, r25
    38d2:	00 97       	sbiw	r24, 0x00	; 0
    38d4:	59 f0       	breq	.+22     	; 0x38ec <logData+0x1b4>
					print680xCV(getOCV(var->voltageRegisters, i));
    38d6:	2a 81       	ldd	r18, Y+2	; 0x02
    38d8:	8c 81       	ldd	r24, Y+4	; 0x04
    38da:	9d 81       	ldd	r25, Y+5	; 0x05
    38dc:	fc 01       	movw	r30, r24
    38de:	82 81       	ldd	r24, Z+2	; 0x02
    38e0:	93 81       	ldd	r25, Z+3	; 0x03
    38e2:	62 2f       	mov	r22, r18
    38e4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <getOCV>
    38e8:	0e 94 bb 21 	call	0x4376	; 0x4376 <print680xCV>
				if(logMode & logSOC){
					puts_P(PSTR("**fixme**\n"));		
					globalError = LogError;
				}
				*/
				if(logMode & logR1I)
    38ec:	80 91 84 00 	lds	r24, 0x0084
    38f0:	88 2f       	mov	r24, r24
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	80 71       	andi	r24, 0x10	; 16
    38f6:	99 27       	eor	r25, r25
    38f8:	00 97       	sbiw	r24, 0x00	; 0
    38fa:	19 f1       	breq	.+70     	; 0x3942 <logData+0x20a>
				{
					printf_P(PSTR("%"PRId16"\t"), (int16_t)R1I[i-1]);
    38fc:	8a 81       	ldd	r24, Y+2	; 0x02
    38fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	88 0f       	add	r24, r24
    3908:	99 1f       	adc	r25, r25
    390a:	8a 5d       	subi	r24, 0xDA	; 218
    390c:	9e 4f       	sbci	r25, 0xFE	; 254
    390e:	fc 01       	movw	r30, r24
    3910:	80 81       	ld	r24, Z
    3912:	91 81       	ldd	r25, Z+1	; 0x01
    3914:	a2 81       	ldd	r26, Z+2	; 0x02
    3916:	b3 81       	ldd	r27, Z+3	; 0x03
    3918:	bc 01       	movw	r22, r24
    391a:	cd 01       	movw	r24, r26
    391c:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <__fixsfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	9c 01       	movw	r18, r24
    3926:	8d e1       	ldi	r24, 0x1D	; 29
    3928:	95 e0       	ldi	r25, 0x05	; 5
    392a:	43 2f       	mov	r20, r19
    392c:	4f 93       	push	r20
    392e:	2f 93       	push	r18
    3930:	29 2f       	mov	r18, r25
    3932:	2f 93       	push	r18
    3934:	8f 93       	push	r24
    3936:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
				}
				if(logMode & logPWMThresh)
    3942:	80 91 84 00 	lds	r24, 0x0084
    3946:	88 2f       	mov	r24, r24
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	80 72       	andi	r24, 0x20	; 32
    394c:	99 27       	eor	r25, r25
    394e:	00 97       	sbiw	r24, 0x00	; 0
    3950:	b9 f0       	breq	.+46     	; 0x3980 <logData+0x248>
				{
					printf_P(PSTR("%"PRIu8"\t"), balancePWMThresholds[i-1]);
    3952:	8a 81       	ldd	r24, Y+2	; 0x02
    3954:	9b 81       	ldd	r25, Y+3	; 0x03
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	80 55       	subi	r24, 0x50	; 80
    395a:	9d 4f       	sbci	r25, 0xFD	; 253
    395c:	fc 01       	movw	r30, r24
    395e:	80 81       	ld	r24, Z
    3960:	28 2f       	mov	r18, r24
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	81 e2       	ldi	r24, 0x21	; 33
    3966:	95 e0       	ldi	r25, 0x05	; 5
    3968:	43 2f       	mov	r20, r19
    396a:	4f 93       	push	r20
    396c:	2f 93       	push	r18
    396e:	29 2f       	mov	r18, r25
    3970:	2f 93       	push	r18
    3972:	8f 93       	push	r24
    3974:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
				//we are reporting A - seconds and there are 50 20mA per A
				//printf("\t%4"PRId32".%02"PRId32"\t", currentAccumulators[i-1]/CurrentTick, 
				//							(currentAccumulators[i-1] >= 0 ? 
				//								(currentAccumulators[i-1]%CurrentTick)*100 :
				//								((-currentAccumulators[i-1])%CurrentTick))/CurrentTick);
				printf_P(PSTR("%6"PRId32"\t"), currentAccumulators[i-1]/CurrentTick);
    3980:	8a 81       	ldd	r24, Y+2	; 0x02
    3982:	9b 81       	ldd	r25, Y+3	; 0x03
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	88 0f       	add	r24, r24
    3988:	99 1f       	adc	r25, r25
    398a:	88 0f       	add	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	85 51       	subi	r24, 0x15	; 21
    3990:	9f 4f       	sbci	r25, 0xFF	; 255
    3992:	fc 01       	movw	r30, r24
    3994:	80 81       	ld	r24, Z
    3996:	91 81       	ldd	r25, Z+1	; 0x01
    3998:	a2 81       	ldd	r26, Z+2	; 0x02
    399a:	b3 81       	ldd	r27, Z+3	; 0x03
    399c:	23 ea       	ldi	r18, 0xA3	; 163
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	50 e0       	ldi	r21, 0x00	; 0
    39a4:	bc 01       	movw	r22, r24
    39a6:	cd 01       	movw	r24, r26
    39a8:	0e 94 04 28 	call	0x5008	; 0x5008 <__divmodsi4>
    39ac:	da 01       	movw	r26, r20
    39ae:	c9 01       	movw	r24, r18
    39b0:	25 e2       	ldi	r18, 0x25	; 37
    39b2:	35 e0       	ldi	r19, 0x05	; 5
    39b4:	4b 2f       	mov	r20, r27
    39b6:	4f 93       	push	r20
    39b8:	4a 2f       	mov	r20, r26
    39ba:	4f 93       	push	r20
    39bc:	49 2f       	mov	r20, r25
    39be:	4f 93       	push	r20
    39c0:	8f 93       	push	r24
    39c2:	83 2f       	mov	r24, r19
    39c4:	8f 93       	push	r24
    39c6:	82 2f       	mov	r24, r18
    39c8:	8f 93       	push	r24
    39ca:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    39ce:	0f 90       	pop	r0
    39d0:	0f 90       	pop	r0
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
			if(logMode & logStackI)
			{
				printf("%"PRId16"\t", stackCurrent);
			}
			
			for(int i = 1; i <= NumberOfCells; i++)
    39da:	8a 81       	ldd	r24, Y+2	; 0x02
    39dc:	9b 81       	ldd	r25, Y+3	; 0x03
    39de:	01 96       	adiw	r24, 0x01	; 1
    39e0:	9b 83       	std	Y+3, r25	; 0x03
    39e2:	8a 83       	std	Y+2, r24	; 0x02
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	9b 81       	ldd	r25, Y+3	; 0x03
    39e8:	8d 30       	cpi	r24, 0x0D	; 13
    39ea:	91 05       	cpc	r25, r1
    39ec:	0c f4       	brge	.+2      	; 0x39f0 <logData+0x2b8>
    39ee:	57 cf       	rjmp	.-338    	; 0x389e <logData+0x166>
				//								(currentAccumulators[i-1]%CurrentTick)*100 :
				//								((-currentAccumulators[i-1])%CurrentTick))/CurrentTick);
				printf_P(PSTR("%6"PRId32"\t"), currentAccumulators[i-1]/CurrentTick);
			}
			
			printf_P(PSTR("\n"));
    39f0:	8b e2       	ldi	r24, 0x2B	; 43
    39f2:	95 e0       	ldi	r25, 0x05	; 5
    39f4:	29 2f       	mov	r18, r25
    39f6:	2f 93       	push	r18
    39f8:	8f 93       	push	r24
    39fa:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
			//we used the ADC readings, now we are done with them
		}			
	
		PT_YIELD(&var->ptVar);
    3a02:	19 82       	std	Y+1, r1	; 0x01
    3a04:	8c 81       	ldd	r24, Y+4	; 0x04
    3a06:	9d 81       	ldd	r25, Y+5	; 0x05
    3a08:	22 e0       	ldi	r18, 0x02	; 2
    3a0a:	3d e1       	ldi	r19, 0x1D	; 29
    3a0c:	fc 01       	movw	r30, r24
    3a0e:	31 83       	std	Z+1, r19	; 0x01
    3a10:	20 83       	st	Z, r18
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	88 23       	and	r24, r24
    3a16:	11 f4       	brne	.+4      	; 0x3a1c <logData+0x2e4>
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	01 c0       	rjmp	.+2      	; 0x3a1e <logData+0x2e6>
	}	
    3a1c:	a4 ce       	rjmp	.-696    	; 0x3766 <logData+0x2e>
	
	PT_END(&var->ptVar);
}
    3a1e:	29 96       	adiw	r28, 0x09	; 9
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	df 91       	pop	r29
    3a2c:	cf 91       	pop	r28
    3a2e:	08 95       	ret

00003a30 <SoftVoltageCheck>:

PT_THREAD(SoftVoltageCheck(commThreadVars* vars))
{
    3a30:	ef 92       	push	r14
    3a32:	ff 92       	push	r15
    3a34:	0f 93       	push	r16
    3a36:	1f 93       	push	r17
    3a38:	cf 93       	push	r28
    3a3a:	df 93       	push	r29
    3a3c:	00 d0       	rcall	.+0      	; 0x3a3e <SoftVoltageCheck+0xe>
    3a3e:	00 d0       	rcall	.+0      	; 0x3a40 <SoftVoltageCheck+0x10>
    3a40:	1f 92       	push	r1
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	9d 83       	std	Y+5, r25	; 0x05
    3a48:	8c 83       	std	Y+4, r24	; 0x04
	#ifndef IgnoreErrors
	static uint8_t errorCount=0;
	static uint32_t lastTime;
	#endif
	
	PT_BEGIN(&vars->ptVar);
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	89 83       	std	Y+1, r24	; 0x01
    3a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a50:	9d 81       	ldd	r25, Y+5	; 0x05
    3a52:	fc 01       	movw	r30, r24
    3a54:	80 81       	ld	r24, Z
    3a56:	91 81       	ldd	r25, Z+1	; 0x01
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	11 f0       	breq	.+4      	; 0x3a60 <SoftVoltageCheck+0x30>
    3a5c:	00 00       	nop
    3a5e:	c1 c0       	rjmp	.+386    	; 0x3be2 <SoftVoltageCheck+0x1b2>
	#ifndef IgnoreErrors
	lastTime=time;
    3a60:	80 91 1d 01 	lds	r24, 0x011D
    3a64:	90 91 1e 01 	lds	r25, 0x011E
    3a68:	a0 91 1f 01 	lds	r26, 0x011F
    3a6c:	b0 91 20 01 	lds	r27, 0x0120
    3a70:	80 93 8e 01 	sts	0x018E, r24
    3a74:	90 93 8f 01 	sts	0x018F, r25
    3a78:	a0 93 90 01 	sts	0x0190, r26
    3a7c:	b0 93 91 01 	sts	0x0191, r27
	#endif
	
	while (true)
	{
		if((NewADCReadings & ADCGlobalAlarm) && (time > 5))
    3a80:	80 91 21 01 	lds	r24, 0x0121
    3a84:	88 2f       	mov	r24, r24
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	88 70       	andi	r24, 0x08	; 8
    3a8a:	99 27       	eor	r25, r25
    3a8c:	00 97       	sbiw	r24, 0x00	; 0
    3a8e:	09 f4       	brne	.+2      	; 0x3a92 <SoftVoltageCheck+0x62>
    3a90:	7a c0       	rjmp	.+244    	; 0x3b86 <SoftVoltageCheck+0x156>
    3a92:	80 91 1d 01 	lds	r24, 0x011D
    3a96:	90 91 1e 01 	lds	r25, 0x011E
    3a9a:	a0 91 1f 01 	lds	r26, 0x011F
    3a9e:	b0 91 20 01 	lds	r27, 0x0120
    3aa2:	86 30       	cpi	r24, 0x06	; 6
    3aa4:	91 05       	cpc	r25, r1
    3aa6:	a1 05       	cpc	r26, r1
    3aa8:	b1 05       	cpc	r27, r1
    3aaa:	08 f4       	brcc	.+2      	; 0x3aae <SoftVoltageCheck+0x7e>
    3aac:	6c c0       	rjmp	.+216    	; 0x3b86 <SoftVoltageCheck+0x156>
		{
			NewADCReadings &= ~ADCGlobalAlarm;
    3aae:	80 91 21 01 	lds	r24, 0x0121
    3ab2:	87 7f       	andi	r24, 0xF7	; 247
    3ab4:	80 93 21 01 	sts	0x0121, r24
			
			#ifndef IgnoreErrors
			lastTime=time;
    3ab8:	80 91 1d 01 	lds	r24, 0x011D
    3abc:	90 91 1e 01 	lds	r25, 0x011E
    3ac0:	a0 91 1f 01 	lds	r26, 0x011F
    3ac4:	b0 91 20 01 	lds	r27, 0x0120
    3ac8:	80 93 8e 01 	sts	0x018E, r24
    3acc:	90 93 8f 01 	sts	0x018F, r25
    3ad0:	a0 93 90 01 	sts	0x0190, r26
    3ad4:	b0 93 91 01 	sts	0x0191, r27
			#endif
			
			for(int i = 1; i <= NumberOfCells; i++)
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	9b 83       	std	Y+3, r25	; 0x03
    3ade:	8a 83       	std	Y+2, r24	; 0x02
    3ae0:	4a c0       	rjmp	.+148    	; 0x3b76 <SoftVoltageCheck+0x146>
				//take 1 left shift by i-1 to get the bitfield for
				//that cell then and with the cell mask if the result
				//is 1, we don't want to check that cell
				if(!((1 << (i-1)) & MaskedCells))
				{
					reading = voltageFromCVReg(vars->voltageRegisters->reg.payload[0].bytes, i);
    3ae2:	2a 81       	ldd	r18, Y+2	; 0x02
    3ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ae8:	fc 01       	movw	r30, r24
    3aea:	82 81       	ldd	r24, Z+2	; 0x02
    3aec:	93 81       	ldd	r25, Z+3	; 0x03
    3aee:	02 96       	adiw	r24, 0x02	; 2
    3af0:	62 2f       	mov	r22, r18
    3af2:	0e 94 51 14 	call	0x28a2	; 0x28a2 <voltageFromCVReg>
    3af6:	90 93 93 01 	sts	0x0193, r25
    3afa:	80 93 92 01 	sts	0x0192, r24
					#ifndef IgnoreErrors
					
					#ifndef AllowChargeOverDischargedCells
					if((reading < alarmUV) || 
    3afe:	80 91 92 01 	lds	r24, 0x0192
    3b02:	90 91 93 01 	lds	r25, 0x0193
    3b06:	87 30       	cpi	r24, 0x07	; 7
    3b08:	f7 e0       	ldi	r31, 0x07	; 7
    3b0a:	9f 07       	cpc	r25, r31
    3b0c:	44 f0       	brlt	.+16     	; 0x3b1e <SoftVoltageCheck+0xee>
						(reading > alarmOV))
    3b0e:	80 91 92 01 	lds	r24, 0x0192
    3b12:	90 91 93 01 	lds	r25, 0x0193
				{
					reading = voltageFromCVReg(vars->voltageRegisters->reg.payload[0].bytes, i);
					#ifndef IgnoreErrors
					
					#ifndef AllowChargeOverDischargedCells
					if((reading < alarmUV) || 
    3b16:	89 30       	cpi	r24, 0x09	; 9
    3b18:	0c e0       	ldi	r16, 0x0C	; 12
    3b1a:	90 07       	cpc	r25, r16
    3b1c:	3c f1       	brlt	.+78     	; 0x3b6c <SoftVoltageCheck+0x13c>
						(reading > alarmOV))
					#else
					if(reading > alarmOV)
					#endif
					{
						if(errorCount > 3)
    3b1e:	80 91 94 01 	lds	r24, 0x0194
    3b22:	84 30       	cpi	r24, 0x04	; 4
    3b24:	e8 f0       	brcs	.+58     	; 0x3b60 <SoftVoltageCheck+0x130>
						{
							emergencyShutdown();
    3b26:	0e 94 1d 24 	call	0x483a	; 0x483a <emergencyShutdown>
							//light the error LED
							ErrorLEDPort = ~(1 << ErrorLED);
    3b2a:	82 e3       	ldi	r24, 0x32	; 50
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	2b ef       	ldi	r18, 0xFB	; 251
    3b30:	fc 01       	movw	r30, r24
    3b32:	20 83       	st	Z, r18
							//send a nice error message
							puts_P(PSTR("**Error some cell has under or over voltaged**\n"));
    3b34:	8d e2       	ldi	r24, 0x2D	; 45
    3b36:	95 e0       	ldi	r25, 0x05	; 5
    3b38:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
							
						#ifndef AllowChargeOverDischargedCells
							if(reading < alarmUV)
    3b3c:	80 91 92 01 	lds	r24, 0x0192
    3b40:	90 91 93 01 	lds	r25, 0x0193
    3b44:	87 30       	cpi	r24, 0x07	; 7
    3b46:	f7 e0       	ldi	r31, 0x07	; 7
    3b48:	9f 07       	cpc	r25, r31
    3b4a:	24 f4       	brge	.+8      	; 0x3b54 <SoftVoltageCheck+0x124>
								globalError = SoftCheckUVError;
    3b4c:	83 e3       	ldi	r24, 0x33	; 51
    3b4e:	80 93 6b 00 	sts	0x006B, r24
    3b52:	03 c0       	rjmp	.+6      	; 0x3b5a <SoftVoltageCheck+0x12a>
							else
						#endif
								globalError = SoftCheckOVError;
    3b54:	84 e3       	ldi	r24, 0x34	; 52
    3b56:	80 93 6b 00 	sts	0x006B, r24
							
							oneSecondPassed = 0x00;		//suppress possible next log
    3b5a:	10 92 fc 01 	sts	0x01FC, r1
						} else {
							errorCount++;
						}
						goto end;
    3b5e:	13 c0       	rjmp	.+38     	; 0x3b86 <SoftVoltageCheck+0x156>
						#endif
								globalError = SoftCheckOVError;
							
							oneSecondPassed = 0x00;		//suppress possible next log
						} else {
							errorCount++;
    3b60:	80 91 94 01 	lds	r24, 0x0194
    3b64:	8f 5f       	subi	r24, 0xFF	; 255
    3b66:	80 93 94 01 	sts	0x0194, r24
						}
						goto end;
    3b6a:	0d c0       	rjmp	.+26     	; 0x3b86 <SoftVoltageCheck+0x156>
			
			#ifndef IgnoreErrors
			lastTime=time;
			#endif
			
			for(int i = 1; i <= NumberOfCells; i++)
    3b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b70:	01 96       	adiw	r24, 0x01	; 1
    3b72:	9b 83       	std	Y+3, r25	; 0x03
    3b74:	8a 83       	std	Y+2, r24	; 0x02
    3b76:	8a 81       	ldd	r24, Y+2	; 0x02
    3b78:	9b 81       	ldd	r25, Y+3	; 0x03
    3b7a:	8d 30       	cpi	r24, 0x0D	; 13
    3b7c:	91 05       	cpc	r25, r1
    3b7e:	0c f4       	brge	.+2      	; 0x3b82 <SoftVoltageCheck+0x152>
    3b80:	b0 cf       	rjmp	.-160    	; 0x3ae2 <SoftVoltageCheck+0xb2>
					}
					#endif
				}			
			}	//end for
			#ifndef IgnoreErrors
			errorCount = 0;
    3b82:	10 92 94 01 	sts	0x0194, r1
		end:
		
		//make sure the voltage check runs with at least a certain frequency
		#ifndef IgnoreErrors
		#define SoftCheckTimeoutSeconds 30
		if(((time - lastTime) > SoftCheckTimeoutSeconds) && time > 6)
    3b86:	20 91 1d 01 	lds	r18, 0x011D
    3b8a:	30 91 1e 01 	lds	r19, 0x011E
    3b8e:	40 91 1f 01 	lds	r20, 0x011F
    3b92:	50 91 20 01 	lds	r21, 0x0120
    3b96:	80 91 8e 01 	lds	r24, 0x018E
    3b9a:	90 91 8f 01 	lds	r25, 0x018F
    3b9e:	a0 91 90 01 	lds	r26, 0x0190
    3ba2:	b0 91 91 01 	lds	r27, 0x0191
    3ba6:	79 01       	movw	r14, r18
    3ba8:	8a 01       	movw	r16, r20
    3baa:	e8 1a       	sub	r14, r24
    3bac:	f9 0a       	sbc	r15, r25
    3bae:	0a 0b       	sbc	r16, r26
    3bb0:	1b 0b       	sbc	r17, r27
    3bb2:	d8 01       	movw	r26, r16
    3bb4:	c7 01       	movw	r24, r14
    3bb6:	8f 31       	cpi	r24, 0x1F	; 31
    3bb8:	91 05       	cpc	r25, r1
    3bba:	a1 05       	cpc	r26, r1
    3bbc:	b1 05       	cpc	r27, r1
    3bbe:	80 f0       	brcs	.+32     	; 0x3be0 <SoftVoltageCheck+0x1b0>
    3bc0:	80 91 1d 01 	lds	r24, 0x011D
    3bc4:	90 91 1e 01 	lds	r25, 0x011E
    3bc8:	a0 91 1f 01 	lds	r26, 0x011F
    3bcc:	b0 91 20 01 	lds	r27, 0x0120
    3bd0:	87 30       	cpi	r24, 0x07	; 7
    3bd2:	91 05       	cpc	r25, r1
    3bd4:	a1 05       	cpc	r26, r1
    3bd6:	b1 05       	cpc	r27, r1
    3bd8:	18 f0       	brcs	.+6      	; 0x3be0 <SoftVoltageCheck+0x1b0>
		{
			
			globalError = SoftCheckTimeout;
    3bda:	85 e3       	ldi	r24, 0x35	; 53
    3bdc:	80 93 6b 00 	sts	0x006B, r24
		}
		#endif
		
		PT_YIELD(&vars->ptVar);
    3be0:	19 82       	std	Y+1, r1	; 0x01
    3be2:	8c 81       	ldd	r24, Y+4	; 0x04
    3be4:	9d 81       	ldd	r25, Y+5	; 0x05
    3be6:	21 ef       	ldi	r18, 0xF1	; 241
    3be8:	3d e1       	ldi	r19, 0x1D	; 29
    3bea:	fc 01       	movw	r30, r24
    3bec:	31 83       	std	Z+1, r19	; 0x01
    3bee:	20 83       	st	Z, r18
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	88 23       	and	r24, r24
    3bf4:	11 f4       	brne	.+4      	; 0x3bfa <SoftVoltageCheck+0x1ca>
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	01 c0       	rjmp	.+2      	; 0x3bfc <SoftVoltageCheck+0x1cc>
	}	//end while
    3bfa:	42 cf       	rjmp	.-380    	; 0x3a80 <SoftVoltageCheck+0x50>
	PT_END(&vars->ptVar);
}
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	0f 90       	pop	r0
    3c02:	0f 90       	pop	r0
    3c04:	0f 90       	pop	r0
    3c06:	df 91       	pop	r29
    3c08:	cf 91       	pop	r28
    3c0a:	1f 91       	pop	r17
    3c0c:	0f 91       	pop	r16
    3c0e:	ff 90       	pop	r15
    3c10:	ef 90       	pop	r14
    3c12:	08 95       	ret

00003c14 <ReadStackCurrent>:
	ReadADC0 = 1,
	ReadADC1,
};

PT_THREAD(ReadStackCurrent(struct pt* ptVars))
{
    3c14:	cf 93       	push	r28
    3c16:	df 93       	push	r29
    3c18:	cd b7       	in	r28, 0x3d	; 61
    3c1a:	de b7       	in	r29, 0x3e	; 62
    3c1c:	ac 97       	sbiw	r28, 0x2c	; 44
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	f8 94       	cli
    3c22:	de bf       	out	0x3e, r29	; 62
    3c24:	0f be       	out	0x3f, r0	; 63
    3c26:	cd bf       	out	0x3d, r28	; 61
    3c28:	98 a7       	std	Y+40, r25	; 0x28
    3c2a:	8f a3       	std	Y+39, r24	; 0x27
	static int16_t ADC0 = 0;
	static int16_t ADC1 = 0;
	static uint8_t ADCState;
	
	PT_BEGIN(ptVars);
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	89 83       	std	Y+1, r24	; 0x01
    3c30:	8f a1       	ldd	r24, Y+39	; 0x27
    3c32:	98 a5       	ldd	r25, Y+40	; 0x28
    3c34:	fc 01       	movw	r30, r24
    3c36:	80 81       	ld	r24, Z
    3c38:	91 81       	ldd	r25, Z+1	; 0x01
    3c3a:	00 97       	sbiw	r24, 0x00	; 0
    3c3c:	49 f0       	breq	.+18     	; 0x3c50 <ReadStackCurrent+0x3c>
    3c3e:	8f a1       	ldd	r24, Y+39	; 0x27
    3c40:	98 a5       	ldd	r25, Y+40	; 0x28
    3c42:	fc 01       	movw	r30, r24
    3c44:	80 81       	ld	r24, Z
    3c46:	91 81       	ldd	r25, Z+1	; 0x01
    3c48:	00 00       	nop
    3c4a:	8f 93       	push	r24
    3c4c:	9f 93       	push	r25
    3c4e:	08 95       	ret
	
	ADCState = ReadADC0;
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	80 93 95 01 	sts	0x0195, r24
	ADC0 = 0;
    3c56:	10 92 97 01 	sts	0x0197, r1
    3c5a:	10 92 96 01 	sts	0x0196, r1
	ADC1 = 0;
    3c5e:	10 92 99 01 	sts	0x0199, r1
    3c62:	10 92 98 01 	sts	0x0198, r1
	stackCurrent = 0;
    3c66:	10 92 1c 01 	sts	0x011C, r1
    3c6a:	10 92 1b 01 	sts	0x011B, r1
	
	//wait for the ADC to settle out before we start trying to read data
	PT_WAIT_UNTIL(ptVars, time > 1);
    3c6e:	8f a1       	ldd	r24, Y+39	; 0x27
    3c70:	98 a5       	ldd	r25, Y+40	; 0x28
    3c72:	27 e3       	ldi	r18, 0x37	; 55
    3c74:	3e e1       	ldi	r19, 0x1E	; 30
    3c76:	fc 01       	movw	r30, r24
    3c78:	31 83       	std	Z+1, r19	; 0x01
    3c7a:	20 83       	st	Z, r18
    3c7c:	80 91 1d 01 	lds	r24, 0x011D
    3c80:	90 91 1e 01 	lds	r25, 0x011E
    3c84:	a0 91 1f 01 	lds	r26, 0x011F
    3c88:	b0 91 20 01 	lds	r27, 0x0120
    3c8c:	82 30       	cpi	r24, 0x02	; 2
    3c8e:	91 05       	cpc	r25, r1
    3c90:	a1 05       	cpc	r26, r1
    3c92:	b1 05       	cpc	r27, r1
    3c94:	10 f4       	brcc	.+4      	; 0x3c9a <ReadStackCurrent+0x86>
    3c96:	80 e0       	ldi	r24, 0x00	; 0
    3c98:	e8 c1       	rjmp	.+976    	; 0x406a <ReadStackCurrent+0x456>
	
	while(true)
	{
		//if we are inhibiting the ADC readings, we want to reset everything and start over
		if(inhibitStackIADC)
    3c9a:	80 91 25 01 	lds	r24, 0x0125
    3c9e:	88 23       	and	r24, r24
    3ca0:	61 f1       	breq	.+88     	; 0x3cfa <ReadStackCurrent+0xe6>
		{
			//NewISenseReadings = 0x00;
			ADCState = ReadADC0;
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	80 93 95 01 	sts	0x0195, r24
			ADMUX = (ADMUX & (0xE0)) | 0;
    3ca8:	87 e2       	ldi	r24, 0x27	; 39
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	27 e2       	ldi	r18, 0x27	; 39
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	f9 01       	movw	r30, r18
    3cb2:	20 81       	ld	r18, Z
    3cb4:	20 7e       	andi	r18, 0xE0	; 224
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	20 83       	st	Z, r18
			PT_WAIT_WHILE(ptVars, inhibitStackIADC);
    3cba:	8f a1       	ldd	r24, Y+39	; 0x27
    3cbc:	98 a5       	ldd	r25, Y+40	; 0x28
    3cbe:	2d e5       	ldi	r18, 0x5D	; 93
    3cc0:	3e e1       	ldi	r19, 0x1E	; 30
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	31 83       	std	Z+1, r19	; 0x01
    3cc6:	20 83       	st	Z, r18
    3cc8:	80 91 25 01 	lds	r24, 0x0125
    3ccc:	88 23       	and	r24, r24
    3cce:	11 f0       	breq	.+4      	; 0x3cd4 <ReadStackCurrent+0xc0>
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	cb c1       	rjmp	.+918    	; 0x406a <ReadStackCurrent+0x456>
			ADCSRA &= ~(1 << ADIF);  //clear conversion
    3cd4:	86 e2       	ldi	r24, 0x26	; 38
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	26 e2       	ldi	r18, 0x26	; 38
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	f9 01       	movw	r30, r18
    3cde:	20 81       	ld	r18, Z
    3ce0:	2f 7e       	andi	r18, 0xEF	; 239
    3ce2:	fc 01       	movw	r30, r24
    3ce4:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	//start another conversion
    3ce6:	86 e2       	ldi	r24, 0x26	; 38
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	26 e2       	ldi	r18, 0x26	; 38
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	f9 01       	movw	r30, r18
    3cf0:	20 81       	ld	r18, Z
    3cf2:	20 64       	ori	r18, 0x40	; 64
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	20 83       	st	Z, r18
    3cf8:	6e c1       	rjmp	.+732    	; 0x3fd6 <ReadStackCurrent+0x3c2>
		}
		else if(ADCSRA & (1 << ADIF))
    3cfa:	86 e2       	ldi	r24, 0x26	; 38
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	fc 01       	movw	r30, r24
    3d00:	80 81       	ld	r24, Z
    3d02:	88 2f       	mov	r24, r24
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	80 71       	andi	r24, 0x10	; 16
    3d08:	99 27       	eor	r25, r25
    3d0a:	00 97       	sbiw	r24, 0x00	; 0
    3d0c:	09 f4       	brne	.+2      	; 0x3d10 <ReadStackCurrent+0xfc>
    3d0e:	63 c1       	rjmp	.+710    	; 0x3fd6 <ReadStackCurrent+0x3c2>
		{
			int32_t ADCTemp;
			ADCSRA &= ~(1 << ADIF);
    3d10:	86 e2       	ldi	r24, 0x26	; 38
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	26 e2       	ldi	r18, 0x26	; 38
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	f9 01       	movw	r30, r18
    3d1a:	20 81       	ld	r18, Z
    3d1c:	2f 7e       	andi	r18, 0xEF	; 239
    3d1e:	fc 01       	movw	r30, r24
    3d20:	20 83       	st	Z, r18
			//if last time we had state ReadADC0, this reading was for that
			if(ADCState == ReadADC0)
    3d22:	80 91 95 01 	lds	r24, 0x0195
    3d26:	81 30       	cpi	r24, 0x01	; 1
    3d28:	c9 f5       	brne	.+114    	; 0x3d9c <ReadStackCurrent+0x188>
			{
				ADCTemp = ADC;
    3d2a:	84 e2       	ldi	r24, 0x24	; 36
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	fc 01       	movw	r30, r24
    3d30:	80 81       	ld	r24, Z
    3d32:	91 81       	ldd	r25, Z+1	; 0x01
    3d34:	cc 01       	movw	r24, r24
    3d36:	a0 e0       	ldi	r26, 0x00	; 0
    3d38:	b0 e0       	ldi	r27, 0x00	; 0
    3d3a:	8a 83       	std	Y+2, r24	; 0x02
    3d3c:	9b 83       	std	Y+3, r25	; 0x03
    3d3e:	ac 83       	std	Y+4, r26	; 0x04
    3d40:	bd 83       	std	Y+5, r27	; 0x05
				ADCTemp=(((uint32_t)ADCTemp) * IMeasCalPosNum)/IMeasCalPosDem;
    3d42:	2a 81       	ldd	r18, Y+2	; 0x02
    3d44:	3b 81       	ldd	r19, Y+3	; 0x03
    3d46:	4c 81       	ldd	r20, Y+4	; 0x04
    3d48:	5d 81       	ldd	r21, Y+5	; 0x05
    3d4a:	87 ed       	ldi	r24, 0xD7	; 215
    3d4c:	92 e0       	ldi	r25, 0x02	; 2
    3d4e:	dc 01       	movw	r26, r24
    3d50:	0e 94 38 28 	call	0x5070	; 0x5070 <__muluhisi3>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	28 ee       	ldi	r18, 0xE8	; 232
    3d5a:	33 e0       	ldi	r19, 0x03	; 3
    3d5c:	40 e0       	ldi	r20, 0x00	; 0
    3d5e:	50 e0       	ldi	r21, 0x00	; 0
    3d60:	bc 01       	movw	r22, r24
    3d62:	cd 01       	movw	r24, r26
    3d64:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <__udivmodsi4>
    3d68:	da 01       	movw	r26, r20
    3d6a:	c9 01       	movw	r24, r18
    3d6c:	8a 83       	std	Y+2, r24	; 0x02
    3d6e:	9b 83       	std	Y+3, r25	; 0x03
    3d70:	ac 83       	std	Y+4, r26	; 0x04
    3d72:	bd 83       	std	Y+5, r27	; 0x05
				ADC0 = (uint16_t)ADCTemp;
    3d74:	8a 81       	ldd	r24, Y+2	; 0x02
    3d76:	9b 81       	ldd	r25, Y+3	; 0x03
    3d78:	90 93 97 01 	sts	0x0197, r25
    3d7c:	80 93 96 01 	sts	0x0196, r24
				
				ADCState = ReadADC1;
    3d80:	82 e0       	ldi	r24, 0x02	; 2
    3d82:	80 93 95 01 	sts	0x0195, r24
				ADMUX = (ADMUX & (0xE0)) | 1;
    3d86:	87 e2       	ldi	r24, 0x27	; 39
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	27 e2       	ldi	r18, 0x27	; 39
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	f9 01       	movw	r30, r18
    3d90:	20 81       	ld	r18, Z
    3d92:	20 7e       	andi	r18, 0xE0	; 224
    3d94:	21 60       	ori	r18, 0x01	; 1
    3d96:	fc 01       	movw	r30, r24
    3d98:	20 83       	st	Z, r18
    3d9a:	21 c0       	rjmp	.+66     	; 0x3dde <ReadStackCurrent+0x1ca>
			} else {
				ADCTemp = ADC;
    3d9c:	84 e2       	ldi	r24, 0x24	; 36
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	fc 01       	movw	r30, r24
    3da2:	80 81       	ld	r24, Z
    3da4:	91 81       	ldd	r25, Z+1	; 0x01
    3da6:	cc 01       	movw	r24, r24
    3da8:	a0 e0       	ldi	r26, 0x00	; 0
    3daa:	b0 e0       	ldi	r27, 0x00	; 0
    3dac:	8a 83       	std	Y+2, r24	; 0x02
    3dae:	9b 83       	std	Y+3, r25	; 0x03
    3db0:	ac 83       	std	Y+4, r26	; 0x04
    3db2:	bd 83       	std	Y+5, r27	; 0x05
				//ADCTemp = (((uint32_t)ADCTemp)* IMeasCalNegNum)/IMeasCalNegDem;
				ADC1 = (uint16_t)ADCTemp;
    3db4:	8a 81       	ldd	r24, Y+2	; 0x02
    3db6:	9b 81       	ldd	r25, Y+3	; 0x03
    3db8:	90 93 99 01 	sts	0x0199, r25
    3dbc:	80 93 98 01 	sts	0x0198, r24
				
				//we set NewISenseReadings here since that way we only update after we've read both positive and negative
				NewISenseReadings = 0xFF;
    3dc0:	8f ef       	ldi	r24, 0xFF	; 255
    3dc2:	80 93 22 01 	sts	0x0122, r24
				
				ADCState = ReadADC0;
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	80 93 95 01 	sts	0x0195, r24
				ADMUX = (ADMUX & (0xE0)) | 0;
    3dcc:	87 e2       	ldi	r24, 0x27	; 39
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	27 e2       	ldi	r18, 0x27	; 39
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	f9 01       	movw	r30, r18
    3dd6:	20 81       	ld	r18, Z
    3dd8:	20 7e       	andi	r18, 0xE0	; 224
    3dda:	fc 01       	movw	r30, r24
    3ddc:	20 83       	st	Z, r18
    3dde:	80 e0       	ldi	r24, 0x00	; 0
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	a0 ea       	ldi	r26, 0xA0	; 160
    3de4:	b0 e4       	ldi	r27, 0x40	; 64
    3de6:	8e 83       	std	Y+6, r24	; 0x06
    3de8:	9f 83       	std	Y+7, r25	; 0x07
    3dea:	a8 87       	std	Y+8, r26	; 0x08
    3dec:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    3dee:	2b ea       	ldi	r18, 0xAB	; 171
    3df0:	3a ea       	ldi	r19, 0xAA	; 170
    3df2:	4a e2       	ldi	r20, 0x2A	; 42
    3df4:	50 e4       	ldi	r21, 0x40	; 64
    3df6:	6e 81       	ldd	r22, Y+6	; 0x06
    3df8:	7f 81       	ldd	r23, Y+7	; 0x07
    3dfa:	88 85       	ldd	r24, Y+8	; 0x08
    3dfc:	99 85       	ldd	r25, Y+9	; 0x09
    3dfe:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	8a 87       	std	Y+10, r24	; 0x0a
    3e08:	9b 87       	std	Y+11, r25	; 0x0b
    3e0a:	ac 87       	std	Y+12, r26	; 0x0c
    3e0c:	bd 87       	std	Y+13, r27	; 0x0d
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    3e10:	9f 81       	ldd	r25, Y+7	; 0x07
    3e12:	a8 85       	ldd	r26, Y+8	; 0x08
    3e14:	b9 85       	ldd	r27, Y+9	; 0x09
    3e16:	9c 01       	movw	r18, r24
    3e18:	ad 01       	movw	r20, r26
    3e1a:	bc 01       	movw	r22, r24
    3e1c:	cd 01       	movw	r24, r26
    3e1e:	0e 94 cc 24 	call	0x4998	; 0x4998 <__addsf3>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	8e 87       	std	Y+14, r24	; 0x0e
    3e28:	9f 87       	std	Y+15, r25	; 0x0f
    3e2a:	a8 8b       	std	Y+16, r26	; 0x10
    3e2c:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	40 e8       	ldi	r20, 0x80	; 128
    3e34:	5f e3       	ldi	r21, 0x3F	; 63
    3e36:	6a 85       	ldd	r22, Y+10	; 0x0a
    3e38:	7b 85       	ldd	r23, Y+11	; 0x0b
    3e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e3e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__cmpsf2>
    3e42:	88 23       	and	r24, r24
    3e44:	1c f4       	brge	.+6      	; 0x3e4c <ReadStackCurrent+0x238>
		__ticks = 1;
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	8a 8b       	std	Y+18, r24	; 0x12
    3e4a:	b6 c0       	rjmp	.+364    	; 0x3fb8 <ReadStackCurrent+0x3a4>
	else if (__tmp2 > 65535)
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	3f ef       	ldi	r19, 0xFF	; 255
    3e50:	4f e7       	ldi	r20, 0x7F	; 127
    3e52:	57 e4       	ldi	r21, 0x47	; 71
    3e54:	6e 85       	ldd	r22, Y+14	; 0x0e
    3e56:	7f 85       	ldd	r23, Y+15	; 0x0f
    3e58:	88 89       	ldd	r24, Y+16	; 0x10
    3e5a:	99 89       	ldd	r25, Y+17	; 0x11
    3e5c:	0e 94 d5 26 	call	0x4daa	; 0x4daa <__gesf2>
    3e60:	18 16       	cp	r1, r24
    3e62:	0c f0       	brlt	.+2      	; 0x3e66 <ReadStackCurrent+0x252>
    3e64:	7f c0       	rjmp	.+254    	; 0x3f64 <ReadStackCurrent+0x350>
	{
		_delay_ms(__us / 1000.0);
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	4a e7       	ldi	r20, 0x7A	; 122
    3e6c:	54 e4       	ldi	r21, 0x44	; 68
    3e6e:	6e 81       	ldd	r22, Y+6	; 0x06
    3e70:	7f 81       	ldd	r23, Y+7	; 0x07
    3e72:	88 85       	ldd	r24, Y+8	; 0x08
    3e74:	99 85       	ldd	r25, Y+9	; 0x09
    3e76:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__divsf3>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	8b 8b       	std	Y+19, r24	; 0x13
    3e80:	9c 8b       	std	Y+20, r25	; 0x14
    3e82:	ad 8b       	std	Y+21, r26	; 0x15
    3e84:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	4a ef       	ldi	r20, 0xFA	; 250
    3e8c:	54 e4       	ldi	r21, 0x44	; 68
    3e8e:	6b 89       	ldd	r22, Y+19	; 0x13
    3e90:	7c 89       	ldd	r23, Y+20	; 0x14
    3e92:	8d 89       	ldd	r24, Y+21	; 0x15
    3e94:	9e 89       	ldd	r25, Y+22	; 0x16
    3e96:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	8f 8b       	std	Y+23, r24	; 0x17
    3ea0:	98 8f       	std	Y+24, r25	; 0x18
    3ea2:	a9 8f       	std	Y+25, r26	; 0x19
    3ea4:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	40 e8       	ldi	r20, 0x80	; 128
    3eac:	5f e3       	ldi	r21, 0x3F	; 63
    3eae:	6f 89       	ldd	r22, Y+23	; 0x17
    3eb0:	78 8d       	ldd	r23, Y+24	; 0x18
    3eb2:	89 8d       	ldd	r24, Y+25	; 0x19
    3eb4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3eb6:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__cmpsf2>
    3eba:	88 23       	and	r24, r24
    3ebc:	2c f4       	brge	.+10     	; 0x3ec8 <ReadStackCurrent+0x2b4>
		__ticks = 1;
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	9c 8f       	std	Y+28, r25	; 0x1c
    3ec4:	8b 8f       	std	Y+27, r24	; 0x1b
    3ec6:	41 c0       	rjmp	.+130    	; 0x3f4a <ReadStackCurrent+0x336>
	else if (__tmp > 65535)
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	3f ef       	ldi	r19, 0xFF	; 255
    3ecc:	4f e7       	ldi	r20, 0x7F	; 127
    3ece:	57 e4       	ldi	r21, 0x47	; 71
    3ed0:	6f 89       	ldd	r22, Y+23	; 0x17
    3ed2:	78 8d       	ldd	r23, Y+24	; 0x18
    3ed4:	89 8d       	ldd	r24, Y+25	; 0x19
    3ed6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ed8:	0e 94 d5 26 	call	0x4daa	; 0x4daa <__gesf2>
    3edc:	18 16       	cp	r1, r24
    3ede:	5c f5       	brge	.+86     	; 0x3f36 <ReadStackCurrent+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	40 e2       	ldi	r20, 0x20	; 32
    3ee6:	51 e4       	ldi	r21, 0x41	; 65
    3ee8:	6b 89       	ldd	r22, Y+19	; 0x13
    3eea:	7c 89       	ldd	r23, Y+20	; 0x14
    3eec:	8d 89       	ldd	r24, Y+21	; 0x15
    3eee:	9e 89       	ldd	r25, Y+22	; 0x16
    3ef0:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__mulsf3>
    3ef4:	dc 01       	movw	r26, r24
    3ef6:	cb 01       	movw	r24, r22
    3ef8:	bc 01       	movw	r22, r24
    3efa:	cd 01       	movw	r24, r26
    3efc:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <__fixunssfsi>
    3f00:	dc 01       	movw	r26, r24
    3f02:	cb 01       	movw	r24, r22
    3f04:	9c 8f       	std	Y+28, r25	; 0x1c
    3f06:	8b 8f       	std	Y+27, r24	; 0x1b
    3f08:	0f c0       	rjmp	.+30     	; 0x3f28 <ReadStackCurrent+0x314>
    3f0a:	88 ec       	ldi	r24, 0xC8	; 200
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	9e 8f       	std	Y+30, r25	; 0x1e
    3f10:	8d 8f       	std	Y+29, r24	; 0x1d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f16:	01 97       	sbiw	r24, 0x01	; 1
    3f18:	f1 f7       	brne	.-4      	; 0x3f16 <ReadStackCurrent+0x302>
    3f1a:	9e 8f       	std	Y+30, r25	; 0x1e
    3f1c:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f22:	01 97       	sbiw	r24, 0x01	; 1
    3f24:	9c 8f       	std	Y+28, r25	; 0x1c
    3f26:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f2c:	00 97       	sbiw	r24, 0x00	; 0
    3f2e:	69 f7       	brne	.-38     	; 0x3f0a <ReadStackCurrent+0x2f6>
    3f30:	8e a1       	ldd	r24, Y+38	; 0x26
    3f32:	8a 8b       	std	Y+18, r24	; 0x12
    3f34:	41 c0       	rjmp	.+130    	; 0x3fb8 <ReadStackCurrent+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f36:	6f 89       	ldd	r22, Y+23	; 0x17
    3f38:	78 8d       	ldd	r23, Y+24	; 0x18
    3f3a:	89 8d       	ldd	r24, Y+25	; 0x19
    3f3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f3e:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <__fixunssfsi>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	9c 8f       	std	Y+28, r25	; 0x1c
    3f48:	8b 8f       	std	Y+27, r24	; 0x1b
    3f4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f4e:	98 a3       	std	Y+32, r25	; 0x20
    3f50:	8f 8f       	std	Y+31, r24	; 0x1f
    3f52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f54:	98 a1       	ldd	r25, Y+32	; 0x20
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	f1 f7       	brne	.-4      	; 0x3f56 <ReadStackCurrent+0x342>
    3f5a:	98 a3       	std	Y+32, r25	; 0x20
    3f5c:	8f 8f       	std	Y+31, r24	; 0x1f
    3f5e:	8e a1       	ldd	r24, Y+38	; 0x26
    3f60:	8a 8b       	std	Y+18, r24	; 0x12
    3f62:	2a c0       	rjmp	.+84     	; 0x3fb8 <ReadStackCurrent+0x3a4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	4f e7       	ldi	r20, 0x7F	; 127
    3f6a:	53 e4       	ldi	r21, 0x43	; 67
    3f6c:	6a 85       	ldd	r22, Y+10	; 0x0a
    3f6e:	7b 85       	ldd	r23, Y+11	; 0x0b
    3f70:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f72:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f74:	0e 94 d5 26 	call	0x4daa	; 0x4daa <__gesf2>
    3f78:	18 16       	cp	r1, r24
    3f7a:	ac f4       	brge	.+42     	; 0x3fa6 <ReadStackCurrent+0x392>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    3f7c:	6e 85       	ldd	r22, Y+14	; 0x0e
    3f7e:	7f 85       	ldd	r23, Y+15	; 0x0f
    3f80:	88 89       	ldd	r24, Y+16	; 0x10
    3f82:	99 89       	ldd	r25, Y+17	; 0x11
    3f84:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <__fixunssfsi>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	9a a3       	std	Y+34, r25	; 0x22
    3f8e:	89 a3       	std	Y+33, r24	; 0x21
    3f90:	89 a1       	ldd	r24, Y+33	; 0x21
    3f92:	9a a1       	ldd	r25, Y+34	; 0x22
    3f94:	9c a3       	std	Y+36, r25	; 0x24
    3f96:	8b a3       	std	Y+35, r24	; 0x23
    3f98:	8b a1       	ldd	r24, Y+35	; 0x23
    3f9a:	9c a1       	ldd	r25, Y+36	; 0x24
    3f9c:	01 97       	sbiw	r24, 0x01	; 1
    3f9e:	f1 f7       	brne	.-4      	; 0x3f9c <ReadStackCurrent+0x388>
    3fa0:	9c a3       	std	Y+36, r25	; 0x24
    3fa2:	8b a3       	std	Y+35, r24	; 0x23
    3fa4:	0f c0       	rjmp	.+30     	; 0x3fc4 <ReadStackCurrent+0x3b0>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3fa6:	6a 85       	ldd	r22, Y+10	; 0x0a
    3fa8:	7b 85       	ldd	r23, Y+11	; 0x0b
    3faa:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fac:	9d 85       	ldd	r25, Y+13	; 0x0d
    3fae:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <__fixunssfsi>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	8a 8b       	std	Y+18, r24	; 0x12
    3fb8:	8a 89       	ldd	r24, Y+18	; 0x12
    3fba:	8d a3       	std	Y+37, r24	; 0x25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3fbc:	8d a1       	ldd	r24, Y+37	; 0x25
    3fbe:	8a 95       	dec	r24
    3fc0:	f1 f7       	brne	.-4      	; 0x3fbe <ReadStackCurrent+0x3aa>
    3fc2:	8d a3       	std	Y+37, r24	; 0x25
			}
			_delay_us(5);
						
			ADCSRA |= (1 << ADSC);	//start another conversion
    3fc4:	86 e2       	ldi	r24, 0x26	; 38
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	26 e2       	ldi	r18, 0x26	; 38
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	f9 01       	movw	r30, r18
    3fce:	20 81       	ld	r18, Z
    3fd0:	20 64       	ori	r18, 0x40	; 64
    3fd2:	fc 01       	movw	r30, r24
    3fd4:	20 83       	st	Z, r18
		}

		if(NewISenseReadings & IsenseFlag)
    3fd6:	80 91 22 01 	lds	r24, 0x0122
    3fda:	88 2f       	mov	r24, r24
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	81 70       	andi	r24, 0x01	; 1
    3fe0:	99 27       	eor	r25, r25
    3fe2:	00 97       	sbiw	r24, 0x00	; 0
    3fe4:	a1 f1       	breq	.+104    	; 0x404e <ReadStackCurrent+0x43a>
		{
			NewISenseReadings &= ~IsenseFlag;
    3fe6:	80 91 22 01 	lds	r24, 0x0122
    3fea:	8e 7f       	andi	r24, 0xFE	; 254
    3fec:	80 93 22 01 	sts	0x0122, r24
			
			#define negativeThreshold 0x02
			if(ADC0 >= negativeThreshold)
    3ff0:	80 91 96 01 	lds	r24, 0x0196
    3ff4:	90 91 97 01 	lds	r25, 0x0197
    3ff8:	82 30       	cpi	r24, 0x02	; 2
    3ffa:	91 05       	cpc	r25, r1
    3ffc:	6c f0       	brlt	.+26     	; 0x4018 <ReadStackCurrent+0x404>
			{
				stackCurrent = ADC0;
    3ffe:	80 91 96 01 	lds	r24, 0x0196
    4002:	90 91 97 01 	lds	r25, 0x0197
    4006:	90 93 1c 01 	sts	0x011C, r25
    400a:	80 93 1b 01 	sts	0x011B, r24
				ADC1 = 0;
    400e:	10 92 99 01 	sts	0x0199, r1
    4012:	10 92 98 01 	sts	0x0198, r1
    4016:	1b c0       	rjmp	.+54     	; 0x404e <ReadStackCurrent+0x43a>
			}			
			else if(ADC1 >= negativeThreshold)
    4018:	80 91 98 01 	lds	r24, 0x0198
    401c:	90 91 99 01 	lds	r25, 0x0199
    4020:	82 30       	cpi	r24, 0x02	; 2
    4022:	91 05       	cpc	r25, r1
    4024:	84 f0       	brlt	.+32     	; 0x4046 <ReadStackCurrent+0x432>
			{
				stackCurrent = -ADC1;
    4026:	80 91 98 01 	lds	r24, 0x0198
    402a:	90 91 99 01 	lds	r25, 0x0199
    402e:	91 95       	neg	r25
    4030:	81 95       	neg	r24
    4032:	91 09       	sbc	r25, r1
    4034:	90 93 1c 01 	sts	0x011C, r25
    4038:	80 93 1b 01 	sts	0x011B, r24
				ADC0 = 0;
    403c:	10 92 97 01 	sts	0x0197, r1
    4040:	10 92 96 01 	sts	0x0196, r1
    4044:	04 c0       	rjmp	.+8      	; 0x404e <ReadStackCurrent+0x43a>
			}			
			else
				stackCurrent = 0;	//undefined case - both are 0
    4046:	10 92 1c 01 	sts	0x011C, r1
    404a:	10 92 1b 01 	sts	0x011B, r1
		}
				
					
			
		PT_YIELD(ptVars);
    404e:	19 82       	std	Y+1, r1	; 0x01
    4050:	8f a1       	ldd	r24, Y+39	; 0x27
    4052:	98 a5       	ldd	r25, Y+40	; 0x28
    4054:	28 e2       	ldi	r18, 0x28	; 40
    4056:	30 e2       	ldi	r19, 0x20	; 32
    4058:	fc 01       	movw	r30, r24
    405a:	31 83       	std	Z+1, r19	; 0x01
    405c:	20 83       	st	Z, r18
    405e:	89 81       	ldd	r24, Y+1	; 0x01
    4060:	88 23       	and	r24, r24
    4062:	11 f4       	brne	.+4      	; 0x4068 <ReadStackCurrent+0x454>
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	01 c0       	rjmp	.+2      	; 0x406a <ReadStackCurrent+0x456>
	}	//end while
    4068:	18 ce       	rjmp	.-976    	; 0x3c9a <ReadStackCurrent+0x86>
	
	PT_END(ptVars);
}
    406a:	ac 96       	adiw	r28, 0x2c	; 44
    406c:	0f b6       	in	r0, 0x3f	; 63
    406e:	f8 94       	cli
    4070:	de bf       	out	0x3e, r29	; 62
    4072:	0f be       	out	0x3f, r0	; 63
    4074:	cd bf       	out	0x3d, r28	; 61
    4076:	df 91       	pop	r29
    4078:	cf 91       	pop	r28
    407a:	08 95       	ret

0000407c <getSOC>:
//using the cell voltage, get the corresponding SOC.  We use a 32 entry table,
//then interpolate to get the SOC
//uint8_max = 100% soc
//0 = 0% soc
uint8_t getSOC(int16_t CV)
{
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
    4084:	a3 97       	sbiw	r28, 0x23	; 35
    4086:	0f b6       	in	r0, 0x3f	; 63
    4088:	f8 94       	cli
    408a:	de bf       	out	0x3e, r29	; 62
    408c:	0f be       	out	0x3f, r0	; 63
    408e:	cd bf       	out	0x3d, r28	; 61
    4090:	9f 8f       	std	Y+31, r25	; 0x1f
    4092:	8e 8f       	std	Y+30, r24	; 0x1e
									2547,2555,2563,2571,2578,2585,2592,2600,2607,2613,2621,
									2630,2639,2651,2662,2677,2694,2716,2737,2755,2799 };
	

	//first check bounds.  Return the limits if we are out of bounds.
	if(CV > pgm_read_word(&(voltageTable[voltageTableLength-1])))
    4094:	2e 8d       	ldd	r18, Y+30	; 0x1e
    4096:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4098:	8b e9       	ldi	r24, 0x9B	; 155
    409a:	95 e0       	ldi	r25, 0x05	; 5
    409c:	9d 83       	std	Y+5, r25	; 0x05
    409e:	8c 83       	std	Y+4, r24	; 0x04
    40a0:	8c 81       	ldd	r24, Y+4	; 0x04
    40a2:	9d 81       	ldd	r25, Y+5	; 0x05
    40a4:	fc 01       	movw	r30, r24
    40a6:	45 91       	lpm	r20, Z+
    40a8:	54 91       	lpm	r21, Z
    40aa:	cf 01       	movw	r24, r30
    40ac:	5f 83       	std	Y+7, r21	; 0x07
    40ae:	4e 83       	std	Y+6, r20	; 0x06
    40b0:	9d 83       	std	Y+5, r25	; 0x05
    40b2:	8c 83       	std	Y+4, r24	; 0x04
    40b4:	8e 81       	ldd	r24, Y+6	; 0x06
    40b6:	9f 81       	ldd	r25, Y+7	; 0x07
    40b8:	82 17       	cp	r24, r18
    40ba:	93 07       	cpc	r25, r19
    40bc:	10 f4       	brcc	.+4      	; 0x40c2 <getSOC+0x46>
	{
		return UINT8_MAX;
    40be:	8f ef       	ldi	r24, 0xFF	; 255
    40c0:	c7 c0       	rjmp	.+398    	; 0x4250 <getSOC+0x1d4>
	}
	
	int16_t tableV = pgm_read_word(&(voltageTable[0]));
    40c2:	8d e5       	ldi	r24, 0x5D	; 93
    40c4:	95 e0       	ldi	r25, 0x05	; 5
    40c6:	99 87       	std	Y+9, r25	; 0x09
    40c8:	88 87       	std	Y+8, r24	; 0x08
    40ca:	88 85       	ldd	r24, Y+8	; 0x08
    40cc:	99 85       	ldd	r25, Y+9	; 0x09
    40ce:	fc 01       	movw	r30, r24
    40d0:	25 91       	lpm	r18, Z+
    40d2:	34 91       	lpm	r19, Z
    40d4:	cf 01       	movw	r24, r30
    40d6:	3b 87       	std	Y+11, r19	; 0x0b
    40d8:	2a 87       	std	Y+10, r18	; 0x0a
    40da:	99 87       	std	Y+9, r25	; 0x09
    40dc:	88 87       	std	Y+8, r24	; 0x08
    40de:	8a 85       	ldd	r24, Y+10	; 0x0a
    40e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    40e2:	9a 83       	std	Y+2, r25	; 0x02
    40e4:	89 83       	std	Y+1, r24	; 0x01
	
	if(CV <= tableV)
    40e6:	2e 8d       	ldd	r18, Y+30	; 0x1e
    40e8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    40ea:	89 81       	ldd	r24, Y+1	; 0x01
    40ec:	9a 81       	ldd	r25, Y+2	; 0x02
    40ee:	82 17       	cp	r24, r18
    40f0:	93 07       	cpc	r25, r19
    40f2:	14 f0       	brlt	.+4      	; 0x40f8 <getSOC+0x7c>
	{
		return 0;
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	ac c0       	rjmp	.+344    	; 0x4250 <getSOC+0x1d4>
	}
	
	uint8_t idx;
	
	for(idx = 1; (idx < (voltageTableLength - 1)) && (tableV < CV); idx++)
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	8b 83       	std	Y+3, r24	; 0x03
    40fc:	1a c0       	rjmp	.+52     	; 0x4132 <getSOC+0xb6>
	{
		tableV = pgm_read_word(&(voltageTable[idx]));
    40fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4100:	88 2f       	mov	r24, r24
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	88 0f       	add	r24, r24
    4106:	99 1f       	adc	r25, r25
    4108:	83 5a       	subi	r24, 0xA3	; 163
    410a:	9a 4f       	sbci	r25, 0xFA	; 250
    410c:	9d 87       	std	Y+13, r25	; 0x0d
    410e:	8c 87       	std	Y+12, r24	; 0x0c
    4110:	8c 85       	ldd	r24, Y+12	; 0x0c
    4112:	9d 85       	ldd	r25, Y+13	; 0x0d
    4114:	fc 01       	movw	r30, r24
    4116:	25 91       	lpm	r18, Z+
    4118:	34 91       	lpm	r19, Z
    411a:	cf 01       	movw	r24, r30
    411c:	3f 87       	std	Y+15, r19	; 0x0f
    411e:	2e 87       	std	Y+14, r18	; 0x0e
    4120:	9d 87       	std	Y+13, r25	; 0x0d
    4122:	8c 87       	std	Y+12, r24	; 0x0c
    4124:	8e 85       	ldd	r24, Y+14	; 0x0e
    4126:	9f 85       	ldd	r25, Y+15	; 0x0f
    4128:	9a 83       	std	Y+2, r25	; 0x02
    412a:	89 83       	std	Y+1, r24	; 0x01
		return 0;
	}
	
	uint8_t idx;
	
	for(idx = 1; (idx < (voltageTableLength - 1)) && (tableV < CV); idx++)
    412c:	8b 81       	ldd	r24, Y+3	; 0x03
    412e:	8f 5f       	subi	r24, 0xFF	; 255
    4130:	8b 83       	std	Y+3, r24	; 0x03
    4132:	8b 81       	ldd	r24, Y+3	; 0x03
    4134:	8f 31       	cpi	r24, 0x1F	; 31
    4136:	38 f4       	brcc	.+14     	; 0x4146 <getSOC+0xca>
    4138:	29 81       	ldd	r18, Y+1	; 0x01
    413a:	3a 81       	ldd	r19, Y+2	; 0x02
    413c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    413e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4140:	28 17       	cp	r18, r24
    4142:	39 07       	cpc	r19, r25
    4144:	e4 f2       	brlt	.-72     	; 0x40fe <getSOC+0x82>
	{
		tableV = pgm_read_word(&(voltageTable[idx]));
	}
	
	
	if (CV == tableV)
    4146:	2e 8d       	ldd	r18, Y+30	; 0x1e
    4148:	3f 8d       	ldd	r19, Y+31	; 0x1f
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	9a 81       	ldd	r25, Y+2	; 0x02
    414e:	28 17       	cp	r18, r24
    4150:	39 07       	cpc	r19, r25
    4152:	91 f4       	brne	.+36     	; 0x4178 <getSOC+0xfc>
		return ((uint16_t)(UINT8_MAX)*(uint16_t)(idx))/voltageTableLength;
    4154:	8b 81       	ldd	r24, Y+3	; 0x03
    4156:	28 2f       	mov	r18, r24
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	4f ef       	ldi	r20, 0xFF	; 255
    415c:	42 9f       	mul	r20, r18
    415e:	c0 01       	movw	r24, r0
    4160:	43 9f       	mul	r20, r19
    4162:	90 0d       	add	r25, r0
    4164:	11 24       	eor	r1, r1
    4166:	96 95       	lsr	r25
    4168:	87 95       	ror	r24
    416a:	92 95       	swap	r25
    416c:	82 95       	swap	r24
    416e:	8f 70       	andi	r24, 0x0F	; 15
    4170:	89 27       	eor	r24, r25
    4172:	9f 70       	andi	r25, 0x0F	; 15
    4174:	89 27       	eor	r24, r25
    4176:	6c c0       	rjmp	.+216    	; 0x4250 <getSOC+0x1d4>
		
	int16_t SOC;

	idx--;	//for loop incremented idx 1 time too many
    4178:	8b 81       	ldd	r24, Y+3	; 0x03
    417a:	81 50       	subi	r24, 0x01	; 1
    417c:	8b 83       	std	Y+3, r24	; 0x03
	//can be uint since CV and n is guaranteed to be > nm1 (n minus 1)
	int16_t nm1 = pgm_read_word(&(voltageTable[idx-1]));
    417e:	8b 81       	ldd	r24, Y+3	; 0x03
    4180:	88 2f       	mov	r24, r24
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	88 0f       	add	r24, r24
    4188:	99 1f       	adc	r25, r25
    418a:	83 5a       	subi	r24, 0xA3	; 163
    418c:	9a 4f       	sbci	r25, 0xFA	; 250
    418e:	99 8b       	std	Y+17, r25	; 0x11
    4190:	88 8b       	std	Y+16, r24	; 0x10
    4192:	88 89       	ldd	r24, Y+16	; 0x10
    4194:	99 89       	ldd	r25, Y+17	; 0x11
    4196:	fc 01       	movw	r30, r24
    4198:	25 91       	lpm	r18, Z+
    419a:	34 91       	lpm	r19, Z
    419c:	cf 01       	movw	r24, r30
    419e:	3b 8b       	std	Y+19, r19	; 0x13
    41a0:	2a 8b       	std	Y+18, r18	; 0x12
    41a2:	99 8b       	std	Y+17, r25	; 0x11
    41a4:	88 8b       	std	Y+16, r24	; 0x10
    41a6:	8a 89       	ldd	r24, Y+18	; 0x12
    41a8:	9b 89       	ldd	r25, Y+19	; 0x13
    41aa:	9d 8b       	std	Y+21, r25	; 0x15
    41ac:	8c 8b       	std	Y+20, r24	; 0x14
	int16_t n = pgm_read_word (&(voltageTable[idx]));
    41ae:	8b 81       	ldd	r24, Y+3	; 0x03
    41b0:	88 2f       	mov	r24, r24
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	88 0f       	add	r24, r24
    41b6:	99 1f       	adc	r25, r25
    41b8:	83 5a       	subi	r24, 0xA3	; 163
    41ba:	9a 4f       	sbci	r25, 0xFA	; 250
    41bc:	9f 8b       	std	Y+23, r25	; 0x17
    41be:	8e 8b       	std	Y+22, r24	; 0x16
    41c0:	8e 89       	ldd	r24, Y+22	; 0x16
    41c2:	9f 89       	ldd	r25, Y+23	; 0x17
    41c4:	fc 01       	movw	r30, r24
    41c6:	25 91       	lpm	r18, Z+
    41c8:	34 91       	lpm	r19, Z
    41ca:	cf 01       	movw	r24, r30
    41cc:	39 8f       	std	Y+25, r19	; 0x19
    41ce:	28 8f       	std	Y+24, r18	; 0x18
    41d0:	9f 8b       	std	Y+23, r25	; 0x17
    41d2:	8e 8b       	std	Y+22, r24	; 0x16
    41d4:	88 8d       	ldd	r24, Y+24	; 0x18
    41d6:	99 8d       	ldd	r25, Y+25	; 0x19
    41d8:	9b 8f       	std	Y+27, r25	; 0x1b
    41da:	8a 8f       	std	Y+26, r24	; 0x1a
	//SOC = ((uint16_t)(idx - 1)*(uint16_t)UINT8_MAX)/voltageTableLength + 
	//	(UINT8_MAX/voltageTableLength*(uint16_t)(CV - nm1))/(n - nm1);
	
	//SOC = (((uint16_t)(idx-1))*UINT8_MAX + (((uint16_t)(CV - nm1))*UINT8_MAX)/(n-nm1))
	//		/(voltageTableLength-1);
	SOC = (int16_t)(idx-1)*UINT8_MAX;
    41dc:	8b 81       	ldd	r24, Y+3	; 0x03
    41de:	88 2f       	mov	r24, r24
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	01 97       	sbiw	r24, 0x01	; 1
    41e4:	9c 01       	movw	r18, r24
    41e6:	4f ef       	ldi	r20, 0xFF	; 255
    41e8:	42 9f       	mul	r20, r18
    41ea:	c0 01       	movw	r24, r0
    41ec:	43 9f       	mul	r20, r19
    41ee:	90 0d       	add	r25, r0
    41f0:	11 24       	eor	r1, r1
    41f2:	9d 8f       	std	Y+29, r25	; 0x1d
    41f4:	8c 8f       	std	Y+28, r24	; 0x1c
	SOC += (((int16_t)(CV - nm1))*UINT8_MAX)/((int16_t)(n-nm1));
    41f6:	2e 8d       	ldd	r18, Y+30	; 0x1e
    41f8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    41fa:	8c 89       	ldd	r24, Y+20	; 0x14
    41fc:	9d 89       	ldd	r25, Y+21	; 0x15
    41fe:	a9 01       	movw	r20, r18
    4200:	48 1b       	sub	r20, r24
    4202:	59 0b       	sbc	r21, r25
    4204:	ca 01       	movw	r24, r20
    4206:	9c 01       	movw	r18, r24
    4208:	4f ef       	ldi	r20, 0xFF	; 255
    420a:	42 9f       	mul	r20, r18
    420c:	c0 01       	movw	r24, r0
    420e:	43 9f       	mul	r20, r19
    4210:	90 0d       	add	r25, r0
    4212:	11 24       	eor	r1, r1
    4214:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4216:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4218:	2c 89       	ldd	r18, Y+20	; 0x14
    421a:	3d 89       	ldd	r19, Y+21	; 0x15
    421c:	ba 01       	movw	r22, r20
    421e:	62 1b       	sub	r22, r18
    4220:	73 0b       	sbc	r23, r19
    4222:	9b 01       	movw	r18, r22
    4224:	b9 01       	movw	r22, r18
    4226:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__udivmodhi4>
    422a:	cb 01       	movw	r24, r22
    422c:	9c 01       	movw	r18, r24
    422e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4230:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4232:	82 0f       	add	r24, r18
    4234:	93 1f       	adc	r25, r19
    4236:	9d 8f       	std	Y+29, r25	; 0x1d
    4238:	8c 8f       	std	Y+28, r24	; 0x1c
	SOC /= voltageTableLength-1;
    423a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    423c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    423e:	2f e1       	ldi	r18, 0x1F	; 31
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	b9 01       	movw	r22, r18
    4244:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <__divmodhi4>
    4248:	cb 01       	movw	r24, r22
    424a:	9d 8f       	std	Y+29, r25	; 0x1d
    424c:	8c 8f       	std	Y+28, r24	; 0x1c
	
	return SOC;
    424e:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    4250:	a3 96       	adiw	r28, 0x23	; 35
    4252:	0f b6       	in	r0, 0x3f	; 63
    4254:	f8 94       	cli
    4256:	de bf       	out	0x3e, r29	; 62
    4258:	0f be       	out	0x3f, r0	; 63
    425a:	cd bf       	out	0x3d, r28	; 61
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	08 95       	ret

00004262 <voltageFromSOC>:

/* SOC = 0 == 0% state of charge
 * SOC = UINT8_MAX == 100% state of charge
 */
int16_t voltageFromSOC(uint8_t SOC)
{
    4262:	cf 93       	push	r28
    4264:	df 93       	push	r29
    4266:	cd b7       	in	r28, 0x3d	; 61
    4268:	de b7       	in	r29, 0x3e	; 62
    426a:	61 97       	sbiw	r28, 0x11	; 17
    426c:	0f b6       	in	r0, 0x3f	; 63
    426e:	f8 94       	cli
    4270:	de bf       	out	0x3e, r29	; 62
    4272:	0f be       	out	0x3f, r0	; 63
    4274:	cd bf       	out	0x3d, r28	; 61
    4276:	89 8b       	std	Y+17, r24	; 0x11
	const static int16_t voltageTable [voltageTableLength] PROGMEM={	2000,2269,2383,2451,2473,2482,2489,2504,2517,2529,2539,
									2547,2555,2563,2571,2578,2585,2592,2600,2607,2613,2621,
									2630,2639,2651,2662,2677,2694,2716,2737,2755,2799 };
	#define tableStep ((uint8_t)((1<<8)/voltageTableLength))
	
	uint16_t cvl = pgm_read_word(&(voltageTable[SOC/tableStep]));
    4278:	89 89       	ldd	r24, Y+17	; 0x11
    427a:	86 95       	lsr	r24
    427c:	86 95       	lsr	r24
    427e:	86 95       	lsr	r24
    4280:	88 2f       	mov	r24, r24
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	88 0f       	add	r24, r24
    4286:	99 1f       	adc	r25, r25
    4288:	83 56       	subi	r24, 0x63	; 99
    428a:	9a 4f       	sbci	r25, 0xFA	; 250
    428c:	9a 83       	std	Y+2, r25	; 0x02
    428e:	89 83       	std	Y+1, r24	; 0x01
    4290:	89 81       	ldd	r24, Y+1	; 0x01
    4292:	9a 81       	ldd	r25, Y+2	; 0x02
    4294:	fc 01       	movw	r30, r24
    4296:	25 91       	lpm	r18, Z+
    4298:	34 91       	lpm	r19, Z
    429a:	cf 01       	movw	r24, r30
    429c:	3c 83       	std	Y+4, r19	; 0x04
    429e:	2b 83       	std	Y+3, r18	; 0x03
    42a0:	9a 83       	std	Y+2, r25	; 0x02
    42a2:	89 83       	std	Y+1, r24	; 0x01
    42a4:	8b 81       	ldd	r24, Y+3	; 0x03
    42a6:	9c 81       	ldd	r25, Y+4	; 0x04
    42a8:	9e 83       	std	Y+6, r25	; 0x06
    42aa:	8d 83       	std	Y+5, r24	; 0x05
	//if the SOC maps to a voltage in the table, just lookup the voltage - easy
	if((SOC % tableStep) == 0)
    42ac:	89 89       	ldd	r24, Y+17	; 0x11
    42ae:	87 70       	andi	r24, 0x07	; 7
    42b0:	88 23       	and	r24, r24
    42b2:	19 f4       	brne	.+6      	; 0x42ba <voltageFromSOC+0x58>
	{
		return cvl;
    42b4:	8d 81       	ldd	r24, Y+5	; 0x05
    42b6:	9e 81       	ldd	r25, Y+6	; 0x06
    42b8:	55 c0       	rjmp	.+170    	; 0x4364 <voltageFromSOC+0x102>
	// let x_2 be ceil(SOC/voltageTableLength)*voltageTableLength == SOCL + UINT8_MAX/voltageTableLength == SOCU
	// let x be the input SOC 
	//              cvu - cvl
	// CV = cv1 + ------------ (SOC - SOCL) = cv1 + (cvu - cvl)*(SOC - SOCL)*UINT8_MAX/voltageTableLength
	//             SOCU - SOCL
	uint16_t cvu = pgm_read_word(&(voltageTable[SOC/tableStep+1]));
    42ba:	89 89       	ldd	r24, Y+17	; 0x11
    42bc:	86 95       	lsr	r24
    42be:	86 95       	lsr	r24
    42c0:	86 95       	lsr	r24
    42c2:	88 2f       	mov	r24, r24
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	01 96       	adiw	r24, 0x01	; 1
    42c8:	88 0f       	add	r24, r24
    42ca:	99 1f       	adc	r25, r25
    42cc:	83 56       	subi	r24, 0x63	; 99
    42ce:	9a 4f       	sbci	r25, 0xFA	; 250
    42d0:	98 87       	std	Y+8, r25	; 0x08
    42d2:	8f 83       	std	Y+7, r24	; 0x07
    42d4:	8f 81       	ldd	r24, Y+7	; 0x07
    42d6:	98 85       	ldd	r25, Y+8	; 0x08
    42d8:	fc 01       	movw	r30, r24
    42da:	25 91       	lpm	r18, Z+
    42dc:	34 91       	lpm	r19, Z
    42de:	cf 01       	movw	r24, r30
    42e0:	3a 87       	std	Y+10, r19	; 0x0a
    42e2:	29 87       	std	Y+9, r18	; 0x09
    42e4:	98 87       	std	Y+8, r25	; 0x08
    42e6:	8f 83       	std	Y+7, r24	; 0x07
    42e8:	89 85       	ldd	r24, Y+9	; 0x09
    42ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ec:	9c 87       	std	Y+12, r25	; 0x0c
    42ee:	8b 87       	std	Y+11, r24	; 0x0b
	int16_t CV = cvl;
    42f0:	8d 81       	ldd	r24, Y+5	; 0x05
    42f2:	9e 81       	ldd	r25, Y+6	; 0x06
    42f4:	9e 87       	std	Y+14, r25	; 0x0e
    42f6:	8d 87       	std	Y+13, r24	; 0x0d
	int16_t SOCL = (SOC/tableStep)*tableStep;
    42f8:	89 89       	ldd	r24, Y+17	; 0x11
    42fa:	86 95       	lsr	r24
    42fc:	86 95       	lsr	r24
    42fe:	86 95       	lsr	r24
    4300:	88 2f       	mov	r24, r24
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	88 0f       	add	r24, r24
    4306:	99 1f       	adc	r25, r25
    4308:	88 0f       	add	r24, r24
    430a:	99 1f       	adc	r25, r25
    430c:	88 0f       	add	r24, r24
    430e:	99 1f       	adc	r25, r25
    4310:	98 8b       	std	Y+16, r25	; 0x10
    4312:	8f 87       	std	Y+15, r24	; 0x0f
	CV += ((int16_t)(cvu - cvl)*(SOC - SOCL))/tableStep;
    4314:	2b 85       	ldd	r18, Y+11	; 0x0b
    4316:	3c 85       	ldd	r19, Y+12	; 0x0c
    4318:	8d 81       	ldd	r24, Y+5	; 0x05
    431a:	9e 81       	ldd	r25, Y+6	; 0x06
    431c:	a9 01       	movw	r20, r18
    431e:	48 1b       	sub	r20, r24
    4320:	59 0b       	sbc	r21, r25
    4322:	ca 01       	movw	r24, r20
    4324:	ac 01       	movw	r20, r24
    4326:	89 89       	ldd	r24, Y+17	; 0x11
    4328:	28 2f       	mov	r18, r24
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	8f 85       	ldd	r24, Y+15	; 0x0f
    432e:	98 89       	ldd	r25, Y+16	; 0x10
    4330:	28 1b       	sub	r18, r24
    4332:	39 0b       	sbc	r19, r25
    4334:	42 9f       	mul	r20, r18
    4336:	c0 01       	movw	r24, r0
    4338:	43 9f       	mul	r20, r19
    433a:	90 0d       	add	r25, r0
    433c:	52 9f       	mul	r21, r18
    433e:	90 0d       	add	r25, r0
    4340:	11 24       	eor	r1, r1
    4342:	99 23       	and	r25, r25
    4344:	0c f4       	brge	.+2      	; 0x4348 <voltageFromSOC+0xe6>
    4346:	07 96       	adiw	r24, 0x07	; 7
    4348:	95 95       	asr	r25
    434a:	87 95       	ror	r24
    434c:	95 95       	asr	r25
    434e:	87 95       	ror	r24
    4350:	95 95       	asr	r25
    4352:	87 95       	ror	r24
    4354:	2d 85       	ldd	r18, Y+13	; 0x0d
    4356:	3e 85       	ldd	r19, Y+14	; 0x0e
    4358:	82 0f       	add	r24, r18
    435a:	93 1f       	adc	r25, r19
    435c:	9e 87       	std	Y+14, r25	; 0x0e
    435e:	8d 87       	std	Y+13, r24	; 0x0d
	return CV;
    4360:	8d 85       	ldd	r24, Y+13	; 0x0d
    4362:	9e 85       	ldd	r25, Y+14	; 0x0e
	
}
    4364:	61 96       	adiw	r28, 0x11	; 17
    4366:	0f b6       	in	r0, 0x3f	; 63
    4368:	f8 94       	cli
    436a:	de bf       	out	0x3e, r29	; 62
    436c:	0f be       	out	0x3f, r0	; 63
    436e:	cd bf       	out	0x3d, r28	; 61
    4370:	df 91       	pop	r29
    4372:	cf 91       	pop	r28
    4374:	08 95       	ret

00004376 <print680xCV>:
	return sum;
}
*/

void print680xCV(int16_t LT680xCount)
{
    4376:	cf 93       	push	r28
    4378:	df 93       	push	r29
    437a:	cd b7       	in	r28, 0x3d	; 61
    437c:	de b7       	in	r29, 0x3e	; 62
    437e:	2c 97       	sbiw	r28, 0x0c	; 12
    4380:	0f b6       	in	r0, 0x3f	; 63
    4382:	f8 94       	cli
    4384:	de bf       	out	0x3e, r29	; 62
    4386:	0f be       	out	0x3f, r0	; 63
    4388:	cd bf       	out	0x3d, r28	; 61
    438a:	98 87       	std	Y+8, r25	; 0x08
    438c:	8f 83       	std	Y+7, r24	; 0x07
	//each count is worth 1.5mV.  To convert to number of mV (in fixed point)
	// 1mV = 3/2 * count
	// + 0.5mV if cout % 2 == 1
	int16_t mv = (3*LT680xCount)/2;	
    438e:	2f 81       	ldd	r18, Y+7	; 0x07
    4390:	38 85       	ldd	r19, Y+8	; 0x08
    4392:	c9 01       	movw	r24, r18
    4394:	88 0f       	add	r24, r24
    4396:	99 1f       	adc	r25, r25
    4398:	82 0f       	add	r24, r18
    439a:	93 1f       	adc	r25, r19
    439c:	99 23       	and	r25, r25
    439e:	0c f4       	brge	.+2      	; 0x43a2 <print680xCV+0x2c>
    43a0:	01 96       	adiw	r24, 0x01	; 1
    43a2:	95 95       	asr	r25
    43a4:	87 95       	ror	r24
    43a6:	9a 83       	std	Y+2, r25	; 0x02
    43a8:	89 83       	std	Y+1, r24	; 0x01
	
	int16_t unit = mv/1000;
    43aa:	89 81       	ldd	r24, Y+1	; 0x01
    43ac:	9a 81       	ldd	r25, Y+2	; 0x02
    43ae:	28 ee       	ldi	r18, 0xE8	; 232
    43b0:	33 e0       	ldi	r19, 0x03	; 3
    43b2:	b9 01       	movw	r22, r18
    43b4:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <__divmodhi4>
    43b8:	cb 01       	movw	r24, r22
    43ba:	9c 83       	std	Y+4, r25	; 0x04
    43bc:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t decimal = mv%1000;
    43be:	89 81       	ldd	r24, Y+1	; 0x01
    43c0:	9a 81       	ldd	r25, Y+2	; 0x02
    43c2:	28 ee       	ldi	r18, 0xE8	; 232
    43c4:	33 e0       	ldi	r19, 0x03	; 3
    43c6:	b9 01       	movw	r22, r18
    43c8:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <__divmodhi4>
    43cc:	9e 83       	std	Y+6, r25	; 0x06
    43ce:	8d 83       	std	Y+5, r24	; 0x05
	
	//printf("%i", LT680xCount);
	printf_P(PSTR("%1i.%03u%c\t"), unit, decimal, ((LT680xCount % 2) ? '5' : '0'));
    43d0:	8f 81       	ldd	r24, Y+7	; 0x07
    43d2:	98 85       	ldd	r25, Y+8	; 0x08
    43d4:	81 70       	andi	r24, 0x01	; 1
    43d6:	99 27       	eor	r25, r25
    43d8:	00 97       	sbiw	r24, 0x00	; 0
    43da:	19 f0       	breq	.+6      	; 0x43e2 <print680xCV+0x6c>
    43dc:	85 e3       	ldi	r24, 0x35	; 53
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	02 c0       	rjmp	.+4      	; 0x43e6 <print680xCV+0x70>
    43e2:	80 e3       	ldi	r24, 0x30	; 48
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	2d ed       	ldi	r18, 0xDD	; 221
    43e8:	35 e0       	ldi	r19, 0x05	; 5
    43ea:	49 2f       	mov	r20, r25
    43ec:	4f 93       	push	r20
    43ee:	8f 93       	push	r24
    43f0:	8e 81       	ldd	r24, Y+6	; 0x06
    43f2:	8f 93       	push	r24
    43f4:	8d 81       	ldd	r24, Y+5	; 0x05
    43f6:	8f 93       	push	r24
    43f8:	8c 81       	ldd	r24, Y+4	; 0x04
    43fa:	8f 93       	push	r24
    43fc:	8b 81       	ldd	r24, Y+3	; 0x03
    43fe:	8f 93       	push	r24
    4400:	83 2f       	mov	r24, r19
    4402:	8f 93       	push	r24
    4404:	82 2f       	mov	r24, r18
    4406:	8f 93       	push	r24
    4408:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    440c:	8d b7       	in	r24, 0x3d	; 61
    440e:	9e b7       	in	r25, 0x3e	; 62
    4410:	08 96       	adiw	r24, 0x08	; 8
    4412:	0f b6       	in	r0, 0x3f	; 63
    4414:	f8 94       	cli
    4416:	de bf       	out	0x3e, r29	; 62
    4418:	0f be       	out	0x3f, r0	; 63
    441a:	cd bf       	out	0x3d, r28	; 61
}
    441c:	2c 96       	adiw	r28, 0x0c	; 12
    441e:	0f b6       	in	r0, 0x3f	; 63
    4420:	f8 94       	cli
    4422:	de bf       	out	0x3e, r29	; 62
    4424:	0f be       	out	0x3f, r0	; 63
    4426:	cd bf       	out	0x3d, r28	; 61
    4428:	df 91       	pop	r29
    442a:	cf 91       	pop	r28
    442c:	08 95       	ret

0000442e <printPowerSupplyStackVString>:

void printPowerSupplyStackVString(CVRegPacket6802* voltagePacket, uint8_t numberOfCells, char* currentString)
{
    442e:	0f 93       	push	r16
    4430:	1f 93       	push	r17
    4432:	cf 93       	push	r28
    4434:	df 93       	push	r29
    4436:	cd b7       	in	r28, 0x3d	; 61
    4438:	de b7       	in	r29, 0x3e	; 62
    443a:	2b 97       	sbiw	r28, 0x0b	; 11
    443c:	0f b6       	in	r0, 0x3f	; 63
    443e:	f8 94       	cli
    4440:	de bf       	out	0x3e, r29	; 62
    4442:	0f be       	out	0x3f, r0	; 63
    4444:	cd bf       	out	0x3d, r28	; 61
    4446:	98 87       	std	Y+8, r25	; 0x08
    4448:	8f 83       	std	Y+7, r24	; 0x07
    444a:	69 87       	std	Y+9, r22	; 0x09
    444c:	5b 87       	std	Y+11, r21	; 0x0b
    444e:	4a 87       	std	Y+10, r20	; 0x0a
	uint16_t sum = 0;
    4450:	1a 82       	std	Y+2, r1	; 0x02
    4452:	19 82       	std	Y+1, r1	; 0x01
	for(int i = 1; i <= numberOfCells; i++)
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	9c 83       	std	Y+4, r25	; 0x04
    445a:	8b 83       	std	Y+3, r24	; 0x03
    445c:	12 c0       	rjmp	.+36     	; 0x4482 <printPowerSupplyStackVString+0x54>
	{
		sum += voltageFromCVReg(voltagePacket->reg.payload[0].bytes, i);
    445e:	2b 81       	ldd	r18, Y+3	; 0x03
    4460:	8f 81       	ldd	r24, Y+7	; 0x07
    4462:	98 85       	ldd	r25, Y+8	; 0x08
    4464:	02 96       	adiw	r24, 0x02	; 2
    4466:	62 2f       	mov	r22, r18
    4468:	0e 94 51 14 	call	0x28a2	; 0x28a2 <voltageFromCVReg>
    446c:	29 81       	ldd	r18, Y+1	; 0x01
    446e:	3a 81       	ldd	r19, Y+2	; 0x02
    4470:	82 0f       	add	r24, r18
    4472:	93 1f       	adc	r25, r19
    4474:	9a 83       	std	Y+2, r25	; 0x02
    4476:	89 83       	std	Y+1, r24	; 0x01
}

void printPowerSupplyStackVString(CVRegPacket6802* voltagePacket, uint8_t numberOfCells, char* currentString)
{
	uint16_t sum = 0;
	for(int i = 1; i <= numberOfCells; i++)
    4478:	8b 81       	ldd	r24, Y+3	; 0x03
    447a:	9c 81       	ldd	r25, Y+4	; 0x04
    447c:	01 96       	adiw	r24, 0x01	; 1
    447e:	9c 83       	std	Y+4, r25	; 0x04
    4480:	8b 83       	std	Y+3, r24	; 0x03
    4482:	89 85       	ldd	r24, Y+9	; 0x09
    4484:	28 2f       	mov	r18, r24
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	8b 81       	ldd	r24, Y+3	; 0x03
    448a:	9c 81       	ldd	r25, Y+4	; 0x04
    448c:	28 17       	cp	r18, r24
    448e:	39 07       	cpc	r19, r25
    4490:	34 f7       	brge	.-52     	; 0x445e <printPowerSupplyStackVString+0x30>
	{
		sum += voltageFromCVReg(voltagePacket->reg.payload[0].bytes, i);
	}
	sum += 466;	//there's a schottkey diode drop from the PS to the cells: 0.55V/1.5mV = 367
    4492:	89 81       	ldd	r24, Y+1	; 0x01
    4494:	9a 81       	ldd	r25, Y+2	; 0x02
    4496:	8e 52       	subi	r24, 0x2E	; 46
    4498:	9e 4f       	sbci	r25, 0xFE	; 254
    449a:	9a 83       	std	Y+2, r25	; 0x02
    449c:	89 83       	std	Y+1, r24	; 0x01
	uint16_t mv = 3*(sum/2) + (sum % 2);
    449e:	89 81       	ldd	r24, Y+1	; 0x01
    44a0:	9a 81       	ldd	r25, Y+2	; 0x02
    44a2:	9c 01       	movw	r18, r24
    44a4:	36 95       	lsr	r19
    44a6:	27 95       	ror	r18
    44a8:	c9 01       	movw	r24, r18
    44aa:	88 0f       	add	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	28 0f       	add	r18, r24
    44b0:	39 1f       	adc	r19, r25
    44b2:	89 81       	ldd	r24, Y+1	; 0x01
    44b4:	9a 81       	ldd	r25, Y+2	; 0x02
    44b6:	81 70       	andi	r24, 0x01	; 1
    44b8:	99 27       	eor	r25, r25
    44ba:	82 0f       	add	r24, r18
    44bc:	93 1f       	adc	r25, r19
    44be:	9e 83       	std	Y+6, r25	; 0x06
    44c0:	8d 83       	std	Y+5, r24	; 0x05
	
	printf_P(PSTR("<ps<P%1i.%03i%cV%sRG>>\n"), mv/1000, mv%1000, ((sum % 2) ? '5' : '0'), currentString);
    44c2:	89 81       	ldd	r24, Y+1	; 0x01
    44c4:	9a 81       	ldd	r25, Y+2	; 0x02
    44c6:	81 70       	andi	r24, 0x01	; 1
    44c8:	99 27       	eor	r25, r25
    44ca:	00 97       	sbiw	r24, 0x00	; 0
    44cc:	19 f0       	breq	.+6      	; 0x44d4 <printPowerSupplyStackVString+0xa6>
    44ce:	e5 e3       	ldi	r30, 0x35	; 53
    44d0:	f0 e0       	ldi	r31, 0x00	; 0
    44d2:	02 c0       	rjmp	.+4      	; 0x44d8 <printPowerSupplyStackVString+0xaa>
    44d4:	e0 e3       	ldi	r30, 0x30	; 48
    44d6:	f0 e0       	ldi	r31, 0x00	; 0
    44d8:	0d 81       	ldd	r16, Y+5	; 0x05
    44da:	1e 81       	ldd	r17, Y+6	; 0x06
    44dc:	c8 01       	movw	r24, r16
    44de:	96 95       	lsr	r25
    44e0:	87 95       	ror	r24
    44e2:	96 95       	lsr	r25
    44e4:	87 95       	ror	r24
    44e6:	96 95       	lsr	r25
    44e8:	87 95       	ror	r24
    44ea:	9c 01       	movw	r18, r24
    44ec:	a5 ec       	ldi	r26, 0xC5	; 197
    44ee:	b0 e2       	ldi	r27, 0x20	; 32
    44f0:	0e 94 29 28 	call	0x5052	; 0x5052 <__umulhisi3>
    44f4:	ac 01       	movw	r20, r24
    44f6:	52 95       	swap	r21
    44f8:	42 95       	swap	r20
    44fa:	4f 70       	andi	r20, 0x0F	; 15
    44fc:	45 27       	eor	r20, r21
    44fe:	5f 70       	andi	r21, 0x0F	; 15
    4500:	45 27       	eor	r20, r21
    4502:	28 ee       	ldi	r18, 0xE8	; 232
    4504:	33 e0       	ldi	r19, 0x03	; 3
    4506:	42 9f       	mul	r20, r18
    4508:	c0 01       	movw	r24, r0
    450a:	43 9f       	mul	r20, r19
    450c:	90 0d       	add	r25, r0
    450e:	52 9f       	mul	r21, r18
    4510:	90 0d       	add	r25, r0
    4512:	11 24       	eor	r1, r1
    4514:	a8 01       	movw	r20, r16
    4516:	48 1b       	sub	r20, r24
    4518:	59 0b       	sbc	r21, r25
    451a:	8d 81       	ldd	r24, Y+5	; 0x05
    451c:	9e 81       	ldd	r25, Y+6	; 0x06
    451e:	96 95       	lsr	r25
    4520:	87 95       	ror	r24
    4522:	96 95       	lsr	r25
    4524:	87 95       	ror	r24
    4526:	96 95       	lsr	r25
    4528:	87 95       	ror	r24
    452a:	9c 01       	movw	r18, r24
    452c:	a5 ec       	ldi	r26, 0xC5	; 197
    452e:	b0 e2       	ldi	r27, 0x20	; 32
    4530:	0e 94 29 28 	call	0x5052	; 0x5052 <__umulhisi3>
    4534:	9c 01       	movw	r18, r24
    4536:	32 95       	swap	r19
    4538:	22 95       	swap	r18
    453a:	2f 70       	andi	r18, 0x0F	; 15
    453c:	23 27       	eor	r18, r19
    453e:	3f 70       	andi	r19, 0x0F	; 15
    4540:	23 27       	eor	r18, r19
    4542:	89 ee       	ldi	r24, 0xE9	; 233
    4544:	95 e0       	ldi	r25, 0x05	; 5
    4546:	6b 85       	ldd	r22, Y+11	; 0x0b
    4548:	6f 93       	push	r22
    454a:	6a 85       	ldd	r22, Y+10	; 0x0a
    454c:	6f 93       	push	r22
    454e:	6f 2f       	mov	r22, r31
    4550:	6f 93       	push	r22
    4552:	6e 2f       	mov	r22, r30
    4554:	6f 93       	push	r22
    4556:	65 2f       	mov	r22, r21
    4558:	6f 93       	push	r22
    455a:	4f 93       	push	r20
    455c:	43 2f       	mov	r20, r19
    455e:	4f 93       	push	r20
    4560:	2f 93       	push	r18
    4562:	29 2f       	mov	r18, r25
    4564:	2f 93       	push	r18
    4566:	8f 93       	push	r24
    4568:	0e 94 5f 28 	call	0x50be	; 0x50be <printf_P>
    456c:	8d b7       	in	r24, 0x3d	; 61
    456e:	9e b7       	in	r25, 0x3e	; 62
    4570:	0a 96       	adiw	r24, 0x0a	; 10
    4572:	0f b6       	in	r0, 0x3f	; 63
    4574:	f8 94       	cli
    4576:	de bf       	out	0x3e, r29	; 62
    4578:	0f be       	out	0x3f, r0	; 63
    457a:	cd bf       	out	0x3d, r28	; 61
	
}
    457c:	2b 96       	adiw	r28, 0x0b	; 11
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	f8 94       	cli
    4582:	de bf       	out	0x3e, r29	; 62
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	cd bf       	out	0x3d, r28	; 61
    4588:	df 91       	pop	r29
    458a:	cf 91       	pop	r28
    458c:	1f 91       	pop	r17
    458e:	0f 91       	pop	r16
    4590:	08 95       	ret

00004592 <sortInt32>:


//selection sort algorithm
//from http://en.wikipedia.org/wiki/Selection_sort
void sortInt32(int32_t* data, uint8_t size)
{
    4592:	cf 93       	push	r28
    4594:	df 93       	push	r29
    4596:	cd b7       	in	r28, 0x3d	; 61
    4598:	de b7       	in	r29, 0x3e	; 62
    459a:	2d 97       	sbiw	r28, 0x0d	; 13
    459c:	0f b6       	in	r0, 0x3f	; 63
    459e:	f8 94       	cli
    45a0:	de bf       	out	0x3e, r29	; 62
    45a2:	0f be       	out	0x3f, r0	; 63
    45a4:	cd bf       	out	0x3d, r28	; 61
    45a6:	9c 87       	std	Y+12, r25	; 0x0c
    45a8:	8b 87       	std	Y+11, r24	; 0x0b
    45aa:	6d 87       	std	Y+13, r22	; 0x0d
	int iPos;
	int iMin;
	int32_t temp;
	
	for(iPos = 0; iPos < size; iPos++)
    45ac:	1a 82       	std	Y+2, r1	; 0x02
    45ae:	19 82       	std	Y+1, r1	; 0x01
    45b0:	8f c0       	rjmp	.+286    	; 0x46d0 <sortInt32+0x13e>
	{
		iMin = iPos;
    45b2:	89 81       	ldd	r24, Y+1	; 0x01
    45b4:	9a 81       	ldd	r25, Y+2	; 0x02
    45b6:	9c 83       	std	Y+4, r25	; 0x04
    45b8:	8b 83       	std	Y+3, r24	; 0x03
		for(int i = iPos+1; i < size; i++)
    45ba:	89 81       	ldd	r24, Y+1	; 0x01
    45bc:	9a 81       	ldd	r25, Y+2	; 0x02
    45be:	01 96       	adiw	r24, 0x01	; 1
    45c0:	9e 83       	std	Y+6, r25	; 0x06
    45c2:	8d 83       	std	Y+5, r24	; 0x05
    45c4:	2c c0       	rjmp	.+88     	; 0x461e <sortInt32+0x8c>
		{
			if(data[i] < data[iMin])
    45c6:	8d 81       	ldd	r24, Y+5	; 0x05
    45c8:	9e 81       	ldd	r25, Y+6	; 0x06
    45ca:	88 0f       	add	r24, r24
    45cc:	99 1f       	adc	r25, r25
    45ce:	88 0f       	add	r24, r24
    45d0:	99 1f       	adc	r25, r25
    45d2:	2b 85       	ldd	r18, Y+11	; 0x0b
    45d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    45d6:	82 0f       	add	r24, r18
    45d8:	93 1f       	adc	r25, r19
    45da:	fc 01       	movw	r30, r24
    45dc:	20 81       	ld	r18, Z
    45de:	31 81       	ldd	r19, Z+1	; 0x01
    45e0:	42 81       	ldd	r20, Z+2	; 0x02
    45e2:	53 81       	ldd	r21, Z+3	; 0x03
    45e4:	8b 81       	ldd	r24, Y+3	; 0x03
    45e6:	9c 81       	ldd	r25, Y+4	; 0x04
    45e8:	88 0f       	add	r24, r24
    45ea:	99 1f       	adc	r25, r25
    45ec:	88 0f       	add	r24, r24
    45ee:	99 1f       	adc	r25, r25
    45f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    45f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    45f4:	86 0f       	add	r24, r22
    45f6:	97 1f       	adc	r25, r23
    45f8:	fc 01       	movw	r30, r24
    45fa:	80 81       	ld	r24, Z
    45fc:	91 81       	ldd	r25, Z+1	; 0x01
    45fe:	a2 81       	ldd	r26, Z+2	; 0x02
    4600:	b3 81       	ldd	r27, Z+3	; 0x03
    4602:	28 17       	cp	r18, r24
    4604:	39 07       	cpc	r19, r25
    4606:	4a 07       	cpc	r20, r26
    4608:	5b 07       	cpc	r21, r27
    460a:	24 f4       	brge	.+8      	; 0x4614 <sortInt32+0x82>
				iMin = i;
    460c:	8d 81       	ldd	r24, Y+5	; 0x05
    460e:	9e 81       	ldd	r25, Y+6	; 0x06
    4610:	9c 83       	std	Y+4, r25	; 0x04
    4612:	8b 83       	std	Y+3, r24	; 0x03
	int32_t temp;
	
	for(iPos = 0; iPos < size; iPos++)
	{
		iMin = iPos;
		for(int i = iPos+1; i < size; i++)
    4614:	8d 81       	ldd	r24, Y+5	; 0x05
    4616:	9e 81       	ldd	r25, Y+6	; 0x06
    4618:	01 96       	adiw	r24, 0x01	; 1
    461a:	9e 83       	std	Y+6, r25	; 0x06
    461c:	8d 83       	std	Y+5, r24	; 0x05
    461e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4620:	28 2f       	mov	r18, r24
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	8d 81       	ldd	r24, Y+5	; 0x05
    4626:	9e 81       	ldd	r25, Y+6	; 0x06
    4628:	82 17       	cp	r24, r18
    462a:	93 07       	cpc	r25, r19
    462c:	64 f2       	brlt	.-104    	; 0x45c6 <sortInt32+0x34>
		{
			if(data[i] < data[iMin])
				iMin = i;
		}
		
		if(iMin != iPos)
    462e:	2b 81       	ldd	r18, Y+3	; 0x03
    4630:	3c 81       	ldd	r19, Y+4	; 0x04
    4632:	89 81       	ldd	r24, Y+1	; 0x01
    4634:	9a 81       	ldd	r25, Y+2	; 0x02
    4636:	28 17       	cp	r18, r24
    4638:	39 07       	cpc	r19, r25
    463a:	09 f4       	brne	.+2      	; 0x463e <sortInt32+0xac>
    463c:	44 c0       	rjmp	.+136    	; 0x46c6 <sortInt32+0x134>
		{
			temp = data[iPos];
    463e:	89 81       	ldd	r24, Y+1	; 0x01
    4640:	9a 81       	ldd	r25, Y+2	; 0x02
    4642:	88 0f       	add	r24, r24
    4644:	99 1f       	adc	r25, r25
    4646:	88 0f       	add	r24, r24
    4648:	99 1f       	adc	r25, r25
    464a:	2b 85       	ldd	r18, Y+11	; 0x0b
    464c:	3c 85       	ldd	r19, Y+12	; 0x0c
    464e:	82 0f       	add	r24, r18
    4650:	93 1f       	adc	r25, r19
    4652:	fc 01       	movw	r30, r24
    4654:	80 81       	ld	r24, Z
    4656:	91 81       	ldd	r25, Z+1	; 0x01
    4658:	a2 81       	ldd	r26, Z+2	; 0x02
    465a:	b3 81       	ldd	r27, Z+3	; 0x03
    465c:	8f 83       	std	Y+7, r24	; 0x07
    465e:	98 87       	std	Y+8, r25	; 0x08
    4660:	a9 87       	std	Y+9, r26	; 0x09
    4662:	ba 87       	std	Y+10, r27	; 0x0a
			data[iPos] = data[iMin];
    4664:	89 81       	ldd	r24, Y+1	; 0x01
    4666:	9a 81       	ldd	r25, Y+2	; 0x02
    4668:	88 0f       	add	r24, r24
    466a:	99 1f       	adc	r25, r25
    466c:	88 0f       	add	r24, r24
    466e:	99 1f       	adc	r25, r25
    4670:	2b 85       	ldd	r18, Y+11	; 0x0b
    4672:	3c 85       	ldd	r19, Y+12	; 0x0c
    4674:	28 0f       	add	r18, r24
    4676:	39 1f       	adc	r19, r25
    4678:	8b 81       	ldd	r24, Y+3	; 0x03
    467a:	9c 81       	ldd	r25, Y+4	; 0x04
    467c:	88 0f       	add	r24, r24
    467e:	99 1f       	adc	r25, r25
    4680:	88 0f       	add	r24, r24
    4682:	99 1f       	adc	r25, r25
    4684:	4b 85       	ldd	r20, Y+11	; 0x0b
    4686:	5c 85       	ldd	r21, Y+12	; 0x0c
    4688:	84 0f       	add	r24, r20
    468a:	95 1f       	adc	r25, r21
    468c:	fc 01       	movw	r30, r24
    468e:	80 81       	ld	r24, Z
    4690:	91 81       	ldd	r25, Z+1	; 0x01
    4692:	a2 81       	ldd	r26, Z+2	; 0x02
    4694:	b3 81       	ldd	r27, Z+3	; 0x03
    4696:	f9 01       	movw	r30, r18
    4698:	80 83       	st	Z, r24
    469a:	91 83       	std	Z+1, r25	; 0x01
    469c:	a2 83       	std	Z+2, r26	; 0x02
    469e:	b3 83       	std	Z+3, r27	; 0x03
			data[iMin]=temp;
    46a0:	8b 81       	ldd	r24, Y+3	; 0x03
    46a2:	9c 81       	ldd	r25, Y+4	; 0x04
    46a4:	88 0f       	add	r24, r24
    46a6:	99 1f       	adc	r25, r25
    46a8:	88 0f       	add	r24, r24
    46aa:	99 1f       	adc	r25, r25
    46ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    46ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    46b0:	28 0f       	add	r18, r24
    46b2:	39 1f       	adc	r19, r25
    46b4:	8f 81       	ldd	r24, Y+7	; 0x07
    46b6:	98 85       	ldd	r25, Y+8	; 0x08
    46b8:	a9 85       	ldd	r26, Y+9	; 0x09
    46ba:	ba 85       	ldd	r27, Y+10	; 0x0a
    46bc:	f9 01       	movw	r30, r18
    46be:	80 83       	st	Z, r24
    46c0:	91 83       	std	Z+1, r25	; 0x01
    46c2:	a2 83       	std	Z+2, r26	; 0x02
    46c4:	b3 83       	std	Z+3, r27	; 0x03
{
	int iPos;
	int iMin;
	int32_t temp;
	
	for(iPos = 0; iPos < size; iPos++)
    46c6:	89 81       	ldd	r24, Y+1	; 0x01
    46c8:	9a 81       	ldd	r25, Y+2	; 0x02
    46ca:	01 96       	adiw	r24, 0x01	; 1
    46cc:	9a 83       	std	Y+2, r25	; 0x02
    46ce:	89 83       	std	Y+1, r24	; 0x01
    46d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    46d2:	28 2f       	mov	r18, r24
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	89 81       	ldd	r24, Y+1	; 0x01
    46d8:	9a 81       	ldd	r25, Y+2	; 0x02
    46da:	82 17       	cp	r24, r18
    46dc:	93 07       	cpc	r25, r19
    46de:	0c f4       	brge	.+2      	; 0x46e2 <sortInt32+0x150>
    46e0:	68 cf       	rjmp	.-304    	; 0x45b2 <sortInt32+0x20>
			temp = data[iPos];
			data[iPos] = data[iMin];
			data[iMin]=temp;
		}
	}
}
    46e2:	2d 96       	adiw	r28, 0x0d	; 13
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	f8 94       	cli
    46e8:	de bf       	out	0x3e, r29	; 62
    46ea:	0f be       	out	0x3f, r0	; 63
    46ec:	cd bf       	out	0x3d, r28	; 61
    46ee:	df 91       	pop	r29
    46f0:	cf 91       	pop	r28
    46f2:	08 95       	ret

000046f4 <doneCharging>:

bool doneCharging(CVRegPacket6802* voltageRegisters, uint8_t SOC)
{
    46f4:	cf 93       	push	r28
    46f6:	df 93       	push	r29
    46f8:	cd b7       	in	r28, 0x3d	; 61
    46fa:	de b7       	in	r29, 0x3e	; 62
    46fc:	29 97       	sbiw	r28, 0x09	; 9
    46fe:	0f b6       	in	r0, 0x3f	; 63
    4700:	f8 94       	cli
    4702:	de bf       	out	0x3e, r29	; 62
    4704:	0f be       	out	0x3f, r0	; 63
    4706:	cd bf       	out	0x3d, r28	; 61
    4708:	98 87       	std	Y+8, r25	; 0x08
    470a:	8f 83       	std	Y+7, r24	; 0x07
    470c:	69 87       	std	Y+9, r22	; 0x09
	int16_t CVLim;
	if(SOC == UINT8_MAX)
    470e:	89 85       	ldd	r24, Y+9	; 0x09
    4710:	8f 3f       	cpi	r24, 0xFF	; 255
    4712:	29 f4       	brne	.+10     	; 0x471e <doneCharging+0x2a>
	{
		CVLim = overVoltage;
    4714:	8f ee       	ldi	r24, 0xEF	; 239
    4716:	9a e0       	ldi	r25, 0x0A	; 10
    4718:	9a 83       	std	Y+2, r25	; 0x02
    471a:	89 83       	std	Y+1, r24	; 0x01
    471c:	05 c0       	rjmp	.+10     	; 0x4728 <doneCharging+0x34>
	} else {
		CVLim = voltageFromSOC(SOC);
    471e:	89 85       	ldd	r24, Y+9	; 0x09
    4720:	0e 94 31 21 	call	0x4262	; 0x4262 <voltageFromSOC>
    4724:	9a 83       	std	Y+2, r25	; 0x02
    4726:	89 83       	std	Y+1, r24	; 0x01
	}
	int16_t count;
	bool doneCharging = false;
    4728:	1b 82       	std	Y+3, r1	; 0x03
	
	for(uint8_t i = 1; i <= NumberOfCells; i++)
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	8c 83       	std	Y+4, r24	; 0x04
    472e:	14 c0       	rjmp	.+40     	; 0x4758 <doneCharging+0x64>
	{
		count = voltageFromCVReg(voltageRegisters->reg.payload[0].bytes, i);
    4730:	8f 81       	ldd	r24, Y+7	; 0x07
    4732:	98 85       	ldd	r25, Y+8	; 0x08
    4734:	02 96       	adiw	r24, 0x02	; 2
    4736:	6c 81       	ldd	r22, Y+4	; 0x04
    4738:	0e 94 51 14 	call	0x28a2	; 0x28a2 <voltageFromCVReg>
    473c:	9e 83       	std	Y+6, r25	; 0x06
    473e:	8d 83       	std	Y+5, r24	; 0x05
		//take 1 left shift by i-1 to get the bitfield for
		//that cell then and with the cell mask if the result
		//is 1, we don't want to check that cell
		if(!((1 << (i-1)) & MaskedCells))
		{
			if(count >= CVLim)	//done charging - quit charging
    4740:	2d 81       	ldd	r18, Y+5	; 0x05
    4742:	3e 81       	ldd	r19, Y+6	; 0x06
    4744:	89 81       	ldd	r24, Y+1	; 0x01
    4746:	9a 81       	ldd	r25, Y+2	; 0x02
    4748:	28 17       	cp	r18, r24
    474a:	39 07       	cpc	r19, r25
    474c:	14 f0       	brlt	.+4      	; 0x4752 <doneCharging+0x5e>
			{
				//puts_P(PSTR("<ps<S>>\n"));
				//puts_P(PSTR("Charging done\n"));
				doneCharging=true;
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	8b 83       	std	Y+3, r24	; 0x03
		CVLim = voltageFromSOC(SOC);
	}
	int16_t count;
	bool doneCharging = false;
	
	for(uint8_t i = 1; i <= NumberOfCells; i++)
    4752:	8c 81       	ldd	r24, Y+4	; 0x04
    4754:	8f 5f       	subi	r24, 0xFF	; 255
    4756:	8c 83       	std	Y+4, r24	; 0x04
    4758:	8c 81       	ldd	r24, Y+4	; 0x04
    475a:	8d 30       	cpi	r24, 0x0D	; 13
    475c:	48 f3       	brcs	.-46     	; 0x4730 <doneCharging+0x3c>
				//puts_P(PSTR("Charging done\n"));
				doneCharging=true;
			}
		}		
	}
	return doneCharging;
    475e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4760:	29 96       	adiw	r28, 0x09	; 9
    4762:	0f b6       	in	r0, 0x3f	; 63
    4764:	f8 94       	cli
    4766:	de bf       	out	0x3e, r29	; 62
    4768:	0f be       	out	0x3f, r0	; 63
    476a:	cd bf       	out	0x3d, r28	; 61
    476c:	df 91       	pop	r29
    476e:	cf 91       	pop	r28
    4770:	08 95       	ret

00004772 <doneDischarging>:

bool doneDischarging(CVRegPacket6802* voltageRegisters, uint8_t SOC)
{
    4772:	cf 93       	push	r28
    4774:	df 93       	push	r29
    4776:	cd b7       	in	r28, 0x3d	; 61
    4778:	de b7       	in	r29, 0x3e	; 62
    477a:	28 97       	sbiw	r28, 0x08	; 8
    477c:	0f b6       	in	r0, 0x3f	; 63
    477e:	f8 94       	cli
    4780:	de bf       	out	0x3e, r29	; 62
    4782:	0f be       	out	0x3f, r0	; 63
    4784:	cd bf       	out	0x3d, r28	; 61
    4786:	9f 83       	std	Y+7, r25	; 0x07
    4788:	8e 83       	std	Y+6, r24	; 0x06
    478a:	68 87       	std	Y+8, r22	; 0x08
	int16_t CVLim = voltageFromSOC(SOC);
    478c:	88 85       	ldd	r24, Y+8	; 0x08
    478e:	0e 94 31 21 	call	0x4262	; 0x4262 <voltageFromSOC>
    4792:	9b 83       	std	Y+3, r25	; 0x03
    4794:	8a 83       	std	Y+2, r24	; 0x02
	
	int16_t count;
	for(uint8_t i = 1; i <= NumberOfCells; i++)
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	89 83       	std	Y+1, r24	; 0x01
    479a:	1f c0       	rjmp	.+62     	; 0x47da <doneDischarging+0x68>
	{
		count = voltageFromCVReg(voltageRegisters->reg.payload[0].bytes, i);
    479c:	8e 81       	ldd	r24, Y+6	; 0x06
    479e:	9f 81       	ldd	r25, Y+7	; 0x07
    47a0:	02 96       	adiw	r24, 0x02	; 2
    47a2:	69 81       	ldd	r22, Y+1	; 0x01
    47a4:	0e 94 51 14 	call	0x28a2	; 0x28a2 <voltageFromCVReg>
    47a8:	9d 83       	std	Y+5, r25	; 0x05
    47aa:	8c 83       	std	Y+4, r24	; 0x04
		
		//Test the index against the Masked cells
		//take 1 left shift by i-1 to get the bitfield for
		//that cell then and with the cell mask if the result
		//is 1, we don't want to check that cell
		if(count <= CVLim && !isSet(i-1, MaskedCells))
    47ac:	2c 81       	ldd	r18, Y+4	; 0x04
    47ae:	3d 81       	ldd	r19, Y+5	; 0x05
    47b0:	8a 81       	ldd	r24, Y+2	; 0x02
    47b2:	9b 81       	ldd	r25, Y+3	; 0x03
    47b4:	82 17       	cp	r24, r18
    47b6:	93 07       	cpc	r25, r19
    47b8:	6c f0       	brlt	.+26     	; 0x47d4 <doneDischarging+0x62>
    47ba:	89 81       	ldd	r24, Y+1	; 0x01
    47bc:	81 50       	subi	r24, 0x01	; 1
    47be:	60 e0       	ldi	r22, 0x00	; 0
    47c0:	70 e0       	ldi	r23, 0x00	; 0
    47c2:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <isSet>
    47c6:	98 2f       	mov	r25, r24
    47c8:	81 e0       	ldi	r24, 0x01	; 1
    47ca:	89 27       	eor	r24, r25
    47cc:	88 23       	and	r24, r24
    47ce:	11 f0       	breq	.+4      	; 0x47d4 <doneDischarging+0x62>
		{
			return true;
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	07 c0       	rjmp	.+14     	; 0x47e2 <doneDischarging+0x70>
bool doneDischarging(CVRegPacket6802* voltageRegisters, uint8_t SOC)
{
	int16_t CVLim = voltageFromSOC(SOC);
	
	int16_t count;
	for(uint8_t i = 1; i <= NumberOfCells; i++)
    47d4:	89 81       	ldd	r24, Y+1	; 0x01
    47d6:	8f 5f       	subi	r24, 0xFF	; 255
    47d8:	89 83       	std	Y+1, r24	; 0x01
    47da:	89 81       	ldd	r24, Y+1	; 0x01
    47dc:	8d 30       	cpi	r24, 0x0D	; 13
    47de:	f0 f2       	brcs	.-68     	; 0x479c <doneDischarging+0x2a>
		if(count <= CVLim && !isSet(i-1, MaskedCells))
		{
			return true;
		}	
	}
	return false;
    47e0:	80 e0       	ldi	r24, 0x00	; 0
}
    47e2:	28 96       	adiw	r28, 0x08	; 8
    47e4:	0f b6       	in	r0, 0x3f	; 63
    47e6:	f8 94       	cli
    47e8:	de bf       	out	0x3e, r29	; 62
    47ea:	0f be       	out	0x3f, r0	; 63
    47ec:	cd bf       	out	0x3d, r28	; 61
    47ee:	df 91       	pop	r29
    47f0:	cf 91       	pop	r28
    47f2:	08 95       	ret

000047f4 <isSet>:

bool isSet(uint8_t bit, uint16_t bitString)
{
    47f4:	cf 93       	push	r28
    47f6:	df 93       	push	r29
    47f8:	00 d0       	rcall	.+0      	; 0x47fa <isSet+0x6>
    47fa:	1f 92       	push	r1
    47fc:	cd b7       	in	r28, 0x3d	; 61
    47fe:	de b7       	in	r29, 0x3e	; 62
    4800:	89 83       	std	Y+1, r24	; 0x01
    4802:	7b 83       	std	Y+3, r23	; 0x03
    4804:	6a 83       	std	Y+2, r22	; 0x02
	if((1 << bit) & bitString)
    4806:	89 81       	ldd	r24, Y+1	; 0x01
    4808:	28 2f       	mov	r18, r24
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	81 e0       	ldi	r24, 0x01	; 1
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	02 c0       	rjmp	.+4      	; 0x4816 <isSet+0x22>
    4812:	88 0f       	add	r24, r24
    4814:	99 1f       	adc	r25, r25
    4816:	2a 95       	dec	r18
    4818:	e2 f7       	brpl	.-8      	; 0x4812 <isSet+0x1e>
    481a:	9c 01       	movw	r18, r24
    481c:	8a 81       	ldd	r24, Y+2	; 0x02
    481e:	9b 81       	ldd	r25, Y+3	; 0x03
    4820:	82 23       	and	r24, r18
    4822:	93 23       	and	r25, r19
    4824:	00 97       	sbiw	r24, 0x00	; 0
    4826:	11 f0       	breq	.+4      	; 0x482c <isSet+0x38>
		return true;
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	01 c0       	rjmp	.+2      	; 0x482e <isSet+0x3a>
	else
		return false;
    482c:	80 e0       	ldi	r24, 0x00	; 0
}
    482e:	0f 90       	pop	r0
    4830:	0f 90       	pop	r0
    4832:	0f 90       	pop	r0
    4834:	df 91       	pop	r29
    4836:	cf 91       	pop	r28
    4838:	08 95       	ret

0000483a <emergencyShutdown>:

void emergencyShutdown()
{
    483a:	cf 93       	push	r28
    483c:	df 93       	push	r29
    483e:	cd b7       	in	r28, 0x3d	; 61
    4840:	de b7       	in	r29, 0x3e	; 62
    4842:	27 97       	sbiw	r28, 0x07	; 7
    4844:	0f b6       	in	r0, 0x3f	; 63
    4846:	f8 94       	cli
    4848:	de bf       	out	0x3e, r29	; 62
    484a:	0f be       	out	0x3f, r0	; 63
    484c:	cd bf       	out	0x3d, r28	; 61
	//send command to stop power supply (will need to be relayed by PC via GPIB)
	//syntax is that of a HP6034A power supply (with << and >> that will be removed
	//by the PC before forwarding to the power supply)
	puts_P(PSTR("<ps<S>>\n"));
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	96 e0       	ldi	r25, 0x06	; 6
    4852:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
	puts_P(PSTR("<al<ISET 0>>\n"));
    4856:	8a e0       	ldi	r24, 0x0A	; 10
    4858:	96 e0       	ldi	r25, 0x06	; 6
    485a:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
	puts_P(PSTR("<al<LOAD 0>>\n"));
    485e:	88 e1       	ldi	r24, 0x18	; 24
    4860:	96 e0       	ldi	r25, 0x06	; 6
    4862:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
	
	//disconnect stack from supplies
	DisableStackPort &= ~(1 << DisableStackPin);
    4866:	88 e3       	ldi	r24, 0x38	; 56
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	28 e3       	ldi	r18, 0x38	; 56
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	f9 01       	movw	r30, r18
    4870:	20 81       	ld	r18, Z
    4872:	2e 7f       	andi	r18, 0xFE	; 254
    4874:	fc 01       	movw	r30, r24
    4876:	20 83       	st	Z, r18
	BalancerDisconnectPort &= ~(1 << BalancerDisconnect);
    4878:	88 e3       	ldi	r24, 0x38	; 56
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	28 e3       	ldi	r18, 0x38	; 56
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	f9 01       	movw	r30, r18
    4882:	20 81       	ld	r18, Z
    4884:	2b 7f       	andi	r18, 0xFB	; 251
    4886:	fc 01       	movw	r30, r24
    4888:	20 83       	st	Z, r18
	
	CfgRegPacket6802 configRegisters;
	
	DischargerStatus = 0x00;
    488a:	10 92 fe 01 	sts	0x01FE, r1
    488e:	10 92 fd 01 	sts	0x01FD, r1
	updateCFGReg = true;
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	80 93 5e 01 	sts	0x015E, r24
	
	configRegisters.packet.payload[0].reg.CFGR1=(DischargerStatus & 0x00FF);
    4898:	80 91 fd 01 	lds	r24, 0x01FD
    489c:	90 91 fe 01 	lds	r25, 0x01FE
    48a0:	8b 83       	std	Y+3, r24	; 0x03
	configRegisters.packet.payload[0].reg.CFGR2 &= 0xF0;
    48a2:	8c 81       	ldd	r24, Y+4	; 0x04
    48a4:	80 7f       	andi	r24, 0xF0	; 240
    48a6:	8c 83       	std	Y+4, r24	; 0x04
	configRegisters.packet.payload[0].reg.CFGR2 |= ((DischargerStatus & 0x0F00) >> 8);
    48a8:	2c 81       	ldd	r18, Y+4	; 0x04
    48aa:	80 91 fd 01 	lds	r24, 0x01FD
    48ae:	90 91 fe 01 	lds	r25, 0x01FE
    48b2:	88 27       	eor	r24, r24
    48b4:	9f 70       	andi	r25, 0x0F	; 15
    48b6:	89 2f       	mov	r24, r25
    48b8:	99 27       	eor	r25, r25
    48ba:	82 2b       	or	r24, r18
    48bc:	8c 83       	std	Y+4, r24	; 0x04
	configRegisters.packet.command = WRCFG;
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	89 83       	std	Y+1, r24	; 0x01
	
	while(SPIStatus.TransferInProgress)	//finish up whatever you were doing
    48c2:	00 00       	nop
    48c4:	80 91 56 01 	lds	r24, 0x0156
    48c8:	88 23       	and	r24, r24
    48ca:	e1 f7       	brne	.-8      	; 0x48c4 <emergencyShutdown+0x8a>
		;
		
	startSPITransaction(configRegisters.bytes, sizeof(configRegisters.bytes), noFlags);
    48cc:	40 e0       	ldi	r20, 0x00	; 0
    48ce:	67 e0       	ldi	r22, 0x07	; 7
    48d0:	ce 01       	movw	r24, r28
    48d2:	01 96       	adiw	r24, 0x01	; 1
    48d4:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <startSPITransaction>
	
	ErrorLEDPort &= ~(1 << ErrorLED);
    48d8:	82 e3       	ldi	r24, 0x32	; 50
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	22 e3       	ldi	r18, 0x32	; 50
    48de:	30 e0       	ldi	r19, 0x00	; 0
    48e0:	f9 01       	movw	r30, r18
    48e2:	20 81       	ld	r18, Z
    48e4:	2b 7f       	andi	r18, 0xFB	; 251
    48e6:	fc 01       	movw	r30, r24
    48e8:	20 83       	st	Z, r18
}
    48ea:	27 96       	adiw	r28, 0x07	; 7
    48ec:	0f b6       	in	r0, 0x3f	; 63
    48ee:	f8 94       	cli
    48f0:	de bf       	out	0x3e, r29	; 62
    48f2:	0f be       	out	0x3f, r0	; 63
    48f4:	cd bf       	out	0x3d, r28	; 61
    48f6:	df 91       	pop	r29
    48f8:	cf 91       	pop	r28
    48fa:	08 95       	ret

000048fc <shutdown>:

void shutdown()
{
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
	//send command to stop power supply (will need to be relayed by PC via GPIB)
	//syntax is that of a HP6034A power supply (with << and >> that will be removed
	//by the PC before forwarding to the power supply)
	puts_P(PSTR("<ps<S>>\n"));
    4904:	86 e2       	ldi	r24, 0x26	; 38
    4906:	96 e0       	ldi	r25, 0x06	; 6
    4908:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
	puts_P(PSTR("<al<ISET 0>>\n"));
    490c:	8f e2       	ldi	r24, 0x2F	; 47
    490e:	96 e0       	ldi	r25, 0x06	; 6
    4910:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
	puts_P(PSTR("<al<LOAD 0>>\n"));
    4914:	8d e3       	ldi	r24, 0x3D	; 61
    4916:	96 e0       	ldi	r25, 0x06	; 6
    4918:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>
	puts_P(PSTR("**Exit**\n"));
    491c:	8b e4       	ldi	r24, 0x4B	; 75
    491e:	96 e0       	ldi	r25, 0x06	; 6
    4920:	0e 94 81 28 	call	0x5102	; 0x5102 <puts_P>

	//disconnect stack from supplies
	DisableStackPort &= ~(1 << DisableStackPin);
    4924:	88 e3       	ldi	r24, 0x38	; 56
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	28 e3       	ldi	r18, 0x38	; 56
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	f9 01       	movw	r30, r18
    492e:	20 81       	ld	r18, Z
    4930:	2e 7f       	andi	r18, 0xFE	; 254
    4932:	fc 01       	movw	r30, r24
    4934:	20 83       	st	Z, r18
	BalancerDisconnectPort &= ~(1 << BalancerDisconnect);
    4936:	88 e3       	ldi	r24, 0x38	; 56
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	28 e3       	ldi	r18, 0x38	; 56
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	f9 01       	movw	r30, r18
    4940:	20 81       	ld	r18, Z
    4942:	2b 7f       	andi	r18, 0xFB	; 251
    4944:	fc 01       	movw	r30, r24
    4946:	20 83       	st	Z, r18

	balanceMode = normalDisch;
    4948:	10 92 23 01 	sts	0x0123, r1
	DischargerStatus = 0x00;
    494c:	10 92 fe 01 	sts	0x01FE, r1
    4950:	10 92 fd 01 	sts	0x01FD, r1
	updateCFGReg = true;
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	80 93 5e 01 	sts	0x015E, r24

	ErrorLEDPort |= (1 << ErrorLED);
    495a:	82 e3       	ldi	r24, 0x32	; 50
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	22 e3       	ldi	r18, 0x32	; 50
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	f9 01       	movw	r30, r18
    4964:	20 81       	ld	r18, Z
    4966:	24 60       	ori	r18, 0x04	; 4
    4968:	fc 01       	movw	r30, r24
    496a:	20 83       	st	Z, r18
	BalanceLEDPort |= (1 << BalanceLED);
    496c:	82 e3       	ldi	r24, 0x32	; 50
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	22 e3       	ldi	r18, 0x32	; 50
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	f9 01       	movw	r30, r18
    4976:	20 81       	ld	r18, Z
    4978:	28 60       	ori	r18, 0x08	; 8
    497a:	fc 01       	movw	r30, r24
    497c:	20 83       	st	Z, r18
	CalibrateLEDPort |= (1 << CalibrateLED);
    497e:	82 e3       	ldi	r24, 0x32	; 50
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	22 e3       	ldi	r18, 0x32	; 50
    4984:	30 e0       	ldi	r19, 0x00	; 0
    4986:	f9 01       	movw	r30, r18
    4988:	20 81       	ld	r18, Z
    498a:	20 61       	ori	r18, 0x10	; 16
    498c:	fc 01       	movw	r30, r24
    498e:	20 83       	st	Z, r18
}
    4990:	df 91       	pop	r29
    4992:	cf 91       	pop	r28
    4994:	08 95       	ret

00004996 <__subsf3>:
    4996:	50 58       	subi	r21, 0x80	; 128

00004998 <__addsf3>:
    4998:	bb 27       	eor	r27, r27
    499a:	aa 27       	eor	r26, r26
    499c:	0e d0       	rcall	.+28     	; 0x49ba <__addsf3x>
    499e:	cb c1       	rjmp	.+918    	; 0x4d36 <__fp_round>
    49a0:	bc d1       	rcall	.+888    	; 0x4d1a <__fp_pscA>
    49a2:	30 f0       	brcs	.+12     	; 0x49b0 <__addsf3+0x18>
    49a4:	c1 d1       	rcall	.+898    	; 0x4d28 <__fp_pscB>
    49a6:	20 f0       	brcs	.+8      	; 0x49b0 <__addsf3+0x18>
    49a8:	31 f4       	brne	.+12     	; 0x49b6 <__addsf3+0x1e>
    49aa:	9f 3f       	cpi	r25, 0xFF	; 255
    49ac:	11 f4       	brne	.+4      	; 0x49b2 <__addsf3+0x1a>
    49ae:	1e f4       	brtc	.+6      	; 0x49b6 <__addsf3+0x1e>
    49b0:	8c c1       	rjmp	.+792    	; 0x4cca <__fp_nan>
    49b2:	0e f4       	brtc	.+2      	; 0x49b6 <__addsf3+0x1e>
    49b4:	e0 95       	com	r30
    49b6:	e7 fb       	bst	r30, 7
    49b8:	82 c1       	rjmp	.+772    	; 0x4cbe <__fp_inf>

000049ba <__addsf3x>:
    49ba:	e9 2f       	mov	r30, r25
    49bc:	cd d1       	rcall	.+922    	; 0x4d58 <__fp_split3>
    49be:	80 f3       	brcs	.-32     	; 0x49a0 <__addsf3+0x8>
    49c0:	ba 17       	cp	r27, r26
    49c2:	62 07       	cpc	r22, r18
    49c4:	73 07       	cpc	r23, r19
    49c6:	84 07       	cpc	r24, r20
    49c8:	95 07       	cpc	r25, r21
    49ca:	18 f0       	brcs	.+6      	; 0x49d2 <__addsf3x+0x18>
    49cc:	71 f4       	brne	.+28     	; 0x49ea <__addsf3x+0x30>
    49ce:	9e f5       	brtc	.+102    	; 0x4a36 <__addsf3x+0x7c>
    49d0:	e5 c1       	rjmp	.+970    	; 0x4d9c <__fp_zero>
    49d2:	0e f4       	brtc	.+2      	; 0x49d6 <__addsf3x+0x1c>
    49d4:	e0 95       	com	r30
    49d6:	0b 2e       	mov	r0, r27
    49d8:	ba 2f       	mov	r27, r26
    49da:	a0 2d       	mov	r26, r0
    49dc:	0b 01       	movw	r0, r22
    49de:	b9 01       	movw	r22, r18
    49e0:	90 01       	movw	r18, r0
    49e2:	0c 01       	movw	r0, r24
    49e4:	ca 01       	movw	r24, r20
    49e6:	a0 01       	movw	r20, r0
    49e8:	11 24       	eor	r1, r1
    49ea:	ff 27       	eor	r31, r31
    49ec:	59 1b       	sub	r21, r25
    49ee:	99 f0       	breq	.+38     	; 0x4a16 <__addsf3x+0x5c>
    49f0:	59 3f       	cpi	r21, 0xF9	; 249
    49f2:	50 f4       	brcc	.+20     	; 0x4a08 <__addsf3x+0x4e>
    49f4:	50 3e       	cpi	r21, 0xE0	; 224
    49f6:	68 f1       	brcs	.+90     	; 0x4a52 <__addsf3x+0x98>
    49f8:	1a 16       	cp	r1, r26
    49fa:	f0 40       	sbci	r31, 0x00	; 0
    49fc:	a2 2f       	mov	r26, r18
    49fe:	23 2f       	mov	r18, r19
    4a00:	34 2f       	mov	r19, r20
    4a02:	44 27       	eor	r20, r20
    4a04:	58 5f       	subi	r21, 0xF8	; 248
    4a06:	f3 cf       	rjmp	.-26     	; 0x49ee <__addsf3x+0x34>
    4a08:	46 95       	lsr	r20
    4a0a:	37 95       	ror	r19
    4a0c:	27 95       	ror	r18
    4a0e:	a7 95       	ror	r26
    4a10:	f0 40       	sbci	r31, 0x00	; 0
    4a12:	53 95       	inc	r21
    4a14:	c9 f7       	brne	.-14     	; 0x4a08 <__addsf3x+0x4e>
    4a16:	7e f4       	brtc	.+30     	; 0x4a36 <__addsf3x+0x7c>
    4a18:	1f 16       	cp	r1, r31
    4a1a:	ba 0b       	sbc	r27, r26
    4a1c:	62 0b       	sbc	r22, r18
    4a1e:	73 0b       	sbc	r23, r19
    4a20:	84 0b       	sbc	r24, r20
    4a22:	ba f0       	brmi	.+46     	; 0x4a52 <__addsf3x+0x98>
    4a24:	91 50       	subi	r25, 0x01	; 1
    4a26:	a1 f0       	breq	.+40     	; 0x4a50 <__addsf3x+0x96>
    4a28:	ff 0f       	add	r31, r31
    4a2a:	bb 1f       	adc	r27, r27
    4a2c:	66 1f       	adc	r22, r22
    4a2e:	77 1f       	adc	r23, r23
    4a30:	88 1f       	adc	r24, r24
    4a32:	c2 f7       	brpl	.-16     	; 0x4a24 <__addsf3x+0x6a>
    4a34:	0e c0       	rjmp	.+28     	; 0x4a52 <__addsf3x+0x98>
    4a36:	ba 0f       	add	r27, r26
    4a38:	62 1f       	adc	r22, r18
    4a3a:	73 1f       	adc	r23, r19
    4a3c:	84 1f       	adc	r24, r20
    4a3e:	48 f4       	brcc	.+18     	; 0x4a52 <__addsf3x+0x98>
    4a40:	87 95       	ror	r24
    4a42:	77 95       	ror	r23
    4a44:	67 95       	ror	r22
    4a46:	b7 95       	ror	r27
    4a48:	f7 95       	ror	r31
    4a4a:	9e 3f       	cpi	r25, 0xFE	; 254
    4a4c:	08 f0       	brcs	.+2      	; 0x4a50 <__addsf3x+0x96>
    4a4e:	b3 cf       	rjmp	.-154    	; 0x49b6 <__addsf3+0x1e>
    4a50:	93 95       	inc	r25
    4a52:	88 0f       	add	r24, r24
    4a54:	08 f0       	brcs	.+2      	; 0x4a58 <__addsf3x+0x9e>
    4a56:	99 27       	eor	r25, r25
    4a58:	ee 0f       	add	r30, r30
    4a5a:	97 95       	ror	r25
    4a5c:	87 95       	ror	r24
    4a5e:	08 95       	ret

00004a60 <__cmpsf2>:
    4a60:	0a d1       	rcall	.+532    	; 0x4c76 <__fp_cmp>
    4a62:	08 f4       	brcc	.+2      	; 0x4a66 <__cmpsf2+0x6>
    4a64:	81 e0       	ldi	r24, 0x01	; 1
    4a66:	08 95       	ret

00004a68 <__divsf3>:
    4a68:	0c d0       	rcall	.+24     	; 0x4a82 <__divsf3x>
    4a6a:	65 c1       	rjmp	.+714    	; 0x4d36 <__fp_round>
    4a6c:	5d d1       	rcall	.+698    	; 0x4d28 <__fp_pscB>
    4a6e:	40 f0       	brcs	.+16     	; 0x4a80 <__divsf3+0x18>
    4a70:	54 d1       	rcall	.+680    	; 0x4d1a <__fp_pscA>
    4a72:	30 f0       	brcs	.+12     	; 0x4a80 <__divsf3+0x18>
    4a74:	21 f4       	brne	.+8      	; 0x4a7e <__divsf3+0x16>
    4a76:	5f 3f       	cpi	r21, 0xFF	; 255
    4a78:	19 f0       	breq	.+6      	; 0x4a80 <__divsf3+0x18>
    4a7a:	21 c1       	rjmp	.+578    	; 0x4cbe <__fp_inf>
    4a7c:	51 11       	cpse	r21, r1
    4a7e:	8f c1       	rjmp	.+798    	; 0x4d9e <__fp_szero>
    4a80:	24 c1       	rjmp	.+584    	; 0x4cca <__fp_nan>

00004a82 <__divsf3x>:
    4a82:	6a d1       	rcall	.+724    	; 0x4d58 <__fp_split3>
    4a84:	98 f3       	brcs	.-26     	; 0x4a6c <__divsf3+0x4>

00004a86 <__divsf3_pse>:
    4a86:	99 23       	and	r25, r25
    4a88:	c9 f3       	breq	.-14     	; 0x4a7c <__divsf3+0x14>
    4a8a:	55 23       	and	r21, r21
    4a8c:	b1 f3       	breq	.-20     	; 0x4a7a <__divsf3+0x12>
    4a8e:	95 1b       	sub	r25, r21
    4a90:	55 0b       	sbc	r21, r21
    4a92:	bb 27       	eor	r27, r27
    4a94:	aa 27       	eor	r26, r26
    4a96:	62 17       	cp	r22, r18
    4a98:	73 07       	cpc	r23, r19
    4a9a:	84 07       	cpc	r24, r20
    4a9c:	38 f0       	brcs	.+14     	; 0x4aac <__divsf3_pse+0x26>
    4a9e:	9f 5f       	subi	r25, 0xFF	; 255
    4aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    4aa2:	22 0f       	add	r18, r18
    4aa4:	33 1f       	adc	r19, r19
    4aa6:	44 1f       	adc	r20, r20
    4aa8:	aa 1f       	adc	r26, r26
    4aaa:	a9 f3       	breq	.-22     	; 0x4a96 <__divsf3_pse+0x10>
    4aac:	33 d0       	rcall	.+102    	; 0x4b14 <__divsf3_pse+0x8e>
    4aae:	0e 2e       	mov	r0, r30
    4ab0:	3a f0       	brmi	.+14     	; 0x4ac0 <__divsf3_pse+0x3a>
    4ab2:	e0 e8       	ldi	r30, 0x80	; 128
    4ab4:	30 d0       	rcall	.+96     	; 0x4b16 <__divsf3_pse+0x90>
    4ab6:	91 50       	subi	r25, 0x01	; 1
    4ab8:	50 40       	sbci	r21, 0x00	; 0
    4aba:	e6 95       	lsr	r30
    4abc:	00 1c       	adc	r0, r0
    4abe:	ca f7       	brpl	.-14     	; 0x4ab2 <__divsf3_pse+0x2c>
    4ac0:	29 d0       	rcall	.+82     	; 0x4b14 <__divsf3_pse+0x8e>
    4ac2:	fe 2f       	mov	r31, r30
    4ac4:	27 d0       	rcall	.+78     	; 0x4b14 <__divsf3_pse+0x8e>
    4ac6:	66 0f       	add	r22, r22
    4ac8:	77 1f       	adc	r23, r23
    4aca:	88 1f       	adc	r24, r24
    4acc:	bb 1f       	adc	r27, r27
    4ace:	26 17       	cp	r18, r22
    4ad0:	37 07       	cpc	r19, r23
    4ad2:	48 07       	cpc	r20, r24
    4ad4:	ab 07       	cpc	r26, r27
    4ad6:	b0 e8       	ldi	r27, 0x80	; 128
    4ad8:	09 f0       	breq	.+2      	; 0x4adc <__divsf3_pse+0x56>
    4ada:	bb 0b       	sbc	r27, r27
    4adc:	80 2d       	mov	r24, r0
    4ade:	bf 01       	movw	r22, r30
    4ae0:	ff 27       	eor	r31, r31
    4ae2:	93 58       	subi	r25, 0x83	; 131
    4ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ae6:	2a f0       	brmi	.+10     	; 0x4af2 <__divsf3_pse+0x6c>
    4ae8:	9e 3f       	cpi	r25, 0xFE	; 254
    4aea:	51 05       	cpc	r21, r1
    4aec:	68 f0       	brcs	.+26     	; 0x4b08 <__divsf3_pse+0x82>
    4aee:	e7 c0       	rjmp	.+462    	; 0x4cbe <__fp_inf>
    4af0:	56 c1       	rjmp	.+684    	; 0x4d9e <__fp_szero>
    4af2:	5f 3f       	cpi	r21, 0xFF	; 255
    4af4:	ec f3       	brlt	.-6      	; 0x4af0 <__divsf3_pse+0x6a>
    4af6:	98 3e       	cpi	r25, 0xE8	; 232
    4af8:	dc f3       	brlt	.-10     	; 0x4af0 <__divsf3_pse+0x6a>
    4afa:	86 95       	lsr	r24
    4afc:	77 95       	ror	r23
    4afe:	67 95       	ror	r22
    4b00:	b7 95       	ror	r27
    4b02:	f7 95       	ror	r31
    4b04:	9f 5f       	subi	r25, 0xFF	; 255
    4b06:	c9 f7       	brne	.-14     	; 0x4afa <__divsf3_pse+0x74>
    4b08:	88 0f       	add	r24, r24
    4b0a:	91 1d       	adc	r25, r1
    4b0c:	96 95       	lsr	r25
    4b0e:	87 95       	ror	r24
    4b10:	97 f9       	bld	r25, 7
    4b12:	08 95       	ret
    4b14:	e1 e0       	ldi	r30, 0x01	; 1
    4b16:	66 0f       	add	r22, r22
    4b18:	77 1f       	adc	r23, r23
    4b1a:	88 1f       	adc	r24, r24
    4b1c:	bb 1f       	adc	r27, r27
    4b1e:	62 17       	cp	r22, r18
    4b20:	73 07       	cpc	r23, r19
    4b22:	84 07       	cpc	r24, r20
    4b24:	ba 07       	cpc	r27, r26
    4b26:	20 f0       	brcs	.+8      	; 0x4b30 <__divsf3_pse+0xaa>
    4b28:	62 1b       	sub	r22, r18
    4b2a:	73 0b       	sbc	r23, r19
    4b2c:	84 0b       	sbc	r24, r20
    4b2e:	ba 0b       	sbc	r27, r26
    4b30:	ee 1f       	adc	r30, r30
    4b32:	88 f7       	brcc	.-30     	; 0x4b16 <__divsf3_pse+0x90>
    4b34:	e0 95       	com	r30
    4b36:	08 95       	ret
    4b38:	19 f4       	brne	.+6      	; 0x4b40 <__divsf3_pse+0xba>
    4b3a:	0e f0       	brts	.+2      	; 0x4b3e <__divsf3_pse+0xb8>
    4b3c:	c0 c0       	rjmp	.+384    	; 0x4cbe <__fp_inf>
    4b3e:	2e c1       	rjmp	.+604    	; 0x4d9c <__fp_zero>
    4b40:	c4 c0       	rjmp	.+392    	; 0x4cca <__fp_nan>

00004b42 <exp>:
    4b42:	12 d1       	rcall	.+548    	; 0x4d68 <__fp_splitA>
    4b44:	c8 f3       	brcs	.-14     	; 0x4b38 <__divsf3_pse+0xb2>
    4b46:	96 38       	cpi	r25, 0x86	; 134
    4b48:	c0 f7       	brcc	.-16     	; 0x4b3a <__divsf3_pse+0xb4>
    4b4a:	07 f8       	bld	r0, 7
    4b4c:	0f 92       	push	r0
    4b4e:	e8 94       	clt
    4b50:	2b e3       	ldi	r18, 0x3B	; 59
    4b52:	3a ea       	ldi	r19, 0xAA	; 170
    4b54:	48 eb       	ldi	r20, 0xB8	; 184
    4b56:	5f e7       	ldi	r21, 0x7F	; 127
    4b58:	aa d1       	rcall	.+852    	; 0x4eae <__mulsf3_pse>
    4b5a:	0f 92       	push	r0
    4b5c:	0f 92       	push	r0
    4b5e:	0f 92       	push	r0
    4b60:	4d b7       	in	r20, 0x3d	; 61
    4b62:	5e b7       	in	r21, 0x3e	; 62
    4b64:	0f 92       	push	r0
    4b66:	62 d1       	rcall	.+708    	; 0x4e2c <modf>
    4b68:	ec ef       	ldi	r30, 0xFC	; 252
    4b6a:	f0 e0       	ldi	r31, 0x00	; 0
    4b6c:	b1 d0       	rcall	.+354    	; 0x4cd0 <__fp_powser>
    4b6e:	4f 91       	pop	r20
    4b70:	5f 91       	pop	r21
    4b72:	ef 91       	pop	r30
    4b74:	ff 91       	pop	r31
    4b76:	e5 95       	asr	r30
    4b78:	ee 1f       	adc	r30, r30
    4b7a:	ff 1f       	adc	r31, r31
    4b7c:	49 f0       	breq	.+18     	; 0x4b90 <exp+0x4e>
    4b7e:	fe 57       	subi	r31, 0x7E	; 126
    4b80:	e0 68       	ori	r30, 0x80	; 128
    4b82:	44 27       	eor	r20, r20
    4b84:	ee 0f       	add	r30, r30
    4b86:	44 1f       	adc	r20, r20
    4b88:	fa 95       	dec	r31
    4b8a:	e1 f7       	brne	.-8      	; 0x4b84 <exp+0x42>
    4b8c:	41 95       	neg	r20
    4b8e:	55 0b       	sbc	r21, r21
    4b90:	19 d1       	rcall	.+562    	; 0x4dc4 <ldexp>
    4b92:	0f 90       	pop	r0
    4b94:	07 fe       	sbrs	r0, 7
    4b96:	0d c1       	rjmp	.+538    	; 0x4db2 <inverse>
    4b98:	08 95       	ret

00004b9a <__fixsfsi>:
    4b9a:	04 d0       	rcall	.+8      	; 0x4ba4 <__fixunssfsi>
    4b9c:	68 94       	set
    4b9e:	b1 11       	cpse	r27, r1
    4ba0:	fe c0       	rjmp	.+508    	; 0x4d9e <__fp_szero>
    4ba2:	08 95       	ret

00004ba4 <__fixunssfsi>:
    4ba4:	e1 d0       	rcall	.+450    	; 0x4d68 <__fp_splitA>
    4ba6:	88 f0       	brcs	.+34     	; 0x4bca <__fixunssfsi+0x26>
    4ba8:	9f 57       	subi	r25, 0x7F	; 127
    4baa:	90 f0       	brcs	.+36     	; 0x4bd0 <__fixunssfsi+0x2c>
    4bac:	b9 2f       	mov	r27, r25
    4bae:	99 27       	eor	r25, r25
    4bb0:	b7 51       	subi	r27, 0x17	; 23
    4bb2:	a0 f0       	brcs	.+40     	; 0x4bdc <__fixunssfsi+0x38>
    4bb4:	d1 f0       	breq	.+52     	; 0x4bea <__fixunssfsi+0x46>
    4bb6:	66 0f       	add	r22, r22
    4bb8:	77 1f       	adc	r23, r23
    4bba:	88 1f       	adc	r24, r24
    4bbc:	99 1f       	adc	r25, r25
    4bbe:	1a f0       	brmi	.+6      	; 0x4bc6 <__fixunssfsi+0x22>
    4bc0:	ba 95       	dec	r27
    4bc2:	c9 f7       	brne	.-14     	; 0x4bb6 <__fixunssfsi+0x12>
    4bc4:	12 c0       	rjmp	.+36     	; 0x4bea <__fixunssfsi+0x46>
    4bc6:	b1 30       	cpi	r27, 0x01	; 1
    4bc8:	81 f0       	breq	.+32     	; 0x4bea <__fixunssfsi+0x46>
    4bca:	e8 d0       	rcall	.+464    	; 0x4d9c <__fp_zero>
    4bcc:	b1 e0       	ldi	r27, 0x01	; 1
    4bce:	08 95       	ret
    4bd0:	e5 c0       	rjmp	.+458    	; 0x4d9c <__fp_zero>
    4bd2:	67 2f       	mov	r22, r23
    4bd4:	78 2f       	mov	r23, r24
    4bd6:	88 27       	eor	r24, r24
    4bd8:	b8 5f       	subi	r27, 0xF8	; 248
    4bda:	39 f0       	breq	.+14     	; 0x4bea <__fixunssfsi+0x46>
    4bdc:	b9 3f       	cpi	r27, 0xF9	; 249
    4bde:	cc f3       	brlt	.-14     	; 0x4bd2 <__fixunssfsi+0x2e>
    4be0:	86 95       	lsr	r24
    4be2:	77 95       	ror	r23
    4be4:	67 95       	ror	r22
    4be6:	b3 95       	inc	r27
    4be8:	d9 f7       	brne	.-10     	; 0x4be0 <__fixunssfsi+0x3c>
    4bea:	3e f4       	brtc	.+14     	; 0x4bfa <__fixunssfsi+0x56>
    4bec:	90 95       	com	r25
    4bee:	80 95       	com	r24
    4bf0:	70 95       	com	r23
    4bf2:	61 95       	neg	r22
    4bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    4bf6:	8f 4f       	sbci	r24, 0xFF	; 255
    4bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bfa:	08 95       	ret

00004bfc <__floatunsisf>:
    4bfc:	e8 94       	clt
    4bfe:	09 c0       	rjmp	.+18     	; 0x4c12 <__floatsisf+0x12>

00004c00 <__floatsisf>:
    4c00:	97 fb       	bst	r25, 7
    4c02:	3e f4       	brtc	.+14     	; 0x4c12 <__floatsisf+0x12>
    4c04:	90 95       	com	r25
    4c06:	80 95       	com	r24
    4c08:	70 95       	com	r23
    4c0a:	61 95       	neg	r22
    4c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    4c10:	9f 4f       	sbci	r25, 0xFF	; 255
    4c12:	99 23       	and	r25, r25
    4c14:	a9 f0       	breq	.+42     	; 0x4c40 <__floatsisf+0x40>
    4c16:	f9 2f       	mov	r31, r25
    4c18:	96 e9       	ldi	r25, 0x96	; 150
    4c1a:	bb 27       	eor	r27, r27
    4c1c:	93 95       	inc	r25
    4c1e:	f6 95       	lsr	r31
    4c20:	87 95       	ror	r24
    4c22:	77 95       	ror	r23
    4c24:	67 95       	ror	r22
    4c26:	b7 95       	ror	r27
    4c28:	f1 11       	cpse	r31, r1
    4c2a:	f8 cf       	rjmp	.-16     	; 0x4c1c <__floatsisf+0x1c>
    4c2c:	fa f4       	brpl	.+62     	; 0x4c6c <__floatsisf+0x6c>
    4c2e:	bb 0f       	add	r27, r27
    4c30:	11 f4       	brne	.+4      	; 0x4c36 <__floatsisf+0x36>
    4c32:	60 ff       	sbrs	r22, 0
    4c34:	1b c0       	rjmp	.+54     	; 0x4c6c <__floatsisf+0x6c>
    4c36:	6f 5f       	subi	r22, 0xFF	; 255
    4c38:	7f 4f       	sbci	r23, 0xFF	; 255
    4c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    4c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c3e:	16 c0       	rjmp	.+44     	; 0x4c6c <__floatsisf+0x6c>
    4c40:	88 23       	and	r24, r24
    4c42:	11 f0       	breq	.+4      	; 0x4c48 <__floatsisf+0x48>
    4c44:	96 e9       	ldi	r25, 0x96	; 150
    4c46:	11 c0       	rjmp	.+34     	; 0x4c6a <__floatsisf+0x6a>
    4c48:	77 23       	and	r23, r23
    4c4a:	21 f0       	breq	.+8      	; 0x4c54 <__floatsisf+0x54>
    4c4c:	9e e8       	ldi	r25, 0x8E	; 142
    4c4e:	87 2f       	mov	r24, r23
    4c50:	76 2f       	mov	r23, r22
    4c52:	05 c0       	rjmp	.+10     	; 0x4c5e <__floatsisf+0x5e>
    4c54:	66 23       	and	r22, r22
    4c56:	71 f0       	breq	.+28     	; 0x4c74 <__floatsisf+0x74>
    4c58:	96 e8       	ldi	r25, 0x86	; 134
    4c5a:	86 2f       	mov	r24, r22
    4c5c:	70 e0       	ldi	r23, 0x00	; 0
    4c5e:	60 e0       	ldi	r22, 0x00	; 0
    4c60:	2a f0       	brmi	.+10     	; 0x4c6c <__floatsisf+0x6c>
    4c62:	9a 95       	dec	r25
    4c64:	66 0f       	add	r22, r22
    4c66:	77 1f       	adc	r23, r23
    4c68:	88 1f       	adc	r24, r24
    4c6a:	da f7       	brpl	.-10     	; 0x4c62 <__floatsisf+0x62>
    4c6c:	88 0f       	add	r24, r24
    4c6e:	96 95       	lsr	r25
    4c70:	87 95       	ror	r24
    4c72:	97 f9       	bld	r25, 7
    4c74:	08 95       	ret

00004c76 <__fp_cmp>:
    4c76:	99 0f       	add	r25, r25
    4c78:	00 08       	sbc	r0, r0
    4c7a:	55 0f       	add	r21, r21
    4c7c:	aa 0b       	sbc	r26, r26
    4c7e:	e0 e8       	ldi	r30, 0x80	; 128
    4c80:	fe ef       	ldi	r31, 0xFE	; 254
    4c82:	16 16       	cp	r1, r22
    4c84:	17 06       	cpc	r1, r23
    4c86:	e8 07       	cpc	r30, r24
    4c88:	f9 07       	cpc	r31, r25
    4c8a:	c0 f0       	brcs	.+48     	; 0x4cbc <__fp_cmp+0x46>
    4c8c:	12 16       	cp	r1, r18
    4c8e:	13 06       	cpc	r1, r19
    4c90:	e4 07       	cpc	r30, r20
    4c92:	f5 07       	cpc	r31, r21
    4c94:	98 f0       	brcs	.+38     	; 0x4cbc <__fp_cmp+0x46>
    4c96:	62 1b       	sub	r22, r18
    4c98:	73 0b       	sbc	r23, r19
    4c9a:	84 0b       	sbc	r24, r20
    4c9c:	95 0b       	sbc	r25, r21
    4c9e:	39 f4       	brne	.+14     	; 0x4cae <__fp_cmp+0x38>
    4ca0:	0a 26       	eor	r0, r26
    4ca2:	61 f0       	breq	.+24     	; 0x4cbc <__fp_cmp+0x46>
    4ca4:	23 2b       	or	r18, r19
    4ca6:	24 2b       	or	r18, r20
    4ca8:	25 2b       	or	r18, r21
    4caa:	21 f4       	brne	.+8      	; 0x4cb4 <__fp_cmp+0x3e>
    4cac:	08 95       	ret
    4cae:	0a 26       	eor	r0, r26
    4cb0:	09 f4       	brne	.+2      	; 0x4cb4 <__fp_cmp+0x3e>
    4cb2:	a1 40       	sbci	r26, 0x01	; 1
    4cb4:	a6 95       	lsr	r26
    4cb6:	8f ef       	ldi	r24, 0xFF	; 255
    4cb8:	81 1d       	adc	r24, r1
    4cba:	81 1d       	adc	r24, r1
    4cbc:	08 95       	ret

00004cbe <__fp_inf>:
    4cbe:	97 f9       	bld	r25, 7
    4cc0:	9f 67       	ori	r25, 0x7F	; 127
    4cc2:	80 e8       	ldi	r24, 0x80	; 128
    4cc4:	70 e0       	ldi	r23, 0x00	; 0
    4cc6:	60 e0       	ldi	r22, 0x00	; 0
    4cc8:	08 95       	ret

00004cca <__fp_nan>:
    4cca:	9f ef       	ldi	r25, 0xFF	; 255
    4ccc:	80 ec       	ldi	r24, 0xC0	; 192
    4cce:	08 95       	ret

00004cd0 <__fp_powser>:
    4cd0:	df 93       	push	r29
    4cd2:	cf 93       	push	r28
    4cd4:	1f 93       	push	r17
    4cd6:	0f 93       	push	r16
    4cd8:	ff 92       	push	r15
    4cda:	ef 92       	push	r14
    4cdc:	df 92       	push	r13
    4cde:	7b 01       	movw	r14, r22
    4ce0:	8c 01       	movw	r16, r24
    4ce2:	68 94       	set
    4ce4:	05 c0       	rjmp	.+10     	; 0x4cf0 <__fp_powser+0x20>
    4ce6:	da 2e       	mov	r13, r26
    4ce8:	ef 01       	movw	r28, r30
    4cea:	df d0       	rcall	.+446    	; 0x4eaa <__mulsf3x>
    4cec:	fe 01       	movw	r30, r28
    4cee:	e8 94       	clt
    4cf0:	a5 91       	lpm	r26, Z+
    4cf2:	25 91       	lpm	r18, Z+
    4cf4:	35 91       	lpm	r19, Z+
    4cf6:	45 91       	lpm	r20, Z+
    4cf8:	55 91       	lpm	r21, Z+
    4cfa:	ae f3       	brts	.-22     	; 0x4ce6 <__fp_powser+0x16>
    4cfc:	ef 01       	movw	r28, r30
    4cfe:	5d de       	rcall	.-838    	; 0x49ba <__addsf3x>
    4d00:	fe 01       	movw	r30, r28
    4d02:	97 01       	movw	r18, r14
    4d04:	a8 01       	movw	r20, r16
    4d06:	da 94       	dec	r13
    4d08:	79 f7       	brne	.-34     	; 0x4ce8 <__fp_powser+0x18>
    4d0a:	df 90       	pop	r13
    4d0c:	ef 90       	pop	r14
    4d0e:	ff 90       	pop	r15
    4d10:	0f 91       	pop	r16
    4d12:	1f 91       	pop	r17
    4d14:	cf 91       	pop	r28
    4d16:	df 91       	pop	r29
    4d18:	08 95       	ret

00004d1a <__fp_pscA>:
    4d1a:	00 24       	eor	r0, r0
    4d1c:	0a 94       	dec	r0
    4d1e:	16 16       	cp	r1, r22
    4d20:	17 06       	cpc	r1, r23
    4d22:	18 06       	cpc	r1, r24
    4d24:	09 06       	cpc	r0, r25
    4d26:	08 95       	ret

00004d28 <__fp_pscB>:
    4d28:	00 24       	eor	r0, r0
    4d2a:	0a 94       	dec	r0
    4d2c:	12 16       	cp	r1, r18
    4d2e:	13 06       	cpc	r1, r19
    4d30:	14 06       	cpc	r1, r20
    4d32:	05 06       	cpc	r0, r21
    4d34:	08 95       	ret

00004d36 <__fp_round>:
    4d36:	09 2e       	mov	r0, r25
    4d38:	03 94       	inc	r0
    4d3a:	00 0c       	add	r0, r0
    4d3c:	11 f4       	brne	.+4      	; 0x4d42 <__fp_round+0xc>
    4d3e:	88 23       	and	r24, r24
    4d40:	52 f0       	brmi	.+20     	; 0x4d56 <__fp_round+0x20>
    4d42:	bb 0f       	add	r27, r27
    4d44:	40 f4       	brcc	.+16     	; 0x4d56 <__fp_round+0x20>
    4d46:	bf 2b       	or	r27, r31
    4d48:	11 f4       	brne	.+4      	; 0x4d4e <__fp_round+0x18>
    4d4a:	60 ff       	sbrs	r22, 0
    4d4c:	04 c0       	rjmp	.+8      	; 0x4d56 <__fp_round+0x20>
    4d4e:	6f 5f       	subi	r22, 0xFF	; 255
    4d50:	7f 4f       	sbci	r23, 0xFF	; 255
    4d52:	8f 4f       	sbci	r24, 0xFF	; 255
    4d54:	9f 4f       	sbci	r25, 0xFF	; 255
    4d56:	08 95       	ret

00004d58 <__fp_split3>:
    4d58:	57 fd       	sbrc	r21, 7
    4d5a:	90 58       	subi	r25, 0x80	; 128
    4d5c:	44 0f       	add	r20, r20
    4d5e:	55 1f       	adc	r21, r21
    4d60:	59 f0       	breq	.+22     	; 0x4d78 <__fp_splitA+0x10>
    4d62:	5f 3f       	cpi	r21, 0xFF	; 255
    4d64:	71 f0       	breq	.+28     	; 0x4d82 <__fp_splitA+0x1a>
    4d66:	47 95       	ror	r20

00004d68 <__fp_splitA>:
    4d68:	88 0f       	add	r24, r24
    4d6a:	97 fb       	bst	r25, 7
    4d6c:	99 1f       	adc	r25, r25
    4d6e:	61 f0       	breq	.+24     	; 0x4d88 <__fp_splitA+0x20>
    4d70:	9f 3f       	cpi	r25, 0xFF	; 255
    4d72:	79 f0       	breq	.+30     	; 0x4d92 <__fp_splitA+0x2a>
    4d74:	87 95       	ror	r24
    4d76:	08 95       	ret
    4d78:	12 16       	cp	r1, r18
    4d7a:	13 06       	cpc	r1, r19
    4d7c:	14 06       	cpc	r1, r20
    4d7e:	55 1f       	adc	r21, r21
    4d80:	f2 cf       	rjmp	.-28     	; 0x4d66 <__fp_split3+0xe>
    4d82:	46 95       	lsr	r20
    4d84:	f1 df       	rcall	.-30     	; 0x4d68 <__fp_splitA>
    4d86:	08 c0       	rjmp	.+16     	; 0x4d98 <__fp_splitA+0x30>
    4d88:	16 16       	cp	r1, r22
    4d8a:	17 06       	cpc	r1, r23
    4d8c:	18 06       	cpc	r1, r24
    4d8e:	99 1f       	adc	r25, r25
    4d90:	f1 cf       	rjmp	.-30     	; 0x4d74 <__fp_splitA+0xc>
    4d92:	86 95       	lsr	r24
    4d94:	71 05       	cpc	r23, r1
    4d96:	61 05       	cpc	r22, r1
    4d98:	08 94       	sec
    4d9a:	08 95       	ret

00004d9c <__fp_zero>:
    4d9c:	e8 94       	clt

00004d9e <__fp_szero>:
    4d9e:	bb 27       	eor	r27, r27
    4da0:	66 27       	eor	r22, r22
    4da2:	77 27       	eor	r23, r23
    4da4:	cb 01       	movw	r24, r22
    4da6:	97 f9       	bld	r25, 7
    4da8:	08 95       	ret

00004daa <__gesf2>:
    4daa:	65 df       	rcall	.-310    	; 0x4c76 <__fp_cmp>
    4dac:	08 f4       	brcc	.+2      	; 0x4db0 <__gesf2+0x6>
    4dae:	8f ef       	ldi	r24, 0xFF	; 255
    4db0:	08 95       	ret

00004db2 <inverse>:
    4db2:	9b 01       	movw	r18, r22
    4db4:	ac 01       	movw	r20, r24
    4db6:	60 e0       	ldi	r22, 0x00	; 0
    4db8:	70 e0       	ldi	r23, 0x00	; 0
    4dba:	80 e8       	ldi	r24, 0x80	; 128
    4dbc:	9f e3       	ldi	r25, 0x3F	; 63
    4dbe:	54 ce       	rjmp	.-856    	; 0x4a68 <__divsf3>
    4dc0:	7e cf       	rjmp	.-260    	; 0x4cbe <__fp_inf>
    4dc2:	ca c0       	rjmp	.+404    	; 0x4f58 <__fp_mpack>

00004dc4 <ldexp>:
    4dc4:	d1 df       	rcall	.-94     	; 0x4d68 <__fp_splitA>
    4dc6:	e8 f3       	brcs	.-6      	; 0x4dc2 <inverse+0x10>
    4dc8:	99 23       	and	r25, r25
    4dca:	d9 f3       	breq	.-10     	; 0x4dc2 <inverse+0x10>
    4dcc:	94 0f       	add	r25, r20
    4dce:	51 1d       	adc	r21, r1
    4dd0:	bb f3       	brvs	.-18     	; 0x4dc0 <inverse+0xe>
    4dd2:	91 50       	subi	r25, 0x01	; 1
    4dd4:	50 40       	sbci	r21, 0x00	; 0
    4dd6:	94 f0       	brlt	.+36     	; 0x4dfc <ldexp+0x38>
    4dd8:	59 f0       	breq	.+22     	; 0x4df0 <ldexp+0x2c>
    4dda:	88 23       	and	r24, r24
    4ddc:	32 f0       	brmi	.+12     	; 0x4dea <ldexp+0x26>
    4dde:	66 0f       	add	r22, r22
    4de0:	77 1f       	adc	r23, r23
    4de2:	88 1f       	adc	r24, r24
    4de4:	91 50       	subi	r25, 0x01	; 1
    4de6:	50 40       	sbci	r21, 0x00	; 0
    4de8:	c1 f7       	brne	.-16     	; 0x4dda <ldexp+0x16>
    4dea:	9e 3f       	cpi	r25, 0xFE	; 254
    4dec:	51 05       	cpc	r21, r1
    4dee:	44 f7       	brge	.-48     	; 0x4dc0 <inverse+0xe>
    4df0:	88 0f       	add	r24, r24
    4df2:	91 1d       	adc	r25, r1
    4df4:	96 95       	lsr	r25
    4df6:	87 95       	ror	r24
    4df8:	97 f9       	bld	r25, 7
    4dfa:	08 95       	ret
    4dfc:	5f 3f       	cpi	r21, 0xFF	; 255
    4dfe:	ac f0       	brlt	.+42     	; 0x4e2a <ldexp+0x66>
    4e00:	98 3e       	cpi	r25, 0xE8	; 232
    4e02:	9c f0       	brlt	.+38     	; 0x4e2a <ldexp+0x66>
    4e04:	bb 27       	eor	r27, r27
    4e06:	86 95       	lsr	r24
    4e08:	77 95       	ror	r23
    4e0a:	67 95       	ror	r22
    4e0c:	b7 95       	ror	r27
    4e0e:	08 f4       	brcc	.+2      	; 0x4e12 <ldexp+0x4e>
    4e10:	b1 60       	ori	r27, 0x01	; 1
    4e12:	93 95       	inc	r25
    4e14:	c1 f7       	brne	.-16     	; 0x4e06 <ldexp+0x42>
    4e16:	bb 0f       	add	r27, r27
    4e18:	58 f7       	brcc	.-42     	; 0x4df0 <ldexp+0x2c>
    4e1a:	11 f4       	brne	.+4      	; 0x4e20 <ldexp+0x5c>
    4e1c:	60 ff       	sbrs	r22, 0
    4e1e:	e8 cf       	rjmp	.-48     	; 0x4df0 <ldexp+0x2c>
    4e20:	6f 5f       	subi	r22, 0xFF	; 255
    4e22:	7f 4f       	sbci	r23, 0xFF	; 255
    4e24:	8f 4f       	sbci	r24, 0xFF	; 255
    4e26:	9f 4f       	sbci	r25, 0xFF	; 255
    4e28:	e3 cf       	rjmp	.-58     	; 0x4df0 <ldexp+0x2c>
    4e2a:	b9 cf       	rjmp	.-142    	; 0x4d9e <__fp_szero>

00004e2c <modf>:
    4e2c:	fa 01       	movw	r30, r20
    4e2e:	dc 01       	movw	r26, r24
    4e30:	aa 0f       	add	r26, r26
    4e32:	bb 1f       	adc	r27, r27
    4e34:	9b 01       	movw	r18, r22
    4e36:	ac 01       	movw	r20, r24
    4e38:	bf 57       	subi	r27, 0x7F	; 127
    4e3a:	28 f4       	brcc	.+10     	; 0x4e46 <modf+0x1a>
    4e3c:	22 27       	eor	r18, r18
    4e3e:	33 27       	eor	r19, r19
    4e40:	44 27       	eor	r20, r20
    4e42:	50 78       	andi	r21, 0x80	; 128
    4e44:	1f c0       	rjmp	.+62     	; 0x4e84 <modf+0x58>
    4e46:	b7 51       	subi	r27, 0x17	; 23
    4e48:	88 f4       	brcc	.+34     	; 0x4e6c <modf+0x40>
    4e4a:	ab 2f       	mov	r26, r27
    4e4c:	00 24       	eor	r0, r0
    4e4e:	46 95       	lsr	r20
    4e50:	37 95       	ror	r19
    4e52:	27 95       	ror	r18
    4e54:	01 1c       	adc	r0, r1
    4e56:	a3 95       	inc	r26
    4e58:	d2 f3       	brmi	.-12     	; 0x4e4e <modf+0x22>
    4e5a:	00 20       	and	r0, r0
    4e5c:	69 f0       	breq	.+26     	; 0x4e78 <modf+0x4c>
    4e5e:	22 0f       	add	r18, r18
    4e60:	33 1f       	adc	r19, r19
    4e62:	44 1f       	adc	r20, r20
    4e64:	b3 95       	inc	r27
    4e66:	da f3       	brmi	.-10     	; 0x4e5e <modf+0x32>
    4e68:	0d d0       	rcall	.+26     	; 0x4e84 <modf+0x58>
    4e6a:	95 cd       	rjmp	.-1238   	; 0x4996 <__subsf3>
    4e6c:	61 30       	cpi	r22, 0x01	; 1
    4e6e:	71 05       	cpc	r23, r1
    4e70:	a0 e8       	ldi	r26, 0x80	; 128
    4e72:	8a 07       	cpc	r24, r26
    4e74:	b9 46       	sbci	r27, 0x69	; 105
    4e76:	30 f4       	brcc	.+12     	; 0x4e84 <modf+0x58>
    4e78:	9b 01       	movw	r18, r22
    4e7a:	ac 01       	movw	r20, r24
    4e7c:	66 27       	eor	r22, r22
    4e7e:	77 27       	eor	r23, r23
    4e80:	88 27       	eor	r24, r24
    4e82:	90 78       	andi	r25, 0x80	; 128
    4e84:	30 96       	adiw	r30, 0x00	; 0
    4e86:	21 f0       	breq	.+8      	; 0x4e90 <modf+0x64>
    4e88:	20 83       	st	Z, r18
    4e8a:	31 83       	std	Z+1, r19	; 0x01
    4e8c:	42 83       	std	Z+2, r20	; 0x02
    4e8e:	53 83       	std	Z+3, r21	; 0x03
    4e90:	08 95       	ret

00004e92 <__mulsf3>:
    4e92:	0b d0       	rcall	.+22     	; 0x4eaa <__mulsf3x>
    4e94:	50 cf       	rjmp	.-352    	; 0x4d36 <__fp_round>
    4e96:	41 df       	rcall	.-382    	; 0x4d1a <__fp_pscA>
    4e98:	28 f0       	brcs	.+10     	; 0x4ea4 <__mulsf3+0x12>
    4e9a:	46 df       	rcall	.-372    	; 0x4d28 <__fp_pscB>
    4e9c:	18 f0       	brcs	.+6      	; 0x4ea4 <__mulsf3+0x12>
    4e9e:	95 23       	and	r25, r21
    4ea0:	09 f0       	breq	.+2      	; 0x4ea4 <__mulsf3+0x12>
    4ea2:	0d cf       	rjmp	.-486    	; 0x4cbe <__fp_inf>
    4ea4:	12 cf       	rjmp	.-476    	; 0x4cca <__fp_nan>
    4ea6:	11 24       	eor	r1, r1
    4ea8:	7a cf       	rjmp	.-268    	; 0x4d9e <__fp_szero>

00004eaa <__mulsf3x>:
    4eaa:	56 df       	rcall	.-340    	; 0x4d58 <__fp_split3>
    4eac:	a0 f3       	brcs	.-24     	; 0x4e96 <__mulsf3+0x4>

00004eae <__mulsf3_pse>:
    4eae:	95 9f       	mul	r25, r21
    4eb0:	d1 f3       	breq	.-12     	; 0x4ea6 <__mulsf3+0x14>
    4eb2:	95 0f       	add	r25, r21
    4eb4:	50 e0       	ldi	r21, 0x00	; 0
    4eb6:	55 1f       	adc	r21, r21
    4eb8:	62 9f       	mul	r22, r18
    4eba:	f0 01       	movw	r30, r0
    4ebc:	72 9f       	mul	r23, r18
    4ebe:	bb 27       	eor	r27, r27
    4ec0:	f0 0d       	add	r31, r0
    4ec2:	b1 1d       	adc	r27, r1
    4ec4:	63 9f       	mul	r22, r19
    4ec6:	aa 27       	eor	r26, r26
    4ec8:	f0 0d       	add	r31, r0
    4eca:	b1 1d       	adc	r27, r1
    4ecc:	aa 1f       	adc	r26, r26
    4ece:	64 9f       	mul	r22, r20
    4ed0:	66 27       	eor	r22, r22
    4ed2:	b0 0d       	add	r27, r0
    4ed4:	a1 1d       	adc	r26, r1
    4ed6:	66 1f       	adc	r22, r22
    4ed8:	82 9f       	mul	r24, r18
    4eda:	22 27       	eor	r18, r18
    4edc:	b0 0d       	add	r27, r0
    4ede:	a1 1d       	adc	r26, r1
    4ee0:	62 1f       	adc	r22, r18
    4ee2:	73 9f       	mul	r23, r19
    4ee4:	b0 0d       	add	r27, r0
    4ee6:	a1 1d       	adc	r26, r1
    4ee8:	62 1f       	adc	r22, r18
    4eea:	83 9f       	mul	r24, r19
    4eec:	a0 0d       	add	r26, r0
    4eee:	61 1d       	adc	r22, r1
    4ef0:	22 1f       	adc	r18, r18
    4ef2:	74 9f       	mul	r23, r20
    4ef4:	33 27       	eor	r19, r19
    4ef6:	a0 0d       	add	r26, r0
    4ef8:	61 1d       	adc	r22, r1
    4efa:	23 1f       	adc	r18, r19
    4efc:	84 9f       	mul	r24, r20
    4efe:	60 0d       	add	r22, r0
    4f00:	21 1d       	adc	r18, r1
    4f02:	82 2f       	mov	r24, r18
    4f04:	76 2f       	mov	r23, r22
    4f06:	6a 2f       	mov	r22, r26
    4f08:	11 24       	eor	r1, r1
    4f0a:	9f 57       	subi	r25, 0x7F	; 127
    4f0c:	50 40       	sbci	r21, 0x00	; 0
    4f0e:	8a f0       	brmi	.+34     	; 0x4f32 <__mulsf3_pse+0x84>
    4f10:	e1 f0       	breq	.+56     	; 0x4f4a <__mulsf3_pse+0x9c>
    4f12:	88 23       	and	r24, r24
    4f14:	4a f0       	brmi	.+18     	; 0x4f28 <__mulsf3_pse+0x7a>
    4f16:	ee 0f       	add	r30, r30
    4f18:	ff 1f       	adc	r31, r31
    4f1a:	bb 1f       	adc	r27, r27
    4f1c:	66 1f       	adc	r22, r22
    4f1e:	77 1f       	adc	r23, r23
    4f20:	88 1f       	adc	r24, r24
    4f22:	91 50       	subi	r25, 0x01	; 1
    4f24:	50 40       	sbci	r21, 0x00	; 0
    4f26:	a9 f7       	brne	.-22     	; 0x4f12 <__mulsf3_pse+0x64>
    4f28:	9e 3f       	cpi	r25, 0xFE	; 254
    4f2a:	51 05       	cpc	r21, r1
    4f2c:	70 f0       	brcs	.+28     	; 0x4f4a <__mulsf3_pse+0x9c>
    4f2e:	c7 ce       	rjmp	.-626    	; 0x4cbe <__fp_inf>
    4f30:	36 cf       	rjmp	.-404    	; 0x4d9e <__fp_szero>
    4f32:	5f 3f       	cpi	r21, 0xFF	; 255
    4f34:	ec f3       	brlt	.-6      	; 0x4f30 <__mulsf3_pse+0x82>
    4f36:	98 3e       	cpi	r25, 0xE8	; 232
    4f38:	dc f3       	brlt	.-10     	; 0x4f30 <__mulsf3_pse+0x82>
    4f3a:	86 95       	lsr	r24
    4f3c:	77 95       	ror	r23
    4f3e:	67 95       	ror	r22
    4f40:	b7 95       	ror	r27
    4f42:	f7 95       	ror	r31
    4f44:	e7 95       	ror	r30
    4f46:	9f 5f       	subi	r25, 0xFF	; 255
    4f48:	c1 f7       	brne	.-16     	; 0x4f3a <__mulsf3_pse+0x8c>
    4f4a:	fe 2b       	or	r31, r30
    4f4c:	88 0f       	add	r24, r24
    4f4e:	91 1d       	adc	r25, r1
    4f50:	96 95       	lsr	r25
    4f52:	87 95       	ror	r24
    4f54:	97 f9       	bld	r25, 7
    4f56:	08 95       	ret

00004f58 <__fp_mpack>:
    4f58:	9f 3f       	cpi	r25, 0xFF	; 255
    4f5a:	31 f0       	breq	.+12     	; 0x4f68 <__fp_mpack_finite+0xc>

00004f5c <__fp_mpack_finite>:
    4f5c:	91 50       	subi	r25, 0x01	; 1
    4f5e:	20 f4       	brcc	.+8      	; 0x4f68 <__fp_mpack_finite+0xc>
    4f60:	87 95       	ror	r24
    4f62:	77 95       	ror	r23
    4f64:	67 95       	ror	r22
    4f66:	b7 95       	ror	r27
    4f68:	88 0f       	add	r24, r24
    4f6a:	91 1d       	adc	r25, r1
    4f6c:	96 95       	lsr	r25
    4f6e:	87 95       	ror	r24
    4f70:	97 f9       	bld	r25, 7
    4f72:	08 95       	ret

00004f74 <__udivmodhi4>:
    4f74:	aa 1b       	sub	r26, r26
    4f76:	bb 1b       	sub	r27, r27
    4f78:	51 e1       	ldi	r21, 0x11	; 17
    4f7a:	07 c0       	rjmp	.+14     	; 0x4f8a <__udivmodhi4_ep>

00004f7c <__udivmodhi4_loop>:
    4f7c:	aa 1f       	adc	r26, r26
    4f7e:	bb 1f       	adc	r27, r27
    4f80:	a6 17       	cp	r26, r22
    4f82:	b7 07       	cpc	r27, r23
    4f84:	10 f0       	brcs	.+4      	; 0x4f8a <__udivmodhi4_ep>
    4f86:	a6 1b       	sub	r26, r22
    4f88:	b7 0b       	sbc	r27, r23

00004f8a <__udivmodhi4_ep>:
    4f8a:	88 1f       	adc	r24, r24
    4f8c:	99 1f       	adc	r25, r25
    4f8e:	5a 95       	dec	r21
    4f90:	a9 f7       	brne	.-22     	; 0x4f7c <__udivmodhi4_loop>
    4f92:	80 95       	com	r24
    4f94:	90 95       	com	r25
    4f96:	bc 01       	movw	r22, r24
    4f98:	cd 01       	movw	r24, r26
    4f9a:	08 95       	ret

00004f9c <__divmodhi4>:
    4f9c:	97 fb       	bst	r25, 7
    4f9e:	07 2e       	mov	r0, r23
    4fa0:	16 f4       	brtc	.+4      	; 0x4fa6 <__divmodhi4+0xa>
    4fa2:	00 94       	com	r0
    4fa4:	07 d0       	rcall	.+14     	; 0x4fb4 <__divmodhi4_neg1>
    4fa6:	77 fd       	sbrc	r23, 7
    4fa8:	09 d0       	rcall	.+18     	; 0x4fbc <__divmodhi4_neg2>
    4faa:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__udivmodhi4>
    4fae:	07 fc       	sbrc	r0, 7
    4fb0:	05 d0       	rcall	.+10     	; 0x4fbc <__divmodhi4_neg2>
    4fb2:	3e f4       	brtc	.+14     	; 0x4fc2 <__divmodhi4_exit>

00004fb4 <__divmodhi4_neg1>:
    4fb4:	90 95       	com	r25
    4fb6:	81 95       	neg	r24
    4fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    4fba:	08 95       	ret

00004fbc <__divmodhi4_neg2>:
    4fbc:	70 95       	com	r23
    4fbe:	61 95       	neg	r22
    4fc0:	7f 4f       	sbci	r23, 0xFF	; 255

00004fc2 <__divmodhi4_exit>:
    4fc2:	08 95       	ret

00004fc4 <__udivmodsi4>:
    4fc4:	a1 e2       	ldi	r26, 0x21	; 33
    4fc6:	1a 2e       	mov	r1, r26
    4fc8:	aa 1b       	sub	r26, r26
    4fca:	bb 1b       	sub	r27, r27
    4fcc:	fd 01       	movw	r30, r26
    4fce:	0d c0       	rjmp	.+26     	; 0x4fea <__udivmodsi4_ep>

00004fd0 <__udivmodsi4_loop>:
    4fd0:	aa 1f       	adc	r26, r26
    4fd2:	bb 1f       	adc	r27, r27
    4fd4:	ee 1f       	adc	r30, r30
    4fd6:	ff 1f       	adc	r31, r31
    4fd8:	a2 17       	cp	r26, r18
    4fda:	b3 07       	cpc	r27, r19
    4fdc:	e4 07       	cpc	r30, r20
    4fde:	f5 07       	cpc	r31, r21
    4fe0:	20 f0       	brcs	.+8      	; 0x4fea <__udivmodsi4_ep>
    4fe2:	a2 1b       	sub	r26, r18
    4fe4:	b3 0b       	sbc	r27, r19
    4fe6:	e4 0b       	sbc	r30, r20
    4fe8:	f5 0b       	sbc	r31, r21

00004fea <__udivmodsi4_ep>:
    4fea:	66 1f       	adc	r22, r22
    4fec:	77 1f       	adc	r23, r23
    4fee:	88 1f       	adc	r24, r24
    4ff0:	99 1f       	adc	r25, r25
    4ff2:	1a 94       	dec	r1
    4ff4:	69 f7       	brne	.-38     	; 0x4fd0 <__udivmodsi4_loop>
    4ff6:	60 95       	com	r22
    4ff8:	70 95       	com	r23
    4ffa:	80 95       	com	r24
    4ffc:	90 95       	com	r25
    4ffe:	9b 01       	movw	r18, r22
    5000:	ac 01       	movw	r20, r24
    5002:	bd 01       	movw	r22, r26
    5004:	cf 01       	movw	r24, r30
    5006:	08 95       	ret

00005008 <__divmodsi4>:
    5008:	05 2e       	mov	r0, r21
    500a:	97 fb       	bst	r25, 7
    500c:	1e f4       	brtc	.+6      	; 0x5014 <__divmodsi4+0xc>
    500e:	00 94       	com	r0
    5010:	0e 94 1b 28 	call	0x5036	; 0x5036 <__negsi2>
    5014:	57 fd       	sbrc	r21, 7
    5016:	07 d0       	rcall	.+14     	; 0x5026 <__divmodsi4_neg2>
    5018:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <__udivmodsi4>
    501c:	07 fc       	sbrc	r0, 7
    501e:	03 d0       	rcall	.+6      	; 0x5026 <__divmodsi4_neg2>
    5020:	4e f4       	brtc	.+18     	; 0x5034 <__divmodsi4_exit>
    5022:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <__negsi2>

00005026 <__divmodsi4_neg2>:
    5026:	50 95       	com	r21
    5028:	40 95       	com	r20
    502a:	30 95       	com	r19
    502c:	21 95       	neg	r18
    502e:	3f 4f       	sbci	r19, 0xFF	; 255
    5030:	4f 4f       	sbci	r20, 0xFF	; 255
    5032:	5f 4f       	sbci	r21, 0xFF	; 255

00005034 <__divmodsi4_exit>:
    5034:	08 95       	ret

00005036 <__negsi2>:
    5036:	90 95       	com	r25
    5038:	80 95       	com	r24
    503a:	70 95       	com	r23
    503c:	61 95       	neg	r22
    503e:	7f 4f       	sbci	r23, 0xFF	; 255
    5040:	8f 4f       	sbci	r24, 0xFF	; 255
    5042:	9f 4f       	sbci	r25, 0xFF	; 255
    5044:	08 95       	ret

00005046 <__tablejump2__>:
    5046:	ee 0f       	add	r30, r30
    5048:	ff 1f       	adc	r31, r31

0000504a <__tablejump__>:
    504a:	05 90       	lpm	r0, Z+
    504c:	f4 91       	lpm	r31, Z
    504e:	e0 2d       	mov	r30, r0
    5050:	09 94       	ijmp

00005052 <__umulhisi3>:
    5052:	a2 9f       	mul	r26, r18
    5054:	b0 01       	movw	r22, r0
    5056:	b3 9f       	mul	r27, r19
    5058:	c0 01       	movw	r24, r0
    505a:	a3 9f       	mul	r26, r19
    505c:	70 0d       	add	r23, r0
    505e:	81 1d       	adc	r24, r1
    5060:	11 24       	eor	r1, r1
    5062:	91 1d       	adc	r25, r1
    5064:	b2 9f       	mul	r27, r18
    5066:	70 0d       	add	r23, r0
    5068:	81 1d       	adc	r24, r1
    506a:	11 24       	eor	r1, r1
    506c:	91 1d       	adc	r25, r1
    506e:	08 95       	ret

00005070 <__muluhisi3>:
    5070:	0e 94 29 28 	call	0x5052	; 0x5052 <__umulhisi3>
    5074:	a5 9f       	mul	r26, r21
    5076:	90 0d       	add	r25, r0
    5078:	b4 9f       	mul	r27, r20
    507a:	90 0d       	add	r25, r0
    507c:	a4 9f       	mul	r26, r20
    507e:	80 0d       	add	r24, r0
    5080:	91 1d       	adc	r25, r1
    5082:	11 24       	eor	r1, r1
    5084:	08 95       	ret

00005086 <__mulshisi3>:
    5086:	b7 ff       	sbrs	r27, 7
    5088:	0c 94 38 28 	jmp	0x5070	; 0x5070 <__muluhisi3>

0000508c <__mulohisi3>:
    508c:	0e 94 38 28 	call	0x5070	; 0x5070 <__muluhisi3>
    5090:	82 1b       	sub	r24, r18
    5092:	93 0b       	sbc	r25, r19
    5094:	08 95       	ret

00005096 <printf>:
    5096:	a0 e0       	ldi	r26, 0x00	; 0
    5098:	b0 e0       	ldi	r27, 0x00	; 0
    509a:	e1 e5       	ldi	r30, 0x51	; 81
    509c:	f8 e2       	ldi	r31, 0x28	; 40
    509e:	0c 94 69 2b 	jmp	0x56d2	; 0x56d2 <__prologue_saves__+0x20>
    50a2:	fe 01       	movw	r30, r28
    50a4:	35 96       	adiw	r30, 0x05	; 5
    50a6:	61 91       	ld	r22, Z+
    50a8:	71 91       	ld	r23, Z+
    50aa:	af 01       	movw	r20, r30
    50ac:	80 91 be 02 	lds	r24, 0x02BE
    50b0:	90 91 bf 02 	lds	r25, 0x02BF
    50b4:	0e 94 b0 28 	call	0x5160	; 0x5160 <vfprintf>
    50b8:	e2 e0       	ldi	r30, 0x02	; 2
    50ba:	0c 94 85 2b 	jmp	0x570a	; 0x570a <__epilogue_restores__+0x20>

000050be <printf_P>:
    50be:	a0 e0       	ldi	r26, 0x00	; 0
    50c0:	b0 e0       	ldi	r27, 0x00	; 0
    50c2:	e5 e6       	ldi	r30, 0x65	; 101
    50c4:	f8 e2       	ldi	r31, 0x28	; 40
    50c6:	0c 94 67 2b 	jmp	0x56ce	; 0x56ce <__prologue_saves__+0x1c>
    50ca:	fe 01       	movw	r30, r28
    50cc:	37 96       	adiw	r30, 0x07	; 7
    50ce:	61 91       	ld	r22, Z+
    50d0:	71 91       	ld	r23, Z+
    50d2:	0e eb       	ldi	r16, 0xBE	; 190
    50d4:	12 e0       	ldi	r17, 0x02	; 2
    50d6:	d8 01       	movw	r26, r16
    50d8:	8d 91       	ld	r24, X+
    50da:	9c 91       	ld	r25, X
    50dc:	dc 01       	movw	r26, r24
    50de:	13 96       	adiw	r26, 0x03	; 3
    50e0:	2c 91       	ld	r18, X
    50e2:	13 97       	sbiw	r26, 0x03	; 3
    50e4:	28 60       	ori	r18, 0x08	; 8
    50e6:	13 96       	adiw	r26, 0x03	; 3
    50e8:	2c 93       	st	X, r18
    50ea:	af 01       	movw	r20, r30
    50ec:	0e 94 b0 28 	call	0x5160	; 0x5160 <vfprintf>
    50f0:	d8 01       	movw	r26, r16
    50f2:	ed 91       	ld	r30, X+
    50f4:	fc 91       	ld	r31, X
    50f6:	23 81       	ldd	r18, Z+3	; 0x03
    50f8:	27 7f       	andi	r18, 0xF7	; 247
    50fa:	23 83       	std	Z+3, r18	; 0x03
    50fc:	e4 e0       	ldi	r30, 0x04	; 4
    50fe:	0c 94 83 2b 	jmp	0x5706	; 0x5706 <__epilogue_restores__+0x1c>

00005102 <puts_P>:
    5102:	0f 93       	push	r16
    5104:	1f 93       	push	r17
    5106:	cf 93       	push	r28
    5108:	df 93       	push	r29
    510a:	ec 01       	movw	r28, r24
    510c:	e0 91 be 02 	lds	r30, 0x02BE
    5110:	f0 91 bf 02 	lds	r31, 0x02BF
    5114:	83 81       	ldd	r24, Z+3	; 0x03
    5116:	81 ff       	sbrs	r24, 1
    5118:	1c c0       	rjmp	.+56     	; 0x5152 <puts_P+0x50>
    511a:	00 e0       	ldi	r16, 0x00	; 0
    511c:	10 e0       	ldi	r17, 0x00	; 0
    511e:	fe 01       	movw	r30, r28
    5120:	84 91       	lpm	r24, Z
    5122:	60 91 be 02 	lds	r22, 0x02BE
    5126:	70 91 bf 02 	lds	r23, 0x02BF
    512a:	db 01       	movw	r26, r22
    512c:	18 96       	adiw	r26, 0x08	; 8
    512e:	ed 91       	ld	r30, X+
    5130:	fc 91       	ld	r31, X
    5132:	19 97       	sbiw	r26, 0x09	; 9
    5134:	88 23       	and	r24, r24
    5136:	39 f0       	breq	.+14     	; 0x5146 <puts_P+0x44>
    5138:	09 95       	icall
    513a:	89 2b       	or	r24, r25
    513c:	11 f0       	breq	.+4      	; 0x5142 <puts_P+0x40>
    513e:	0f ef       	ldi	r16, 0xFF	; 255
    5140:	1f ef       	ldi	r17, 0xFF	; 255
    5142:	21 96       	adiw	r28, 0x01	; 1
    5144:	ec cf       	rjmp	.-40     	; 0x511e <puts_P+0x1c>
    5146:	8a e0       	ldi	r24, 0x0A	; 10
    5148:	09 95       	icall
    514a:	89 2b       	or	r24, r25
    514c:	11 f4       	brne	.+4      	; 0x5152 <puts_P+0x50>
    514e:	c8 01       	movw	r24, r16
    5150:	02 c0       	rjmp	.+4      	; 0x5156 <puts_P+0x54>
    5152:	8f ef       	ldi	r24, 0xFF	; 255
    5154:	9f ef       	ldi	r25, 0xFF	; 255
    5156:	df 91       	pop	r29
    5158:	cf 91       	pop	r28
    515a:	1f 91       	pop	r17
    515c:	0f 91       	pop	r16
    515e:	08 95       	ret

00005160 <vfprintf>:
    5160:	ac e0       	ldi	r26, 0x0C	; 12
    5162:	b0 e0       	ldi	r27, 0x00	; 0
    5164:	e6 eb       	ldi	r30, 0xB6	; 182
    5166:	f8 e2       	ldi	r31, 0x28	; 40
    5168:	0c 94 59 2b 	jmp	0x56b2	; 0x56b2 <__prologue_saves__>
    516c:	7c 01       	movw	r14, r24
    516e:	6b 01       	movw	r12, r22
    5170:	8a 01       	movw	r16, r20
    5172:	fc 01       	movw	r30, r24
    5174:	17 82       	std	Z+7, r1	; 0x07
    5176:	16 82       	std	Z+6, r1	; 0x06
    5178:	83 81       	ldd	r24, Z+3	; 0x03
    517a:	81 ff       	sbrs	r24, 1
    517c:	bd c1       	rjmp	.+890    	; 0x54f8 <vfprintf+0x398>
    517e:	ce 01       	movw	r24, r28
    5180:	01 96       	adiw	r24, 0x01	; 1
    5182:	4c 01       	movw	r8, r24
    5184:	f7 01       	movw	r30, r14
    5186:	93 81       	ldd	r25, Z+3	; 0x03
    5188:	f6 01       	movw	r30, r12
    518a:	93 fd       	sbrc	r25, 3
    518c:	85 91       	lpm	r24, Z+
    518e:	93 ff       	sbrs	r25, 3
    5190:	81 91       	ld	r24, Z+
    5192:	6f 01       	movw	r12, r30
    5194:	88 23       	and	r24, r24
    5196:	09 f4       	brne	.+2      	; 0x519a <vfprintf+0x3a>
    5198:	ab c1       	rjmp	.+854    	; 0x54f0 <vfprintf+0x390>
    519a:	85 32       	cpi	r24, 0x25	; 37
    519c:	39 f4       	brne	.+14     	; 0x51ac <vfprintf+0x4c>
    519e:	93 fd       	sbrc	r25, 3
    51a0:	85 91       	lpm	r24, Z+
    51a2:	93 ff       	sbrs	r25, 3
    51a4:	81 91       	ld	r24, Z+
    51a6:	6f 01       	movw	r12, r30
    51a8:	85 32       	cpi	r24, 0x25	; 37
    51aa:	29 f4       	brne	.+10     	; 0x51b6 <vfprintf+0x56>
    51ac:	b7 01       	movw	r22, r14
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	0e 94 c9 2a 	call	0x5592	; 0x5592 <fputc>
    51b4:	e7 cf       	rjmp	.-50     	; 0x5184 <vfprintf+0x24>
    51b6:	51 2c       	mov	r5, r1
    51b8:	31 2c       	mov	r3, r1
    51ba:	20 e0       	ldi	r18, 0x00	; 0
    51bc:	20 32       	cpi	r18, 0x20	; 32
    51be:	a0 f4       	brcc	.+40     	; 0x51e8 <vfprintf+0x88>
    51c0:	8b 32       	cpi	r24, 0x2B	; 43
    51c2:	69 f0       	breq	.+26     	; 0x51de <vfprintf+0x7e>
    51c4:	30 f4       	brcc	.+12     	; 0x51d2 <vfprintf+0x72>
    51c6:	80 32       	cpi	r24, 0x20	; 32
    51c8:	59 f0       	breq	.+22     	; 0x51e0 <vfprintf+0x80>
    51ca:	83 32       	cpi	r24, 0x23	; 35
    51cc:	69 f4       	brne	.+26     	; 0x51e8 <vfprintf+0x88>
    51ce:	20 61       	ori	r18, 0x10	; 16
    51d0:	2c c0       	rjmp	.+88     	; 0x522a <vfprintf+0xca>
    51d2:	8d 32       	cpi	r24, 0x2D	; 45
    51d4:	39 f0       	breq	.+14     	; 0x51e4 <vfprintf+0x84>
    51d6:	80 33       	cpi	r24, 0x30	; 48
    51d8:	39 f4       	brne	.+14     	; 0x51e8 <vfprintf+0x88>
    51da:	21 60       	ori	r18, 0x01	; 1
    51dc:	26 c0       	rjmp	.+76     	; 0x522a <vfprintf+0xca>
    51de:	22 60       	ori	r18, 0x02	; 2
    51e0:	24 60       	ori	r18, 0x04	; 4
    51e2:	23 c0       	rjmp	.+70     	; 0x522a <vfprintf+0xca>
    51e4:	28 60       	ori	r18, 0x08	; 8
    51e6:	21 c0       	rjmp	.+66     	; 0x522a <vfprintf+0xca>
    51e8:	27 fd       	sbrc	r18, 7
    51ea:	27 c0       	rjmp	.+78     	; 0x523a <vfprintf+0xda>
    51ec:	30 ed       	ldi	r19, 0xD0	; 208
    51ee:	38 0f       	add	r19, r24
    51f0:	3a 30       	cpi	r19, 0x0A	; 10
    51f2:	78 f4       	brcc	.+30     	; 0x5212 <vfprintf+0xb2>
    51f4:	26 ff       	sbrs	r18, 6
    51f6:	06 c0       	rjmp	.+12     	; 0x5204 <vfprintf+0xa4>
    51f8:	fa e0       	ldi	r31, 0x0A	; 10
    51fa:	5f 9e       	mul	r5, r31
    51fc:	30 0d       	add	r19, r0
    51fe:	11 24       	eor	r1, r1
    5200:	53 2e       	mov	r5, r19
    5202:	13 c0       	rjmp	.+38     	; 0x522a <vfprintf+0xca>
    5204:	8a e0       	ldi	r24, 0x0A	; 10
    5206:	38 9e       	mul	r3, r24
    5208:	30 0d       	add	r19, r0
    520a:	11 24       	eor	r1, r1
    520c:	33 2e       	mov	r3, r19
    520e:	20 62       	ori	r18, 0x20	; 32
    5210:	0c c0       	rjmp	.+24     	; 0x522a <vfprintf+0xca>
    5212:	8e 32       	cpi	r24, 0x2E	; 46
    5214:	21 f4       	brne	.+8      	; 0x521e <vfprintf+0xbe>
    5216:	26 fd       	sbrc	r18, 6
    5218:	6b c1       	rjmp	.+726    	; 0x54f0 <vfprintf+0x390>
    521a:	20 64       	ori	r18, 0x40	; 64
    521c:	06 c0       	rjmp	.+12     	; 0x522a <vfprintf+0xca>
    521e:	8c 36       	cpi	r24, 0x6C	; 108
    5220:	11 f4       	brne	.+4      	; 0x5226 <vfprintf+0xc6>
    5222:	20 68       	ori	r18, 0x80	; 128
    5224:	02 c0       	rjmp	.+4      	; 0x522a <vfprintf+0xca>
    5226:	88 36       	cpi	r24, 0x68	; 104
    5228:	41 f4       	brne	.+16     	; 0x523a <vfprintf+0xda>
    522a:	f6 01       	movw	r30, r12
    522c:	93 fd       	sbrc	r25, 3
    522e:	85 91       	lpm	r24, Z+
    5230:	93 ff       	sbrs	r25, 3
    5232:	81 91       	ld	r24, Z+
    5234:	6f 01       	movw	r12, r30
    5236:	81 11       	cpse	r24, r1
    5238:	c1 cf       	rjmp	.-126    	; 0x51bc <vfprintf+0x5c>
    523a:	98 2f       	mov	r25, r24
    523c:	9f 7d       	andi	r25, 0xDF	; 223
    523e:	95 54       	subi	r25, 0x45	; 69
    5240:	93 30       	cpi	r25, 0x03	; 3
    5242:	28 f4       	brcc	.+10     	; 0x524e <vfprintf+0xee>
    5244:	0c 5f       	subi	r16, 0xFC	; 252
    5246:	1f 4f       	sbci	r17, 0xFF	; 255
    5248:	ff e3       	ldi	r31, 0x3F	; 63
    524a:	f9 83       	std	Y+1, r31	; 0x01
    524c:	0d c0       	rjmp	.+26     	; 0x5268 <vfprintf+0x108>
    524e:	83 36       	cpi	r24, 0x63	; 99
    5250:	31 f0       	breq	.+12     	; 0x525e <vfprintf+0xfe>
    5252:	83 37       	cpi	r24, 0x73	; 115
    5254:	71 f0       	breq	.+28     	; 0x5272 <vfprintf+0x112>
    5256:	83 35       	cpi	r24, 0x53	; 83
    5258:	09 f0       	breq	.+2      	; 0x525c <vfprintf+0xfc>
    525a:	5b c0       	rjmp	.+182    	; 0x5312 <vfprintf+0x1b2>
    525c:	22 c0       	rjmp	.+68     	; 0x52a2 <vfprintf+0x142>
    525e:	f8 01       	movw	r30, r16
    5260:	80 81       	ld	r24, Z
    5262:	89 83       	std	Y+1, r24	; 0x01
    5264:	0e 5f       	subi	r16, 0xFE	; 254
    5266:	1f 4f       	sbci	r17, 0xFF	; 255
    5268:	44 24       	eor	r4, r4
    526a:	43 94       	inc	r4
    526c:	51 2c       	mov	r5, r1
    526e:	54 01       	movw	r10, r8
    5270:	15 c0       	rjmp	.+42     	; 0x529c <vfprintf+0x13c>
    5272:	38 01       	movw	r6, r16
    5274:	f2 e0       	ldi	r31, 0x02	; 2
    5276:	6f 0e       	add	r6, r31
    5278:	71 1c       	adc	r7, r1
    527a:	f8 01       	movw	r30, r16
    527c:	a0 80       	ld	r10, Z
    527e:	b1 80       	ldd	r11, Z+1	; 0x01
    5280:	26 ff       	sbrs	r18, 6
    5282:	03 c0       	rjmp	.+6      	; 0x528a <vfprintf+0x12a>
    5284:	65 2d       	mov	r22, r5
    5286:	70 e0       	ldi	r23, 0x00	; 0
    5288:	02 c0       	rjmp	.+4      	; 0x528e <vfprintf+0x12e>
    528a:	6f ef       	ldi	r22, 0xFF	; 255
    528c:	7f ef       	ldi	r23, 0xFF	; 255
    528e:	c5 01       	movw	r24, r10
    5290:	2c 87       	std	Y+12, r18	; 0x0c
    5292:	0e 94 be 2a 	call	0x557c	; 0x557c <strnlen>
    5296:	2c 01       	movw	r4, r24
    5298:	83 01       	movw	r16, r6
    529a:	2c 85       	ldd	r18, Y+12	; 0x0c
    529c:	2f 77       	andi	r18, 0x7F	; 127
    529e:	22 2e       	mov	r2, r18
    52a0:	17 c0       	rjmp	.+46     	; 0x52d0 <vfprintf+0x170>
    52a2:	38 01       	movw	r6, r16
    52a4:	f2 e0       	ldi	r31, 0x02	; 2
    52a6:	6f 0e       	add	r6, r31
    52a8:	71 1c       	adc	r7, r1
    52aa:	f8 01       	movw	r30, r16
    52ac:	a0 80       	ld	r10, Z
    52ae:	b1 80       	ldd	r11, Z+1	; 0x01
    52b0:	26 ff       	sbrs	r18, 6
    52b2:	03 c0       	rjmp	.+6      	; 0x52ba <vfprintf+0x15a>
    52b4:	65 2d       	mov	r22, r5
    52b6:	70 e0       	ldi	r23, 0x00	; 0
    52b8:	02 c0       	rjmp	.+4      	; 0x52be <vfprintf+0x15e>
    52ba:	6f ef       	ldi	r22, 0xFF	; 255
    52bc:	7f ef       	ldi	r23, 0xFF	; 255
    52be:	c5 01       	movw	r24, r10
    52c0:	2c 87       	std	Y+12, r18	; 0x0c
    52c2:	0e 94 b3 2a 	call	0x5566	; 0x5566 <strnlen_P>
    52c6:	2c 01       	movw	r4, r24
    52c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    52ca:	20 68       	ori	r18, 0x80	; 128
    52cc:	22 2e       	mov	r2, r18
    52ce:	83 01       	movw	r16, r6
    52d0:	23 fc       	sbrc	r2, 3
    52d2:	1b c0       	rjmp	.+54     	; 0x530a <vfprintf+0x1aa>
    52d4:	83 2d       	mov	r24, r3
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	48 16       	cp	r4, r24
    52da:	59 06       	cpc	r5, r25
    52dc:	b0 f4       	brcc	.+44     	; 0x530a <vfprintf+0x1aa>
    52de:	b7 01       	movw	r22, r14
    52e0:	80 e2       	ldi	r24, 0x20	; 32
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	0e 94 c9 2a 	call	0x5592	; 0x5592 <fputc>
    52e8:	3a 94       	dec	r3
    52ea:	f4 cf       	rjmp	.-24     	; 0x52d4 <vfprintf+0x174>
    52ec:	f5 01       	movw	r30, r10
    52ee:	27 fc       	sbrc	r2, 7
    52f0:	85 91       	lpm	r24, Z+
    52f2:	27 fe       	sbrs	r2, 7
    52f4:	81 91       	ld	r24, Z+
    52f6:	5f 01       	movw	r10, r30
    52f8:	b7 01       	movw	r22, r14
    52fa:	90 e0       	ldi	r25, 0x00	; 0
    52fc:	0e 94 c9 2a 	call	0x5592	; 0x5592 <fputc>
    5300:	31 10       	cpse	r3, r1
    5302:	3a 94       	dec	r3
    5304:	f1 e0       	ldi	r31, 0x01	; 1
    5306:	4f 1a       	sub	r4, r31
    5308:	51 08       	sbc	r5, r1
    530a:	41 14       	cp	r4, r1
    530c:	51 04       	cpc	r5, r1
    530e:	71 f7       	brne	.-36     	; 0x52ec <vfprintf+0x18c>
    5310:	e5 c0       	rjmp	.+458    	; 0x54dc <vfprintf+0x37c>
    5312:	84 36       	cpi	r24, 0x64	; 100
    5314:	11 f0       	breq	.+4      	; 0x531a <vfprintf+0x1ba>
    5316:	89 36       	cpi	r24, 0x69	; 105
    5318:	39 f5       	brne	.+78     	; 0x5368 <vfprintf+0x208>
    531a:	f8 01       	movw	r30, r16
    531c:	27 ff       	sbrs	r18, 7
    531e:	07 c0       	rjmp	.+14     	; 0x532e <vfprintf+0x1ce>
    5320:	60 81       	ld	r22, Z
    5322:	71 81       	ldd	r23, Z+1	; 0x01
    5324:	82 81       	ldd	r24, Z+2	; 0x02
    5326:	93 81       	ldd	r25, Z+3	; 0x03
    5328:	0c 5f       	subi	r16, 0xFC	; 252
    532a:	1f 4f       	sbci	r17, 0xFF	; 255
    532c:	08 c0       	rjmp	.+16     	; 0x533e <vfprintf+0x1de>
    532e:	60 81       	ld	r22, Z
    5330:	71 81       	ldd	r23, Z+1	; 0x01
    5332:	88 27       	eor	r24, r24
    5334:	77 fd       	sbrc	r23, 7
    5336:	80 95       	com	r24
    5338:	98 2f       	mov	r25, r24
    533a:	0e 5f       	subi	r16, 0xFE	; 254
    533c:	1f 4f       	sbci	r17, 0xFF	; 255
    533e:	2f 76       	andi	r18, 0x6F	; 111
    5340:	b2 2e       	mov	r11, r18
    5342:	97 ff       	sbrs	r25, 7
    5344:	09 c0       	rjmp	.+18     	; 0x5358 <vfprintf+0x1f8>
    5346:	90 95       	com	r25
    5348:	80 95       	com	r24
    534a:	70 95       	com	r23
    534c:	61 95       	neg	r22
    534e:	7f 4f       	sbci	r23, 0xFF	; 255
    5350:	8f 4f       	sbci	r24, 0xFF	; 255
    5352:	9f 4f       	sbci	r25, 0xFF	; 255
    5354:	20 68       	ori	r18, 0x80	; 128
    5356:	b2 2e       	mov	r11, r18
    5358:	2a e0       	ldi	r18, 0x0A	; 10
    535a:	30 e0       	ldi	r19, 0x00	; 0
    535c:	a4 01       	movw	r20, r8
    535e:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__ultoa_invert>
    5362:	a8 2e       	mov	r10, r24
    5364:	a8 18       	sub	r10, r8
    5366:	44 c0       	rjmp	.+136    	; 0x53f0 <vfprintf+0x290>
    5368:	85 37       	cpi	r24, 0x75	; 117
    536a:	29 f4       	brne	.+10     	; 0x5376 <vfprintf+0x216>
    536c:	2f 7e       	andi	r18, 0xEF	; 239
    536e:	b2 2e       	mov	r11, r18
    5370:	2a e0       	ldi	r18, 0x0A	; 10
    5372:	30 e0       	ldi	r19, 0x00	; 0
    5374:	25 c0       	rjmp	.+74     	; 0x53c0 <vfprintf+0x260>
    5376:	f2 2f       	mov	r31, r18
    5378:	f9 7f       	andi	r31, 0xF9	; 249
    537a:	bf 2e       	mov	r11, r31
    537c:	8f 36       	cpi	r24, 0x6F	; 111
    537e:	c1 f0       	breq	.+48     	; 0x53b0 <vfprintf+0x250>
    5380:	18 f4       	brcc	.+6      	; 0x5388 <vfprintf+0x228>
    5382:	88 35       	cpi	r24, 0x58	; 88
    5384:	79 f0       	breq	.+30     	; 0x53a4 <vfprintf+0x244>
    5386:	b4 c0       	rjmp	.+360    	; 0x54f0 <vfprintf+0x390>
    5388:	80 37       	cpi	r24, 0x70	; 112
    538a:	19 f0       	breq	.+6      	; 0x5392 <vfprintf+0x232>
    538c:	88 37       	cpi	r24, 0x78	; 120
    538e:	21 f0       	breq	.+8      	; 0x5398 <vfprintf+0x238>
    5390:	af c0       	rjmp	.+350    	; 0x54f0 <vfprintf+0x390>
    5392:	2f 2f       	mov	r18, r31
    5394:	20 61       	ori	r18, 0x10	; 16
    5396:	b2 2e       	mov	r11, r18
    5398:	b4 fe       	sbrs	r11, 4
    539a:	0d c0       	rjmp	.+26     	; 0x53b6 <vfprintf+0x256>
    539c:	8b 2d       	mov	r24, r11
    539e:	84 60       	ori	r24, 0x04	; 4
    53a0:	b8 2e       	mov	r11, r24
    53a2:	09 c0       	rjmp	.+18     	; 0x53b6 <vfprintf+0x256>
    53a4:	24 ff       	sbrs	r18, 4
    53a6:	0a c0       	rjmp	.+20     	; 0x53bc <vfprintf+0x25c>
    53a8:	9f 2f       	mov	r25, r31
    53aa:	96 60       	ori	r25, 0x06	; 6
    53ac:	b9 2e       	mov	r11, r25
    53ae:	06 c0       	rjmp	.+12     	; 0x53bc <vfprintf+0x25c>
    53b0:	28 e0       	ldi	r18, 0x08	; 8
    53b2:	30 e0       	ldi	r19, 0x00	; 0
    53b4:	05 c0       	rjmp	.+10     	; 0x53c0 <vfprintf+0x260>
    53b6:	20 e1       	ldi	r18, 0x10	; 16
    53b8:	30 e0       	ldi	r19, 0x00	; 0
    53ba:	02 c0       	rjmp	.+4      	; 0x53c0 <vfprintf+0x260>
    53bc:	20 e1       	ldi	r18, 0x10	; 16
    53be:	32 e0       	ldi	r19, 0x02	; 2
    53c0:	f8 01       	movw	r30, r16
    53c2:	b7 fe       	sbrs	r11, 7
    53c4:	07 c0       	rjmp	.+14     	; 0x53d4 <vfprintf+0x274>
    53c6:	60 81       	ld	r22, Z
    53c8:	71 81       	ldd	r23, Z+1	; 0x01
    53ca:	82 81       	ldd	r24, Z+2	; 0x02
    53cc:	93 81       	ldd	r25, Z+3	; 0x03
    53ce:	0c 5f       	subi	r16, 0xFC	; 252
    53d0:	1f 4f       	sbci	r17, 0xFF	; 255
    53d2:	06 c0       	rjmp	.+12     	; 0x53e0 <vfprintf+0x280>
    53d4:	60 81       	ld	r22, Z
    53d6:	71 81       	ldd	r23, Z+1	; 0x01
    53d8:	80 e0       	ldi	r24, 0x00	; 0
    53da:	90 e0       	ldi	r25, 0x00	; 0
    53dc:	0e 5f       	subi	r16, 0xFE	; 254
    53de:	1f 4f       	sbci	r17, 0xFF	; 255
    53e0:	a4 01       	movw	r20, r8
    53e2:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__ultoa_invert>
    53e6:	a8 2e       	mov	r10, r24
    53e8:	a8 18       	sub	r10, r8
    53ea:	fb 2d       	mov	r31, r11
    53ec:	ff 77       	andi	r31, 0x7F	; 127
    53ee:	bf 2e       	mov	r11, r31
    53f0:	b6 fe       	sbrs	r11, 6
    53f2:	0b c0       	rjmp	.+22     	; 0x540a <vfprintf+0x2aa>
    53f4:	2b 2d       	mov	r18, r11
    53f6:	2e 7f       	andi	r18, 0xFE	; 254
    53f8:	a5 14       	cp	r10, r5
    53fa:	50 f4       	brcc	.+20     	; 0x5410 <vfprintf+0x2b0>
    53fc:	b4 fe       	sbrs	r11, 4
    53fe:	0a c0       	rjmp	.+20     	; 0x5414 <vfprintf+0x2b4>
    5400:	b2 fc       	sbrc	r11, 2
    5402:	08 c0       	rjmp	.+16     	; 0x5414 <vfprintf+0x2b4>
    5404:	2b 2d       	mov	r18, r11
    5406:	2e 7e       	andi	r18, 0xEE	; 238
    5408:	05 c0       	rjmp	.+10     	; 0x5414 <vfprintf+0x2b4>
    540a:	7a 2c       	mov	r7, r10
    540c:	2b 2d       	mov	r18, r11
    540e:	03 c0       	rjmp	.+6      	; 0x5416 <vfprintf+0x2b6>
    5410:	7a 2c       	mov	r7, r10
    5412:	01 c0       	rjmp	.+2      	; 0x5416 <vfprintf+0x2b6>
    5414:	75 2c       	mov	r7, r5
    5416:	24 ff       	sbrs	r18, 4
    5418:	0d c0       	rjmp	.+26     	; 0x5434 <vfprintf+0x2d4>
    541a:	fe 01       	movw	r30, r28
    541c:	ea 0d       	add	r30, r10
    541e:	f1 1d       	adc	r31, r1
    5420:	80 81       	ld	r24, Z
    5422:	80 33       	cpi	r24, 0x30	; 48
    5424:	11 f4       	brne	.+4      	; 0x542a <vfprintf+0x2ca>
    5426:	29 7e       	andi	r18, 0xE9	; 233
    5428:	09 c0       	rjmp	.+18     	; 0x543c <vfprintf+0x2dc>
    542a:	22 ff       	sbrs	r18, 2
    542c:	06 c0       	rjmp	.+12     	; 0x543a <vfprintf+0x2da>
    542e:	73 94       	inc	r7
    5430:	73 94       	inc	r7
    5432:	04 c0       	rjmp	.+8      	; 0x543c <vfprintf+0x2dc>
    5434:	82 2f       	mov	r24, r18
    5436:	86 78       	andi	r24, 0x86	; 134
    5438:	09 f0       	breq	.+2      	; 0x543c <vfprintf+0x2dc>
    543a:	73 94       	inc	r7
    543c:	23 fd       	sbrc	r18, 3
    543e:	13 c0       	rjmp	.+38     	; 0x5466 <vfprintf+0x306>
    5440:	20 ff       	sbrs	r18, 0
    5442:	06 c0       	rjmp	.+12     	; 0x5450 <vfprintf+0x2f0>
    5444:	5a 2c       	mov	r5, r10
    5446:	73 14       	cp	r7, r3
    5448:	18 f4       	brcc	.+6      	; 0x5450 <vfprintf+0x2f0>
    544a:	53 0c       	add	r5, r3
    544c:	57 18       	sub	r5, r7
    544e:	73 2c       	mov	r7, r3
    5450:	73 14       	cp	r7, r3
    5452:	68 f4       	brcc	.+26     	; 0x546e <vfprintf+0x30e>
    5454:	b7 01       	movw	r22, r14
    5456:	80 e2       	ldi	r24, 0x20	; 32
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	2c 87       	std	Y+12, r18	; 0x0c
    545c:	0e 94 c9 2a 	call	0x5592	; 0x5592 <fputc>
    5460:	73 94       	inc	r7
    5462:	2c 85       	ldd	r18, Y+12	; 0x0c
    5464:	f5 cf       	rjmp	.-22     	; 0x5450 <vfprintf+0x2f0>
    5466:	73 14       	cp	r7, r3
    5468:	10 f4       	brcc	.+4      	; 0x546e <vfprintf+0x30e>
    546a:	37 18       	sub	r3, r7
    546c:	01 c0       	rjmp	.+2      	; 0x5470 <vfprintf+0x310>
    546e:	31 2c       	mov	r3, r1
    5470:	24 ff       	sbrs	r18, 4
    5472:	12 c0       	rjmp	.+36     	; 0x5498 <vfprintf+0x338>
    5474:	b7 01       	movw	r22, r14
    5476:	80 e3       	ldi	r24, 0x30	; 48
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	2c 87       	std	Y+12, r18	; 0x0c
    547c:	0e 94 c9 2a 	call	0x5592	; 0x5592 <fputc>
    5480:	2c 85       	ldd	r18, Y+12	; 0x0c
    5482:	22 ff       	sbrs	r18, 2
    5484:	17 c0       	rjmp	.+46     	; 0x54b4 <vfprintf+0x354>
    5486:	21 ff       	sbrs	r18, 1
    5488:	03 c0       	rjmp	.+6      	; 0x5490 <vfprintf+0x330>
    548a:	88 e5       	ldi	r24, 0x58	; 88
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	02 c0       	rjmp	.+4      	; 0x5494 <vfprintf+0x334>
    5490:	88 e7       	ldi	r24, 0x78	; 120
    5492:	90 e0       	ldi	r25, 0x00	; 0
    5494:	b7 01       	movw	r22, r14
    5496:	0c c0       	rjmp	.+24     	; 0x54b0 <vfprintf+0x350>
    5498:	82 2f       	mov	r24, r18
    549a:	86 78       	andi	r24, 0x86	; 134
    549c:	59 f0       	breq	.+22     	; 0x54b4 <vfprintf+0x354>
    549e:	21 fd       	sbrc	r18, 1
    54a0:	02 c0       	rjmp	.+4      	; 0x54a6 <vfprintf+0x346>
    54a2:	80 e2       	ldi	r24, 0x20	; 32
    54a4:	01 c0       	rjmp	.+2      	; 0x54a8 <vfprintf+0x348>
    54a6:	8b e2       	ldi	r24, 0x2B	; 43
    54a8:	27 fd       	sbrc	r18, 7
    54aa:	8d e2       	ldi	r24, 0x2D	; 45
    54ac:	b7 01       	movw	r22, r14
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	0e 94 c9 2a 	call	0x5592	; 0x5592 <fputc>
    54b4:	a5 14       	cp	r10, r5
    54b6:	38 f4       	brcc	.+14     	; 0x54c6 <vfprintf+0x366>
    54b8:	b7 01       	movw	r22, r14
    54ba:	80 e3       	ldi	r24, 0x30	; 48
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	0e 94 c9 2a 	call	0x5592	; 0x5592 <fputc>
    54c2:	5a 94       	dec	r5
    54c4:	f7 cf       	rjmp	.-18     	; 0x54b4 <vfprintf+0x354>
    54c6:	aa 94       	dec	r10
    54c8:	f4 01       	movw	r30, r8
    54ca:	ea 0d       	add	r30, r10
    54cc:	f1 1d       	adc	r31, r1
    54ce:	80 81       	ld	r24, Z
    54d0:	b7 01       	movw	r22, r14
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	0e 94 c9 2a 	call	0x5592	; 0x5592 <fputc>
    54d8:	a1 10       	cpse	r10, r1
    54da:	f5 cf       	rjmp	.-22     	; 0x54c6 <vfprintf+0x366>
    54dc:	33 20       	and	r3, r3
    54de:	09 f4       	brne	.+2      	; 0x54e2 <vfprintf+0x382>
    54e0:	51 ce       	rjmp	.-862    	; 0x5184 <vfprintf+0x24>
    54e2:	b7 01       	movw	r22, r14
    54e4:	80 e2       	ldi	r24, 0x20	; 32
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	0e 94 c9 2a 	call	0x5592	; 0x5592 <fputc>
    54ec:	3a 94       	dec	r3
    54ee:	f6 cf       	rjmp	.-20     	; 0x54dc <vfprintf+0x37c>
    54f0:	f7 01       	movw	r30, r14
    54f2:	86 81       	ldd	r24, Z+6	; 0x06
    54f4:	97 81       	ldd	r25, Z+7	; 0x07
    54f6:	02 c0       	rjmp	.+4      	; 0x54fc <vfprintf+0x39c>
    54f8:	8f ef       	ldi	r24, 0xFF	; 255
    54fa:	9f ef       	ldi	r25, 0xFF	; 255
    54fc:	2c 96       	adiw	r28, 0x0c	; 12
    54fe:	e2 e1       	ldi	r30, 0x12	; 18
    5500:	0c 94 75 2b 	jmp	0x56ea	; 0x56ea <__epilogue_restores__>

00005504 <__eerd_block_m32a>:
    5504:	dc 01       	movw	r26, r24
    5506:	cb 01       	movw	r24, r22

00005508 <__eerd_blraw_m32a>:
    5508:	fc 01       	movw	r30, r24
    550a:	e1 99       	sbic	0x1c, 1	; 28
    550c:	fe cf       	rjmp	.-4      	; 0x550a <__eerd_blraw_m32a+0x2>
    550e:	06 c0       	rjmp	.+12     	; 0x551c <__eerd_blraw_m32a+0x14>
    5510:	ff bb       	out	0x1f, r31	; 31
    5512:	ee bb       	out	0x1e, r30	; 30
    5514:	e0 9a       	sbi	0x1c, 0	; 28
    5516:	31 96       	adiw	r30, 0x01	; 1
    5518:	0d b2       	in	r0, 0x1d	; 29
    551a:	0d 92       	st	X+, r0
    551c:	41 50       	subi	r20, 0x01	; 1
    551e:	50 40       	sbci	r21, 0x00	; 0
    5520:	b8 f7       	brcc	.-18     	; 0x5510 <__eerd_blraw_m32a+0x8>
    5522:	08 95       	ret

00005524 <__eeupd_block_m32a>:
    5524:	dc 01       	movw	r26, r24
    5526:	a4 0f       	add	r26, r20
    5528:	b5 1f       	adc	r27, r21
    552a:	41 50       	subi	r20, 0x01	; 1
    552c:	50 40       	sbci	r21, 0x00	; 0
    552e:	48 f0       	brcs	.+18     	; 0x5542 <__eeupd_block_m32a+0x1e>
    5530:	cb 01       	movw	r24, r22
    5532:	84 0f       	add	r24, r20
    5534:	95 1f       	adc	r25, r21
    5536:	2e 91       	ld	r18, -X
    5538:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__eeupd_r18_m32a>
    553c:	41 50       	subi	r20, 0x01	; 1
    553e:	50 40       	sbci	r21, 0x00	; 0
    5540:	d0 f7       	brcc	.-12     	; 0x5536 <__eeupd_block_m32a+0x12>
    5542:	08 95       	ret

00005544 <__eeupd_byte_m32a>:
    5544:	26 2f       	mov	r18, r22

00005546 <__eeupd_r18_m32a>:
    5546:	e1 99       	sbic	0x1c, 1	; 28
    5548:	fe cf       	rjmp	.-4      	; 0x5546 <__eeupd_r18_m32a>
    554a:	9f bb       	out	0x1f, r25	; 31
    554c:	8e bb       	out	0x1e, r24	; 30
    554e:	e0 9a       	sbi	0x1c, 0	; 28
    5550:	01 97       	sbiw	r24, 0x01	; 1
    5552:	0d b2       	in	r0, 0x1d	; 29
    5554:	02 16       	cp	r0, r18
    5556:	31 f0       	breq	.+12     	; 0x5564 <__eeupd_r18_m32a+0x1e>
    5558:	2d bb       	out	0x1d, r18	; 29
    555a:	0f b6       	in	r0, 0x3f	; 63
    555c:	f8 94       	cli
    555e:	e2 9a       	sbi	0x1c, 2	; 28
    5560:	e1 9a       	sbi	0x1c, 1	; 28
    5562:	0f be       	out	0x3f, r0	; 63
    5564:	08 95       	ret

00005566 <strnlen_P>:
    5566:	fc 01       	movw	r30, r24
    5568:	05 90       	lpm	r0, Z+
    556a:	61 50       	subi	r22, 0x01	; 1
    556c:	70 40       	sbci	r23, 0x00	; 0
    556e:	01 10       	cpse	r0, r1
    5570:	d8 f7       	brcc	.-10     	; 0x5568 <strnlen_P+0x2>
    5572:	80 95       	com	r24
    5574:	90 95       	com	r25
    5576:	8e 0f       	add	r24, r30
    5578:	9f 1f       	adc	r25, r31
    557a:	08 95       	ret

0000557c <strnlen>:
    557c:	fc 01       	movw	r30, r24
    557e:	61 50       	subi	r22, 0x01	; 1
    5580:	70 40       	sbci	r23, 0x00	; 0
    5582:	01 90       	ld	r0, Z+
    5584:	01 10       	cpse	r0, r1
    5586:	d8 f7       	brcc	.-10     	; 0x557e <strnlen+0x2>
    5588:	80 95       	com	r24
    558a:	90 95       	com	r25
    558c:	8e 0f       	add	r24, r30
    558e:	9f 1f       	adc	r25, r31
    5590:	08 95       	ret

00005592 <fputc>:
    5592:	0f 93       	push	r16
    5594:	1f 93       	push	r17
    5596:	cf 93       	push	r28
    5598:	df 93       	push	r29
    559a:	18 2f       	mov	r17, r24
    559c:	09 2f       	mov	r16, r25
    559e:	eb 01       	movw	r28, r22
    55a0:	8b 81       	ldd	r24, Y+3	; 0x03
    55a2:	81 fd       	sbrc	r24, 1
    55a4:	03 c0       	rjmp	.+6      	; 0x55ac <fputc+0x1a>
    55a6:	8f ef       	ldi	r24, 0xFF	; 255
    55a8:	9f ef       	ldi	r25, 0xFF	; 255
    55aa:	20 c0       	rjmp	.+64     	; 0x55ec <fputc+0x5a>
    55ac:	82 ff       	sbrs	r24, 2
    55ae:	10 c0       	rjmp	.+32     	; 0x55d0 <fputc+0x3e>
    55b0:	4e 81       	ldd	r20, Y+6	; 0x06
    55b2:	5f 81       	ldd	r21, Y+7	; 0x07
    55b4:	2c 81       	ldd	r18, Y+4	; 0x04
    55b6:	3d 81       	ldd	r19, Y+5	; 0x05
    55b8:	42 17       	cp	r20, r18
    55ba:	53 07       	cpc	r21, r19
    55bc:	7c f4       	brge	.+30     	; 0x55dc <fputc+0x4a>
    55be:	e8 81       	ld	r30, Y
    55c0:	f9 81       	ldd	r31, Y+1	; 0x01
    55c2:	9f 01       	movw	r18, r30
    55c4:	2f 5f       	subi	r18, 0xFF	; 255
    55c6:	3f 4f       	sbci	r19, 0xFF	; 255
    55c8:	39 83       	std	Y+1, r19	; 0x01
    55ca:	28 83       	st	Y, r18
    55cc:	10 83       	st	Z, r17
    55ce:	06 c0       	rjmp	.+12     	; 0x55dc <fputc+0x4a>
    55d0:	e8 85       	ldd	r30, Y+8	; 0x08
    55d2:	f9 85       	ldd	r31, Y+9	; 0x09
    55d4:	81 2f       	mov	r24, r17
    55d6:	09 95       	icall
    55d8:	89 2b       	or	r24, r25
    55da:	29 f7       	brne	.-54     	; 0x55a6 <fputc+0x14>
    55dc:	2e 81       	ldd	r18, Y+6	; 0x06
    55de:	3f 81       	ldd	r19, Y+7	; 0x07
    55e0:	2f 5f       	subi	r18, 0xFF	; 255
    55e2:	3f 4f       	sbci	r19, 0xFF	; 255
    55e4:	3f 83       	std	Y+7, r19	; 0x07
    55e6:	2e 83       	std	Y+6, r18	; 0x06
    55e8:	81 2f       	mov	r24, r17
    55ea:	90 2f       	mov	r25, r16
    55ec:	df 91       	pop	r29
    55ee:	cf 91       	pop	r28
    55f0:	1f 91       	pop	r17
    55f2:	0f 91       	pop	r16
    55f4:	08 95       	ret

000055f6 <__ultoa_invert>:
    55f6:	fa 01       	movw	r30, r20
    55f8:	aa 27       	eor	r26, r26
    55fa:	28 30       	cpi	r18, 0x08	; 8
    55fc:	51 f1       	breq	.+84     	; 0x5652 <__ultoa_invert+0x5c>
    55fe:	20 31       	cpi	r18, 0x10	; 16
    5600:	81 f1       	breq	.+96     	; 0x5662 <__ultoa_invert+0x6c>
    5602:	e8 94       	clt
    5604:	6f 93       	push	r22
    5606:	6e 7f       	andi	r22, 0xFE	; 254
    5608:	6e 5f       	subi	r22, 0xFE	; 254
    560a:	7f 4f       	sbci	r23, 0xFF	; 255
    560c:	8f 4f       	sbci	r24, 0xFF	; 255
    560e:	9f 4f       	sbci	r25, 0xFF	; 255
    5610:	af 4f       	sbci	r26, 0xFF	; 255
    5612:	b1 e0       	ldi	r27, 0x01	; 1
    5614:	3e d0       	rcall	.+124    	; 0x5692 <__ultoa_invert+0x9c>
    5616:	b4 e0       	ldi	r27, 0x04	; 4
    5618:	3c d0       	rcall	.+120    	; 0x5692 <__ultoa_invert+0x9c>
    561a:	67 0f       	add	r22, r23
    561c:	78 1f       	adc	r23, r24
    561e:	89 1f       	adc	r24, r25
    5620:	9a 1f       	adc	r25, r26
    5622:	a1 1d       	adc	r26, r1
    5624:	68 0f       	add	r22, r24
    5626:	79 1f       	adc	r23, r25
    5628:	8a 1f       	adc	r24, r26
    562a:	91 1d       	adc	r25, r1
    562c:	a1 1d       	adc	r26, r1
    562e:	6a 0f       	add	r22, r26
    5630:	71 1d       	adc	r23, r1
    5632:	81 1d       	adc	r24, r1
    5634:	91 1d       	adc	r25, r1
    5636:	a1 1d       	adc	r26, r1
    5638:	20 d0       	rcall	.+64     	; 0x567a <__ultoa_invert+0x84>
    563a:	09 f4       	brne	.+2      	; 0x563e <__ultoa_invert+0x48>
    563c:	68 94       	set
    563e:	3f 91       	pop	r19
    5640:	2a e0       	ldi	r18, 0x0A	; 10
    5642:	26 9f       	mul	r18, r22
    5644:	11 24       	eor	r1, r1
    5646:	30 19       	sub	r19, r0
    5648:	30 5d       	subi	r19, 0xD0	; 208
    564a:	31 93       	st	Z+, r19
    564c:	de f6       	brtc	.-74     	; 0x5604 <__ultoa_invert+0xe>
    564e:	cf 01       	movw	r24, r30
    5650:	08 95       	ret
    5652:	46 2f       	mov	r20, r22
    5654:	47 70       	andi	r20, 0x07	; 7
    5656:	40 5d       	subi	r20, 0xD0	; 208
    5658:	41 93       	st	Z+, r20
    565a:	b3 e0       	ldi	r27, 0x03	; 3
    565c:	0f d0       	rcall	.+30     	; 0x567c <__ultoa_invert+0x86>
    565e:	c9 f7       	brne	.-14     	; 0x5652 <__ultoa_invert+0x5c>
    5660:	f6 cf       	rjmp	.-20     	; 0x564e <__ultoa_invert+0x58>
    5662:	46 2f       	mov	r20, r22
    5664:	4f 70       	andi	r20, 0x0F	; 15
    5666:	40 5d       	subi	r20, 0xD0	; 208
    5668:	4a 33       	cpi	r20, 0x3A	; 58
    566a:	18 f0       	brcs	.+6      	; 0x5672 <__ultoa_invert+0x7c>
    566c:	49 5d       	subi	r20, 0xD9	; 217
    566e:	31 fd       	sbrc	r19, 1
    5670:	40 52       	subi	r20, 0x20	; 32
    5672:	41 93       	st	Z+, r20
    5674:	02 d0       	rcall	.+4      	; 0x567a <__ultoa_invert+0x84>
    5676:	a9 f7       	brne	.-22     	; 0x5662 <__ultoa_invert+0x6c>
    5678:	ea cf       	rjmp	.-44     	; 0x564e <__ultoa_invert+0x58>
    567a:	b4 e0       	ldi	r27, 0x04	; 4
    567c:	a6 95       	lsr	r26
    567e:	97 95       	ror	r25
    5680:	87 95       	ror	r24
    5682:	77 95       	ror	r23
    5684:	67 95       	ror	r22
    5686:	ba 95       	dec	r27
    5688:	c9 f7       	brne	.-14     	; 0x567c <__ultoa_invert+0x86>
    568a:	00 97       	sbiw	r24, 0x00	; 0
    568c:	61 05       	cpc	r22, r1
    568e:	71 05       	cpc	r23, r1
    5690:	08 95       	ret
    5692:	9b 01       	movw	r18, r22
    5694:	ac 01       	movw	r20, r24
    5696:	0a 2e       	mov	r0, r26
    5698:	06 94       	lsr	r0
    569a:	57 95       	ror	r21
    569c:	47 95       	ror	r20
    569e:	37 95       	ror	r19
    56a0:	27 95       	ror	r18
    56a2:	ba 95       	dec	r27
    56a4:	c9 f7       	brne	.-14     	; 0x5698 <__ultoa_invert+0xa2>
    56a6:	62 0f       	add	r22, r18
    56a8:	73 1f       	adc	r23, r19
    56aa:	84 1f       	adc	r24, r20
    56ac:	95 1f       	adc	r25, r21
    56ae:	a0 1d       	adc	r26, r0
    56b0:	08 95       	ret

000056b2 <__prologue_saves__>:
    56b2:	2f 92       	push	r2
    56b4:	3f 92       	push	r3
    56b6:	4f 92       	push	r4
    56b8:	5f 92       	push	r5
    56ba:	6f 92       	push	r6
    56bc:	7f 92       	push	r7
    56be:	8f 92       	push	r8
    56c0:	9f 92       	push	r9
    56c2:	af 92       	push	r10
    56c4:	bf 92       	push	r11
    56c6:	cf 92       	push	r12
    56c8:	df 92       	push	r13
    56ca:	ef 92       	push	r14
    56cc:	ff 92       	push	r15
    56ce:	0f 93       	push	r16
    56d0:	1f 93       	push	r17
    56d2:	cf 93       	push	r28
    56d4:	df 93       	push	r29
    56d6:	cd b7       	in	r28, 0x3d	; 61
    56d8:	de b7       	in	r29, 0x3e	; 62
    56da:	ca 1b       	sub	r28, r26
    56dc:	db 0b       	sbc	r29, r27
    56de:	0f b6       	in	r0, 0x3f	; 63
    56e0:	f8 94       	cli
    56e2:	de bf       	out	0x3e, r29	; 62
    56e4:	0f be       	out	0x3f, r0	; 63
    56e6:	cd bf       	out	0x3d, r28	; 61
    56e8:	09 94       	ijmp

000056ea <__epilogue_restores__>:
    56ea:	2a 88       	ldd	r2, Y+18	; 0x12
    56ec:	39 88       	ldd	r3, Y+17	; 0x11
    56ee:	48 88       	ldd	r4, Y+16	; 0x10
    56f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    56f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    56f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    56f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    56f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    56fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    56fc:	b9 84       	ldd	r11, Y+9	; 0x09
    56fe:	c8 84       	ldd	r12, Y+8	; 0x08
    5700:	df 80       	ldd	r13, Y+7	; 0x07
    5702:	ee 80       	ldd	r14, Y+6	; 0x06
    5704:	fd 80       	ldd	r15, Y+5	; 0x05
    5706:	0c 81       	ldd	r16, Y+4	; 0x04
    5708:	1b 81       	ldd	r17, Y+3	; 0x03
    570a:	aa 81       	ldd	r26, Y+2	; 0x02
    570c:	b9 81       	ldd	r27, Y+1	; 0x01
    570e:	ce 0f       	add	r28, r30
    5710:	d1 1d       	adc	r29, r1
    5712:	0f b6       	in	r0, 0x3f	; 63
    5714:	f8 94       	cli
    5716:	de bf       	out	0x3e, r29	; 62
    5718:	0f be       	out	0x3f, r0	; 63
    571a:	cd bf       	out	0x3d, r28	; 61
    571c:	ed 01       	movw	r28, r26
    571e:	08 95       	ret

00005720 <_exit>:
    5720:	f8 94       	cli

00005722 <__stop_program>:
    5722:	ff cf       	rjmp	.-2      	; 0x5722 <__stop_program>
